<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32F4xx-Nucleo\Azure_Sns.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32F4xx-Nucleo\Azure_Sns.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon May 07 13:25:58 2018
<BR><P>
<H3>Maximum Stack Usage =       4024 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
tlsio_mbedtls_dowork &rArr; decode_ssl_received_bytes &rArr; mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1b4]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b4]">ADC_IRQHandler</a><BR>
 <LI><a href="#[33b]">MultiTree_Destroy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33b]">MultiTree_Destroy</a><BR>
 <LI><a href="#[339]">MultiTree_AddLeaf</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[339]">MultiTree_AddLeaf</a><BR>
 <LI><a href="#[33a]">JSONEncoder_EncodeTree</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33a]">JSONEncoder_EncodeTree</a><BR>
 <LI><a href="#[19c]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19c]">BusFault_Handler</a><BR>
 <LI><a href="#[3fa]">Destroy_AGENT_DATA_TYPE</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3fa]">Destroy_AGENT_DATA_TYPE</a><BR>
 <LI><a href="#[429]">Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[429]">Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE</a><BR>
 <LI><a href="#[822]">json_object_free</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[43c]">json_value_free</a><BR>
 <LI><a href="#[816]">json_array_free</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[43c]">json_value_free</a><BR>
 <LI><a href="#[828]">json_serialize_to_buffer_r</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[828]">json_serialize_to_buffer_r</a><BR>
 <LI><a href="#[99c]">parse_object_value</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[826]">parse_value</a><BR>
 <LI><a href="#[995]">parse_array_value</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[826]">parse_value</a><BR>
 <LI><a href="#[400]">FindReportedProperty</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[400]">FindReportedProperty</a><BR>
 <LI><a href="#[19a]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19a]">HardFault_Handler</a><BR>
 <LI><a href="#[19b]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19b]">MemManage_Handler</a><BR>
 <LI><a href="#[19d]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19d]">UsageFault_Handler</a><BR>
 <LI><a href="#[70a]">NDEF_IdentifySPRecord</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[709]">NDEF_ParseRecordHeader</a><BR>
 <LI><a href="#[50b]">STM32_Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[50b]">STM32_Error_Handler</a><BR>
 <LI><a href="#[3e0]">deinitializeDesiredProperties</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e0]">deinitializeDesiredProperties</a><BR>
 <LI><a href="#[3da]">initializeDesiredProperties</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3da]">initializeDesiredProperties</a><BR>
 <LI><a href="#[3f6]">FindValue</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f6]">FindValue</a><BR>
 <LI><a href="#[857]">mbedtls_gcm_update</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7fd]">mbedtls_cipher_update</a><BR>
 <LI><a href="#[960]">x509_crt_verify_child</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[960]">x509_crt_verify_child</a><BR>
 <LI><a href="#[715]">ParseValue</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71b]">ParseObject</a><BR>
 <LI><a href="#[713]">ParseArray</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[715]">ParseValue</a><BR>
 <LI><a href="#[456]">DecodeValueFromNode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[456]">DecodeValueFromNode</a><BR>
 <LI><a href="#[4fa]">HTS221_assert_failed</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4fa]">HTS221_assert_failed</a><BR>
 <LI><a href="#[5b4]">LPS25HB_assert_failed</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5b4]">LPS25HB_assert_failed</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b4]">ADC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1ee]">AgentDataTypes_ToString</a> from agenttypesystem.o(i.AgentDataTypes_ToString) referenced from agenttypesystem.o(i.AgentDataTypes_ToString)
 <LI><a href="#[1ee]">AgentDataTypes_ToString</a> from agenttypesystem.o(i.AgentDataTypes_ToString) referenced from datamarshaller.o(i.DataMarshaller_SendData)
 <LI><a href="#[1f9]">BSP_ACCELERO_Disable_6D_Orientation_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_6D_Orientation_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWOrientation6D)
 <LI><a href="#[1f8]">BSP_ACCELERO_Disable_6D_Orientation_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_6D_Orientation_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWOrientation6D)
 <LI><a href="#[1f3]">BSP_ACCELERO_Disable_Double_Tap_Detection_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_Double_Tap_Detection_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWDoubleTap)
 <LI><a href="#[1f2]">BSP_ACCELERO_Disable_Double_Tap_Detection_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_Double_Tap_Detection_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWDoubleTap)
 <LI><a href="#[1f7]">BSP_ACCELERO_Disable_Free_Fall_Detection_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_Free_Fall_Detection_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWFreeFall)
 <LI><a href="#[1f6]">BSP_ACCELERO_Disable_Free_Fall_Detection_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_Free_Fall_Detection_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWFreeFall)
 <LI><a href="#[1fb]">BSP_ACCELERO_Disable_Pedometer_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_Pedometer_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWPedometer)
 <LI><a href="#[1fa]">BSP_ACCELERO_Disable_Pedometer_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_Pedometer_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWPedometer)
 <LI><a href="#[1fd]">BSP_ACCELERO_Disable_Single_Tap_Detection_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_Single_Tap_Detection_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWSingleTap)
 <LI><a href="#[1fc]">BSP_ACCELERO_Disable_Single_Tap_Detection_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_Single_Tap_Detection_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWSingleTap)
 <LI><a href="#[1ff]">BSP_ACCELERO_Disable_Tilt_Detection_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_Tilt_Detection_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWTilt)
 <LI><a href="#[1fe]">BSP_ACCELERO_Disable_Tilt_Detection_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_Tilt_Detection_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWTilt)
 <LI><a href="#[201]">BSP_ACCELERO_Disable_Wake_Up_Detection_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_Wake_Up_Detection_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWWakeUp)
 <LI><a href="#[200]">BSP_ACCELERO_Disable_Wake_Up_Detection_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_Wake_Up_Detection_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWWakeUp)
 <LI><a href="#[207]">BSP_ACCELERO_Enable_6D_Orientation_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_6D_Orientation_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.EnableHWOrientation6D)
 <LI><a href="#[206]">BSP_ACCELERO_Enable_6D_Orientation_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_6D_Orientation_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.EnableHWOrientation6D)
 <LI><a href="#[203]">BSP_ACCELERO_Enable_Double_Tap_Detection_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_Double_Tap_Detection_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.EnableHWDoubleTap)
 <LI><a href="#[202]">BSP_ACCELERO_Enable_Double_Tap_Detection_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_Double_Tap_Detection_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.EnableHWDoubleTap)
 <LI><a href="#[205]">BSP_ACCELERO_Enable_Free_Fall_Detection_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_Free_Fall_Detection_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.EnableHWFreeFall)
 <LI><a href="#[204]">BSP_ACCELERO_Enable_Free_Fall_Detection_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_Free_Fall_Detection_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.EnableHWFreeFall)
 <LI><a href="#[209]">BSP_ACCELERO_Enable_Pedometer_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_Pedometer_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.EnableHWPedometer)
 <LI><a href="#[208]">BSP_ACCELERO_Enable_Pedometer_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_Pedometer_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.EnableHWPedometer)
 <LI><a href="#[20b]">BSP_ACCELERO_Enable_Single_Tap_Detection_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_Single_Tap_Detection_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.EnableHWSingleTap)
 <LI><a href="#[20a]">BSP_ACCELERO_Enable_Single_Tap_Detection_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_Single_Tap_Detection_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.EnableHWSingleTap)
 <LI><a href="#[20d]">BSP_ACCELERO_Enable_Tilt_Detection_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_Tilt_Detection_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.EnableHWTilt)
 <LI><a href="#[20c]">BSP_ACCELERO_Enable_Tilt_Detection_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_Tilt_Detection_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.EnableHWTilt)
 <LI><a href="#[20f]">BSP_ACCELERO_Enable_Wake_Up_Detection_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_Wake_Up_Detection_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.EnableHWWakeUp)
 <LI><a href="#[20e]">BSP_ACCELERO_Enable_Wake_Up_Detection_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_Wake_Up_Detection_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.EnableHWWakeUp)
 <LI><a href="#[225]">BSP_ACCELERO_Get_6D_Orientation_XH_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_XH_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.GetHWOrientation6D)
 <LI><a href="#[224]">BSP_ACCELERO_Get_6D_Orientation_XH_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_XH_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.GetHWOrientation6D)
 <LI><a href="#[223]">BSP_ACCELERO_Get_6D_Orientation_XL_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_XL_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.GetHWOrientation6D)
 <LI><a href="#[222]">BSP_ACCELERO_Get_6D_Orientation_XL_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_XL_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.GetHWOrientation6D)
 <LI><a href="#[229]">BSP_ACCELERO_Get_6D_Orientation_YH_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_YH_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.GetHWOrientation6D)
 <LI><a href="#[228]">BSP_ACCELERO_Get_6D_Orientation_YH_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_YH_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.GetHWOrientation6D)
 <LI><a href="#[227]">BSP_ACCELERO_Get_6D_Orientation_YL_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_YL_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.GetHWOrientation6D)
 <LI><a href="#[226]">BSP_ACCELERO_Get_6D_Orientation_YL_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_YL_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.GetHWOrientation6D)
 <LI><a href="#[22d]">BSP_ACCELERO_Get_6D_Orientation_ZH_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_ZH_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.GetHWOrientation6D)
 <LI><a href="#[22c]">BSP_ACCELERO_Get_6D_Orientation_ZH_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_ZH_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.GetHWOrientation6D)
 <LI><a href="#[22b]">BSP_ACCELERO_Get_6D_Orientation_ZL_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_ZL_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.GetHWOrientation6D)
 <LI><a href="#[22a]">BSP_ACCELERO_Get_6D_Orientation_ZL_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_ZL_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.GetHWOrientation6D)
 <LI><a href="#[21d]">BSP_ACCELERO_Get_Axes_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Axes_IKS01A1) referenced from azureclient_mqtt_tm.o(i.FillTheModelInstance)
 <LI><a href="#[21c]">BSP_ACCELERO_Get_Axes_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Axes_IKS01A2) referenced from azureclient_mqtt_tm.o(i.FillTheModelInstance)
 <LI><a href="#[250]">BSP_ACCELERO_Get_Event_Status_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Event_Status_Ext_IKS01A1) referenced from platform_stm32cube_nucleof401re.o(i.MEMSCallback)
 <LI><a href="#[24f]">BSP_ACCELERO_Get_Event_Status_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Event_Status_Ext_IKS01A2) referenced from platform_stm32cube_nucleof401re.o(i.MEMSCallback)
 <LI><a href="#[231]">BSP_ACCELERO_Get_ODR_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_ODR_IKS01A1) referenced from hwadvancefeatures.o(i.InitHWFeatures)
 <LI><a href="#[230]">BSP_ACCELERO_Get_ODR_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_ODR_IKS01A2) referenced from hwadvancefeatures.o(i.InitHWFeatures)
 <LI><a href="#[22f]">BSP_ACCELERO_Get_Step_Count_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Step_Count_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.GetStepHWPedometer)
 <LI><a href="#[22e]">BSP_ACCELERO_Get_Step_Count_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Step_Count_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.GetStepHWPedometer)
 <LI><a href="#[23d]">BSP_ACCELERO_Sensor_Enable_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Sensor_Enable_IKS01A1) referenced from platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
 <LI><a href="#[23c]">BSP_ACCELERO_Sensor_Enable_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Sensor_Enable_IKS01A2) referenced from platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
 <LI><a href="#[27e]">BSP_ACCELERO_Set_FS_Value_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_FS_Value_IKS01A1) referenced from platform_stm32cube_nucleof401re.o(i.platform_init)
 <LI><a href="#[27d]">BSP_ACCELERO_Set_FS_Value_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_FS_Value_IKS01A2) referenced from platform_stm32cube_nucleof401re.o(i.platform_init)
 <LI><a href="#[1f5]">BSP_ACCELERO_Set_ODR_Value_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWDoubleTap)
 <LI><a href="#[1f5]">BSP_ACCELERO_Set_ODR_Value_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWFreeFall)
 <LI><a href="#[1f5]">BSP_ACCELERO_Set_ODR_Value_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWOrientation6D)
 <LI><a href="#[1f5]">BSP_ACCELERO_Set_ODR_Value_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWPedometer)
 <LI><a href="#[1f5]">BSP_ACCELERO_Set_ODR_Value_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWSingleTap)
 <LI><a href="#[1f5]">BSP_ACCELERO_Set_ODR_Value_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWTilt)
 <LI><a href="#[1f5]">BSP_ACCELERO_Set_ODR_Value_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWWakeUp)
 <LI><a href="#[1f4]">BSP_ACCELERO_Set_ODR_Value_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWDoubleTap)
 <LI><a href="#[1f4]">BSP_ACCELERO_Set_ODR_Value_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWFreeFall)
 <LI><a href="#[1f4]">BSP_ACCELERO_Set_ODR_Value_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWOrientation6D)
 <LI><a href="#[1f4]">BSP_ACCELERO_Set_ODR_Value_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWPedometer)
 <LI><a href="#[1f4]">BSP_ACCELERO_Set_ODR_Value_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWSingleTap)
 <LI><a href="#[1f4]">BSP_ACCELERO_Set_ODR_Value_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWTilt)
 <LI><a href="#[1f4]">BSP_ACCELERO_Set_ODR_Value_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWWakeUp)
 <LI><a href="#[21f]">BSP_GYRO_Get_Axes_IKS01A1</a> from x_nucleo_iks01a1_gyro.o(i.BSP_GYRO_Get_Axes_IKS01A1) referenced from azureclient_mqtt_tm.o(i.FillTheModelInstance)
 <LI><a href="#[21e]">BSP_GYRO_Get_Axes_IKS01A2</a> from x_nucleo_iks01a2_gyro.o(i.BSP_GYRO_Get_Axes_IKS01A2) referenced from azureclient_mqtt_tm.o(i.FillTheModelInstance)
 <LI><a href="#[233]">BSP_GYRO_Init_IKS01A1</a> from x_nucleo_iks01a1_gyro.o(i.BSP_GYRO_Init_IKS01A1) referenced from platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
 <LI><a href="#[232]">BSP_GYRO_Init_IKS01A2</a> from x_nucleo_iks01a2_gyro.o(i.BSP_GYRO_Init_IKS01A2) referenced from platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
 <LI><a href="#[23f]">BSP_GYRO_Sensor_Enable_IKS01A1</a> from x_nucleo_iks01a1_gyro.o(i.BSP_GYRO_Sensor_Enable_IKS01A1) referenced from platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
 <LI><a href="#[23e]">BSP_GYRO_Sensor_Enable_IKS01A2</a> from x_nucleo_iks01a2_gyro.o(i.BSP_GYRO_Sensor_Enable_IKS01A2) referenced from platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
 <LI><a href="#[217]">BSP_HUMIDITY_Get_Hum_IKS01A1</a> from x_nucleo_iks01a1_humidity.o(i.BSP_HUMIDITY_Get_Hum_IKS01A1) referenced from azureclient_mqtt_tm.o(i.FillTheModelInstance)
 <LI><a href="#[216]">BSP_HUMIDITY_Get_Hum_IKS01A2</a> from x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_Get_Hum_IKS01A2) referenced from azureclient_mqtt_tm.o(i.FillTheModelInstance)
 <LI><a href="#[237]">BSP_HUMIDITY_Init_IKS01A1</a> from x_nucleo_iks01a1_humidity.o(i.BSP_HUMIDITY_Init_IKS01A1) referenced from platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
 <LI><a href="#[236]">BSP_HUMIDITY_Init_IKS01A2</a> from x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_Init_IKS01A2) referenced from platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
 <LI><a href="#[215]">BSP_HUMIDITY_IsInitialized_IKS01A1</a> from x_nucleo_iks01a1_humidity.o(i.BSP_HUMIDITY_IsInitialized_IKS01A1) referenced from azureclient_mqtt_tm.o(i.FillTheModelInstance)
 <LI><a href="#[214]">BSP_HUMIDITY_IsInitialized_IKS01A2</a> from x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_IsInitialized_IKS01A2) referenced from azureclient_mqtt_tm.o(i.FillTheModelInstance)
 <LI><a href="#[243]">BSP_HUMIDITY_Sensor_Enable_IKS01A1</a> from x_nucleo_iks01a1_humidity.o(i.BSP_HUMIDITY_Sensor_Enable_IKS01A1) referenced from platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
 <LI><a href="#[242]">BSP_HUMIDITY_Sensor_Enable_IKS01A2</a> from x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_Sensor_Enable_IKS01A2) referenced from platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
 <LI><a href="#[221]">BSP_MAGNETO_Get_Axes_IKS01A1</a> from x_nucleo_iks01a1_magneto.o(i.BSP_MAGNETO_Get_Axes_IKS01A1) referenced from azureclient_mqtt_tm.o(i.FillTheModelInstance)
 <LI><a href="#[220]">BSP_MAGNETO_Get_Axes_IKS01A2</a> from x_nucleo_iks01a2_magneto.o(i.BSP_MAGNETO_Get_Axes_IKS01A2) referenced from azureclient_mqtt_tm.o(i.FillTheModelInstance)
 <LI><a href="#[235]">BSP_MAGNETO_Init_IKS01A1</a> from x_nucleo_iks01a1_magneto.o(i.BSP_MAGNETO_Init_IKS01A1) referenced from platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
 <LI><a href="#[234]">BSP_MAGNETO_Init_IKS01A2</a> from x_nucleo_iks01a2_magneto.o(i.BSP_MAGNETO_Init_IKS01A2) referenced from platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
 <LI><a href="#[241]">BSP_MAGNETO_Sensor_Enable_IKS01A1</a> from x_nucleo_iks01a1_magneto.o(i.BSP_MAGNETO_Sensor_Enable_IKS01A1) referenced from platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
 <LI><a href="#[240]">BSP_MAGNETO_Sensor_Enable_IKS01A2</a> from x_nucleo_iks01a2_magneto.o(i.BSP_MAGNETO_Sensor_Enable_IKS01A2) referenced from platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
 <LI><a href="#[21b]">BSP_PRESSURE_Get_Press_IKS01A1</a> from x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_Get_Press_IKS01A1) referenced from azureclient_mqtt_tm.o(i.FillTheModelInstance)
 <LI><a href="#[21a]">BSP_PRESSURE_Get_Press_IKS01A2</a> from x_nucleo_iks01a2_pressure.o(i.BSP_PRESSURE_Get_Press_IKS01A2) referenced from azureclient_mqtt_tm.o(i.FillTheModelInstance)
 <LI><a href="#[23b]">BSP_PRESSURE_Init_IKS01A1</a> from x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_Init_IKS01A1) referenced from platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
 <LI><a href="#[23a]">BSP_PRESSURE_Init_IKS01A2</a> from x_nucleo_iks01a2_pressure.o(i.BSP_PRESSURE_Init_IKS01A2) referenced from platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
 <LI><a href="#[219]">BSP_PRESSURE_IsInitialized_IKS01A1</a> from x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_IsInitialized_IKS01A1) referenced from azureclient_mqtt_tm.o(i.FillTheModelInstance)
 <LI><a href="#[218]">BSP_PRESSURE_IsInitialized_IKS01A2</a> from x_nucleo_iks01a2_pressure.o(i.BSP_PRESSURE_IsInitialized_IKS01A2) referenced from azureclient_mqtt_tm.o(i.FillTheModelInstance)
 <LI><a href="#[247]">BSP_PRESSURE_Sensor_Enable_IKS01A1</a> from x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_Sensor_Enable_IKS01A1) referenced from platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
 <LI><a href="#[246]">BSP_PRESSURE_Sensor_Enable_IKS01A2</a> from x_nucleo_iks01a2_pressure.o(i.BSP_PRESSURE_Sensor_Enable_IKS01A2) referenced from platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
 <LI><a href="#[213]">BSP_TEMPERATURE_Get_Temp_IKS01A1</a> from x_nucleo_iks01a1_temperature.o(i.BSP_TEMPERATURE_Get_Temp_IKS01A1) referenced from azureclient_mqtt_tm.o(i.FillTheModelInstance)
 <LI><a href="#[212]">BSP_TEMPERATURE_Get_Temp_IKS01A2</a> from x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_Get_Temp_IKS01A2) referenced from azureclient_mqtt_tm.o(i.FillTheModelInstance)
 <LI><a href="#[239]">BSP_TEMPERATURE_Init_IKS01A1</a> from x_nucleo_iks01a1_temperature.o(i.BSP_TEMPERATURE_Init_IKS01A1) referenced from platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
 <LI><a href="#[238]">BSP_TEMPERATURE_Init_IKS01A2</a> from x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_Init_IKS01A2) referenced from platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
 <LI><a href="#[211]">BSP_TEMPERATURE_IsInitialized_IKS01A1</a> from x_nucleo_iks01a1_temperature.o(i.BSP_TEMPERATURE_IsInitialized_IKS01A1) referenced from azureclient_mqtt_tm.o(i.FillTheModelInstance)
 <LI><a href="#[210]">BSP_TEMPERATURE_IsInitialized_IKS01A2</a> from x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_IsInitialized_IKS01A2) referenced from azureclient_mqtt_tm.o(i.FillTheModelInstance)
 <LI><a href="#[245]">BSP_TEMPERATURE_Sensor_Enable_IKS01A1</a> from x_nucleo_iks01a1_temperature.o(i.BSP_TEMPERATURE_Sensor_Enable_IKS01A1) referenced from platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
 <LI><a href="#[244]">BSP_TEMPERATURE_Sensor_Enable_IKS01A2</a> from x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_Sensor_Enable_IKS01A2) referenced from platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
 <LI><a href="#[19c]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2a4]">ChangeHWMode</a> from azureclient_mqtt_tm.o(i.ChangeHWMode) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[2a0]">ChangeTelemetryInterval</a> from azureclient_mqtt_tm.o(i.ChangeTelemetryInterval) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[1ea]">CodeFirst_InvokeAction</a> from codefirst.o(i.CodeFirst_InvokeAction) referenced from codefirst.o(i.CodeFirst_CreateDevice)
 <LI><a href="#[1e9]">CodeFirst_InvokeMethod</a> from codefirst.o(i.CodeFirst_InvokeMethod) referenced from codefirst.o(i.CodeFirst_CreateDevice)
 <LI><a href="#[2ab]">Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tActiveHWMode</a> from azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tActiveHWMode) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[2ac]">Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tAzureFwVersion</a> from azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tAzureFwVersion) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[2aa]">Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tAzureStatus</a> from azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tAzureStatus) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[296]">Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tHWCounter</a> from azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tHWCounter) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[297]">Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tHWOrientation</a> from azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tHWOrientation) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[28b]">Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tHumidity</a> from azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tHumidity) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[28c]">Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tPressure</a> from azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tPressure) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[2a7]">Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tSupportedCommands</a> from azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tSupportedCommands) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[2a8]">Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tSupportedMethods</a> from azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tSupportedMethods) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[2a9]">Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tTelemetryInterval</a> from azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tTelemetryInterval) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[28a]">Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tTemperature</a> from azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tTemperature) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[28d]">Create_AGENT_DATA_TYPE_From_Ptr_Azure1_taccX</a> from azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_taccX) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[28e]">Create_AGENT_DATA_TYPE_From_Ptr_Azure1_taccY</a> from azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_taccY) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[28f]">Create_AGENT_DATA_TYPE_From_Ptr_Azure1_taccZ</a> from azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_taccZ) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[288]">Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tdeviceId</a> from azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tdeviceId) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[290]">Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tgyrX</a> from azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tgyrX) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[291]">Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tgyrY</a> from azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tgyrY) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[292]">Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tgyrZ</a> from azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tgyrZ) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[293]">Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tmagX</a> from azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tmagX) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[294]">Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tmagY</a> from azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tmagY) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[295]">Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tmagZ</a> from azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tmagZ) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[289]">Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tmessageId</a> from azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tmessageId) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[298]">Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tts</a> from azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tts) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[1ad]">DMA1_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1ae]">DMA1_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1af]">DMA1_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b0]">DMA1_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b1]">DMA1_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b2]">DMA1_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b3]">DMA1_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1c8]">DMA1_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1cc]">DMA2_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1cd]">DMA2_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1ce]">DMA2_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1cf]">DMA2_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1d0]">DMA2_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1d2]">DMA2_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1d3]">DMA2_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1d4]">DMA2_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[19f]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2a6]">DesiredPropertyDeinitialize_Azure1_tDesiredHWMode</a> from azureclient_mqtt_tm.o(i.DesiredPropertyDeinitialize_Azure1_tDesiredHWMode) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[2a2]">DesiredPropertyDeinitialize_Azure1_tDesiredTelemetryInterval</a> from azureclient_mqtt_tm.o(i.DesiredPropertyDeinitialize_Azure1_tDesiredTelemetryInterval) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[2a5]">DesiredPropertyInitialize_Azure1_tDesiredHWMode</a> from azureclient_mqtt_tm.o(i.DesiredPropertyInitialize_Azure1_tDesiredHWMode) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[2a1]">DesiredPropertyInitialize_Azure1_tDesiredTelemetryInterval</a> from azureclient_mqtt_tm.o(i.DesiredPropertyInitialize_Azure1_tDesiredTelemetryInterval) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[1f1]">DeviceInvokeAction</a> from iotdevice.o(i.DeviceInvokeAction) referenced from iotdevice.o(i.Device_Create)
 <LI><a href="#[1f0]">DeviceInvokeMethod</a> from iotdevice.o(i.DeviceInvokeMethod) referenced from iotdevice.o(i.Device_Create)
 <LI><a href="#[251]">DeviceTwinCallback</a> from azureclient_mqtt_tm.o(i.DeviceTwinCallback) referenced from azureclient_mqtt_tm.o(i.ReportState)
 <LI><a href="#[1e8]">DeviceTwinCallbackStatus</a> from azureclient_mqtt_tm.o(i.DeviceTwinCallbackStatus) referenced from azureclient_mqtt_tm.o(i.AzureClient_mqtt_TM)
 <LI><a href="#[1a8]">EXTI0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1c5]">EXTI15_10_IRQHandler</a> from stm32f4xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1a9]">EXTI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1aa]">EXTI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1ab]">EXTI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1ac]">EXTI4_IRQHandler</a> from stm32f4xx_it.o(i.EXTI4_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b5]">EXTI9_5_IRQHandler</a> from stm32f4xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1a6]">FLASH_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1d8]">FPU_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2a3]">FromAGENT_DATA_TYPE_int</a> from azureclient_mqtt_tm.o(i.FromAGENT_DATA_TYPE_int) referenced 2 times from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[d]">HTS221_H_Check_WhoAmI</a> from hts221_driver_hl.o(i.HTS221_H_Check_WhoAmI) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[9]">HTS221_H_DeInit</a> from hts221_driver_hl.o(i.HTS221_H_DeInit) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[14]">HTS221_H_Get_DRDY_Status</a> from hts221_driver_hl.o(i.HTS221_H_Get_DRDY_Status) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[e]">HTS221_H_Get_Hum</a> from hts221_driver_hl.o(i.HTS221_H_Get_Hum) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[f]">HTS221_H_Get_ODR</a> from hts221_driver_hl.o(i.HTS221_H_Get_ODR) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[c]">HTS221_H_Get_WhoAmI</a> from hts221_driver_hl.o(i.HTS221_H_Get_WhoAmI) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[8]">HTS221_H_Init</a> from hts221_driver_hl.o(i.HTS221_H_Init) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[12]">HTS221_H_Read_Reg</a> from hts221_driver_hl.o(i.HTS221_H_Read_Reg) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[b]">HTS221_H_Sensor_Disable</a> from hts221_driver_hl.o(i.HTS221_H_Sensor_Disable) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[a]">HTS221_H_Sensor_Enable</a> from hts221_driver_hl.o(i.HTS221_H_Sensor_Enable) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[10]">HTS221_H_Set_ODR</a> from hts221_driver_hl.o(i.HTS221_H_Set_ODR) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[11]">HTS221_H_Set_ODR_Value</a> from hts221_driver_hl.o(i.HTS221_H_Set_ODR_Value) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[13]">HTS221_H_Write_Reg</a> from hts221_driver_hl.o(i.HTS221_H_Write_Reg) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[1a]">HTS221_T_Check_WhoAmI</a> from hts221_driver_hl.o(i.HTS221_T_Check_WhoAmI) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[16]">HTS221_T_DeInit</a> from hts221_driver_hl.o(i.HTS221_T_DeInit) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[21]">HTS221_T_Get_DRDY_Status</a> from hts221_driver_hl.o(i.HTS221_T_Get_DRDY_Status) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[1c]">HTS221_T_Get_ODR</a> from hts221_driver_hl.o(i.HTS221_T_Get_ODR) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[1b]">HTS221_T_Get_Temp</a> from hts221_driver_hl.o(i.HTS221_T_Get_Temp) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[19]">HTS221_T_Get_WhoAmI</a> from hts221_driver_hl.o(i.HTS221_T_Get_WhoAmI) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[15]">HTS221_T_Init</a> from hts221_driver_hl.o(i.HTS221_T_Init) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[1f]">HTS221_T_Read_Reg</a> from hts221_driver_hl.o(i.HTS221_T_Read_Reg) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[18]">HTS221_T_Sensor_Disable</a> from hts221_driver_hl.o(i.HTS221_T_Sensor_Disable) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[17]">HTS221_T_Sensor_Enable</a> from hts221_driver_hl.o(i.HTS221_T_Sensor_Enable) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[1d]">HTS221_T_Set_ODR</a> from hts221_driver_hl.o(i.HTS221_T_Set_ODR) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[1e]">HTS221_T_Set_ODR_Value</a> from hts221_driver_hl.o(i.HTS221_T_Set_ODR_Value) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[20]">HTS221_T_Write_Reg</a> from hts221_driver_hl.o(i.HTS221_T_Write_Reg) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[19a]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1be]">I2C1_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1bd]">I2C1_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1c0]">I2C2_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1bf]">I2C2_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1d7]">I2C3_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1d6]">I2C3_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[18e]">IoTHubTransportMqtt_Create</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Create) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[18f]">IoTHubTransportMqtt_Destroy</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Destroy) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[188]">IoTHubTransportMqtt_DeviceMethod_Response</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_DeviceMethod_Response) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[194]">IoTHubTransportMqtt_DoWork</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_DoWork) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[18c]">IoTHubTransportMqtt_GetHostname</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_GetHostname) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[196]">IoTHubTransportMqtt_GetSendStatus</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_GetSendStatus) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[18b]">IoTHubTransportMqtt_ProcessItem</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_ProcessItem) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[190]">IoTHubTransportMqtt_Register</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Register) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[185]">IoTHubTransportMqtt_SendMessageDisposition</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_SendMessageDisposition) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[18d]">IoTHubTransportMqtt_SetOption</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_SetOption) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[195]">IoTHubTransportMqtt_SetRetryPolicy</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_SetRetryPolicy) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[192]">IoTHubTransportMqtt_Subscribe</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Subscribe) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[186]">IoTHubTransportMqtt_Subscribe_DeviceMethod</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Subscribe_DeviceMethod) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[189]">IoTHubTransportMqtt_Subscribe_DeviceTwin</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Subscribe_DeviceTwin) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[191]">IoTHubTransportMqtt_Unregister</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Unregister) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[193]">IoTHubTransportMqtt_Unsubscribe</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Unsubscribe) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[187]">IoTHubTransportMqtt_Unsubscribe_DeviceMethod</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Unsubscribe_DeviceMethod) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[18a]">IoTHubTransportMqtt_Unsubscribe_DeviceTwin</a> from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Unsubscribe_DeviceTwin) referenced 2 times from iothubtransportmqtt.o(.data)
 <LI><a href="#[27]">LIS3MDL_Check_WhoAmI</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Check_WhoAmI) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[23]">LIS3MDL_DeInit</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_DeInit) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[28]">LIS3MDL_Get_Axes</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_Axes) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[29]">LIS3MDL_Get_AxesRaw</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_AxesRaw) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[33]">LIS3MDL_Get_DRDY_Status</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_DRDY_Status) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[2e]">LIS3MDL_Get_FS</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_FS) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[2b]">LIS3MDL_Get_ODR</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_ODR) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[2a]">LIS3MDL_Get_Sensitivity</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_Sensitivity) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[26]">LIS3MDL_Get_WhoAmI</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_WhoAmI) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[22]">LIS3MDL_Init</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Init) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[31]">LIS3MDL_Read_Reg</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Read_Reg) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[25]">LIS3MDL_Sensor_Disable</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Sensor_Disable) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[24]">LIS3MDL_Sensor_Enable</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Sensor_Enable) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[2f]">LIS3MDL_Set_FS</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Set_FS) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[30]">LIS3MDL_Set_FS_Value</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Set_FS_Value) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[2c]">LIS3MDL_Set_ODR</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Set_ODR) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[2d]">LIS3MDL_Set_ODR_Value</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Set_ODR_Value) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[32]">LIS3MDL_Write_Reg</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Write_Reg) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[55]">LPS22HB_FIFO_Get_Data</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Data) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[4e]">LPS22HB_FIFO_Get_Empty_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Empty_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[51]">LPS22HB_FIFO_Get_Fth_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Fth_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[4f]">LPS22HB_FIFO_Get_Full_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Full_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[56]">LPS22HB_FIFO_Get_Mode</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Mode) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[54]">LPS22HB_FIFO_Get_Num_Of_Samples</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Num_Of_Samples) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[50]">LPS22HB_FIFO_Get_Ovr_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Ovr_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[58]">LPS22HB_FIFO_Get_Watermark_Level</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Watermark_Level) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[5c]">LPS22HB_FIFO_Reset_Interrupt</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Reset_Interrupt) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[5b]">LPS22HB_FIFO_Set_Interrupt</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Interrupt) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[57]">LPS22HB_FIFO_Set_Mode</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Mode) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[59]">LPS22HB_FIFO_Set_Watermark_Level</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Watermark_Level) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[52]">LPS22HB_FIFO_Stop_On_Fth</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Stop_On_Fth) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[53]">LPS22HB_FIFO_Usage</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Usage) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[5a]">LPS22HB_FIFO_Watermark_Usage</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Watermark_Usage) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[39]">LPS22HB_P_Check_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Check_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[35]">LPS22HB_P_DeInit</a> from lps22hb_driver_hl.o(i.LPS22HB_P_DeInit) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[40]">LPS22HB_P_Get_DRDY_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_DRDY_Status) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3b]">LPS22HB_P_Get_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3a]">LPS22HB_P_Get_Press</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_Press) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[38]">LPS22HB_P_Get_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[34]">LPS22HB_P_Init</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Init) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3e]">LPS22HB_P_Read_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Read_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[37]">LPS22HB_P_Sensor_Disable</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Disable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[36]">LPS22HB_P_Sensor_Enable</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Enable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3c]">LPS22HB_P_Set_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3d]">LPS22HB_P_Set_ODR_Value</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR_Value) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3f]">LPS22HB_P_Write_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Write_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[46]">LPS22HB_T_Check_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Check_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[42]">LPS22HB_T_DeInit</a> from lps22hb_driver_hl.o(i.LPS22HB_T_DeInit) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[4d]">LPS22HB_T_Get_DRDY_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_DRDY_Status) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[48]">LPS22HB_T_Get_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[47]">LPS22HB_T_Get_Temp</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_Temp) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[45]">LPS22HB_T_Get_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[41]">LPS22HB_T_Init</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Init) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[4b]">LPS22HB_T_Read_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Read_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[44]">LPS22HB_T_Sensor_Disable</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Disable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[43]">LPS22HB_T_Sensor_Enable</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Enable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[49]">LPS22HB_T_Set_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[4a]">LPS22HB_T_Set_ODR_Value</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR_Value) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[4c]">LPS22HB_T_Write_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Write_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[62]">LPS25HB_P_Check_WhoAmI</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Check_WhoAmI) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[5e]">LPS25HB_P_DeInit</a> from lps25hb_driver_hl.o(i.LPS25HB_P_DeInit) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[69]">LPS25HB_P_Get_DRDY_Status</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Get_DRDY_Status) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[64]">LPS25HB_P_Get_ODR</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Get_ODR) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[63]">LPS25HB_P_Get_Press</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Get_Press) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[61]">LPS25HB_P_Get_WhoAmI</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Get_WhoAmI) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[5d]">LPS25HB_P_Init</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Init) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[67]">LPS25HB_P_Read_Reg</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Read_Reg) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[60]">LPS25HB_P_Sensor_Disable</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Sensor_Disable) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[5f]">LPS25HB_P_Sensor_Enable</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Sensor_Enable) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[65]">LPS25HB_P_Set_ODR</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Set_ODR) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[66]">LPS25HB_P_Set_ODR_Value</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Set_ODR_Value) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[68]">LPS25HB_P_Write_Reg</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Write_Reg) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[6f]">LPS25HB_T_Check_WhoAmI</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Check_WhoAmI) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[6b]">LPS25HB_T_DeInit</a> from lps25hb_driver_hl.o(i.LPS25HB_T_DeInit) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[76]">LPS25HB_T_Get_DRDY_Status</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Get_DRDY_Status) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[71]">LPS25HB_T_Get_ODR</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Get_ODR) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[70]">LPS25HB_T_Get_Temp</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Get_Temp) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[6e]">LPS25HB_T_Get_WhoAmI</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Get_WhoAmI) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[6a]">LPS25HB_T_Init</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Init) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[74]">LPS25HB_T_Read_Reg</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Read_Reg) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[6d]">LPS25HB_T_Sensor_Disable</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Sensor_Disable) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[6c]">LPS25HB_T_Sensor_Enable</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Sensor_Enable) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[72]">LPS25HB_T_Set_ODR</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Set_ODR) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[73]">LPS25HB_T_Set_ODR_Value</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Set_ODR_Value) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[75]">LPS25HB_T_Write_Reg</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Write_Reg) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[119]">LSM303AGR_M_Check_WhoAmI</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Check_WhoAmI) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[115]">LSM303AGR_M_DeInit</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_DeInit) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[11a]">LSM303AGR_M_Get_Axes</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_Axes) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[11b]">LSM303AGR_M_Get_AxesRaw</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_AxesRaw) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[125]">LSM303AGR_M_Get_DRDY_Status</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_DRDY_Status) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[120]">LSM303AGR_M_Get_FS</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_FS) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[11d]">LSM303AGR_M_Get_ODR</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_ODR) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[11c]">LSM303AGR_M_Get_Sensitivity</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_Sensitivity) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[118]">LSM303AGR_M_Get_WhoAmI</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_WhoAmI) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[114]">LSM303AGR_M_Init</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Init) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[123]">LSM303AGR_M_Read_Reg</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Read_Reg) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[117]">LSM303AGR_M_Sensor_Disable</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Sensor_Disable) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[116]">LSM303AGR_M_Sensor_Enable</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Sensor_Enable) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[121]">LSM303AGR_M_Set_FS</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Set_FS) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[122]">LSM303AGR_M_Set_FS_Value</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Set_FS_Value) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[11e]">LSM303AGR_M_Set_ODR</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Set_ODR) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[11f]">LSM303AGR_M_Set_ODR_Value</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Set_ODR_Value) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[124]">LSM303AGR_M_Write_Reg</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Write_Reg) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[105]">LSM303AGR_X_Check_WhoAmI</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Check_WhoAmI) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[101]">LSM303AGR_X_DeInit</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_DeInit) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[106]">LSM303AGR_X_Get_Axes</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Axes) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[107]">LSM303AGR_X_Get_AxesRaw</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_AxesRaw) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[10f]">LSM303AGR_X_Get_Axes_Status</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Axes_Status) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[113]">LSM303AGR_X_Get_DRDY_Status</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_DRDY_Status) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[10c]">LSM303AGR_X_Get_FS</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_FS) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[109]">LSM303AGR_X_Get_ODR</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_ODR) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[108]">LSM303AGR_X_Get_Sensitivity</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Sensitivity) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[104]">LSM303AGR_X_Get_WhoAmI</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_WhoAmI) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[100]">LSM303AGR_X_Init</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Init) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[111]">LSM303AGR_X_Read_Reg</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Read_Reg) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[103]">LSM303AGR_X_Sensor_Disable</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Sensor_Disable) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[102]">LSM303AGR_X_Sensor_Enable</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Sensor_Enable) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[110]">LSM303AGR_X_Set_Axes_Status</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_Axes_Status) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[10d]">LSM303AGR_X_Set_FS</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_FS) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[10e]">LSM303AGR_X_Set_FS_Value</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_FS_Value) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[10a]">LSM303AGR_X_Set_ODR</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[10b]">LSM303AGR_X_Set_ODR_Value</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR_Value) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[112]">LSM303AGR_X_Write_Reg</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Write_Reg) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[90]">LSM6DS0_G_Check_WhoAmI</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Check_WhoAmI) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[8c]">LSM6DS0_G_DeInit</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_DeInit) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[91]">LSM6DS0_G_Get_Axes</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_Axes) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[92]">LSM6DS0_G_Get_AxesRaw</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_AxesRaw) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9a]">LSM6DS0_G_Get_Axes_Status</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_Axes_Status) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9e]">LSM6DS0_G_Get_DRDY_Status</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_DRDY_Status) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[97]">LSM6DS0_G_Get_FS</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_FS) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[94]">LSM6DS0_G_Get_ODR</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_ODR) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[93]">LSM6DS0_G_Get_Sensitivity</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_Sensitivity) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[8f]">LSM6DS0_G_Get_WhoAmI</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_WhoAmI) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[8b]">LSM6DS0_G_Init</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Init) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9c]">LSM6DS0_G_Read_Reg</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Read_Reg) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[8e]">LSM6DS0_G_Sensor_Disable</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Sensor_Disable) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[8d]">LSM6DS0_G_Sensor_Enable</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Sensor_Enable) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9b]">LSM6DS0_G_Set_Axes_Status</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_Axes_Status) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[98]">LSM6DS0_G_Set_FS</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_FS) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[99]">LSM6DS0_G_Set_FS_Value</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_FS_Value) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[95]">LSM6DS0_G_Set_ODR</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_ODR) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[96]">LSM6DS0_G_Set_ODR_Value</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_ODR_Value) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9d]">LSM6DS0_G_Write_Reg</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Write_Reg) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[7c]">LSM6DS0_X_Check_WhoAmI</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Check_WhoAmI) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[78]">LSM6DS0_X_DeInit</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_DeInit) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[7d]">LSM6DS0_X_Get_Axes</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_Axes) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[7e]">LSM6DS0_X_Get_AxesRaw</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_AxesRaw) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[86]">LSM6DS0_X_Get_Axes_Status</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_Axes_Status) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[8a]">LSM6DS0_X_Get_DRDY_Status</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_DRDY_Status) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[83]">LSM6DS0_X_Get_FS</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_FS) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[80]">LSM6DS0_X_Get_ODR</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_ODR) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[7f]">LSM6DS0_X_Get_Sensitivity</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_Sensitivity) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[7b]">LSM6DS0_X_Get_WhoAmI</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_WhoAmI) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[77]">LSM6DS0_X_Init</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Init) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[88]">LSM6DS0_X_Read_Reg</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Read_Reg) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[7a]">LSM6DS0_X_Sensor_Disable</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Sensor_Disable) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[79]">LSM6DS0_X_Sensor_Enable</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Sensor_Enable) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[87]">LSM6DS0_X_Set_Axes_Status</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_Axes_Status) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[84]">LSM6DS0_X_Set_FS</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_FS) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[85]">LSM6DS0_X_Set_FS_Value</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_FS_Value) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[81]">LSM6DS0_X_Set_ODR</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_ODR) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[82]">LSM6DS0_X_Set_ODR_Value</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_ODR_Value) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[89]">LSM6DS0_X_Write_Reg</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Write_Reg) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d5]">LSM6DS3_FIFO_G_Get_Axis</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_G_Get_Axis) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d4]">LSM6DS3_FIFO_G_Set_Decimation</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_G_Set_Decimation) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ca]">LSM6DS3_FIFO_Get_Data</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Data) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c7]">LSM6DS3_FIFO_Get_Empty_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Empty_Status) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c6]">LSM6DS3_FIFO_Get_Full_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Full_Status) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[cb]">LSM6DS3_FIFO_Get_Num_Of_Samples</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Num_Of_Samples) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c8]">LSM6DS3_FIFO_Get_Overrun_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Overrun_Status) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c9]">LSM6DS3_FIFO_Get_Pattern</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Pattern) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[cf]">LSM6DS3_FIFO_Set_INT1_FIFO_Full</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_INT1_FIFO_Full) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ce]">LSM6DS3_FIFO_Set_Mode</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_Mode) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c5]">LSM6DS3_FIFO_Set_ODR_Value</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_ODR_Value) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d1]">LSM6DS3_FIFO_Set_Stop_On_Fth</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_Stop_On_Fth) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d0]">LSM6DS3_FIFO_Set_Watermark_Level</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_Watermark_Level) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[cd]">LSM6DS3_FIFO_X_Get_Axis</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_X_Get_Axis) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[cc]">LSM6DS3_FIFO_X_Set_Decimation</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_X_Set_Decimation) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f1]">LSM6DS3_G_Check_WhoAmI</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Check_WhoAmI) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ed]">LSM6DS3_G_DeInit</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_DeInit) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f2]">LSM6DS3_G_Get_Axes</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_Axes) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f3]">LSM6DS3_G_Get_AxesRaw</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_AxesRaw) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[fb]">LSM6DS3_G_Get_Axes_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_Axes_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ff]">LSM6DS3_G_Get_DRDY_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_DRDY_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f8]">LSM6DS3_G_Get_FS</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_FS) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f5]">LSM6DS3_G_Get_ODR</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_ODR) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f4]">LSM6DS3_G_Get_Sensitivity</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_Sensitivity) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f0]">LSM6DS3_G_Get_WhoAmI</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_WhoAmI) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ec]">LSM6DS3_G_Init</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Init) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[fd]">LSM6DS3_G_Read_Reg</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Read_Reg) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ef]">LSM6DS3_G_Sensor_Disable</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Sensor_Disable) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ee]">LSM6DS3_G_Sensor_Enable</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Sensor_Enable) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[fc]">LSM6DS3_G_Set_Axes_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_Axes_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f9]">LSM6DS3_G_Set_FS</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_FS) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[fa]">LSM6DS3_G_Set_FS_Value</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_FS_Value) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d6]">LSM6DS3_G_Set_Interrupt_Latch</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_Interrupt_Latch) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f6]">LSM6DS3_G_Set_ODR</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_ODR) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f7]">LSM6DS3_G_Set_ODR_Value</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_ODR_Value) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d7]">LSM6DS3_G_Set_SelfTest</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_SelfTest) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[fe]">LSM6DS3_G_Write_Reg</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Write_Reg) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[dd]">LSM6DS3_X_Check_WhoAmI</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Check_WhoAmI) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d9]">LSM6DS3_X_DeInit</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_DeInit) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[bc]">LSM6DS3_X_Disable_6D_Orientation</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_6D_Orientation) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b5]">LSM6DS3_X_Disable_Double_Tap_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Double_Tap_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a0]">LSM6DS3_X_Disable_Free_Fall_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Free_Fall_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a4]">LSM6DS3_X_Disable_Pedometer</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Pedometer) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b2]">LSM6DS3_X_Disable_Single_Tap_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Single_Tap_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a8]">LSM6DS3_X_Disable_Step_Counter_Reset</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Step_Counter_Reset) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ab]">LSM6DS3_X_Disable_Tilt_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Tilt_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ae]">LSM6DS3_X_Disable_Wake_Up_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Wake_Up_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[bb]">LSM6DS3_X_Enable_6D_Orientation</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_6D_Orientation) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b4]">LSM6DS3_X_Enable_Double_Tap_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Double_Tap_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9f]">LSM6DS3_X_Enable_Free_Fall_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Free_Fall_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a3]">LSM6DS3_X_Enable_Pedometer</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Pedometer) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b1]">LSM6DS3_X_Enable_Single_Tap_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Single_Tap_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a7]">LSM6DS3_X_Enable_Step_Counter_Reset</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Step_Counter_Reset) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[aa]">LSM6DS3_X_Enable_Tilt_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Tilt_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ad]">LSM6DS3_X_Enable_Wake_Up_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Wake_Up_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[bd]">LSM6DS3_X_Get_6D_Orientation_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[bf]">LSM6DS3_X_Get_6D_Orientation_XH</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_XH) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[be]">LSM6DS3_X_Get_6D_Orientation_XL</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_XL) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c1]">LSM6DS3_X_Get_6D_Orientation_YH</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_YH) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c0]">LSM6DS3_X_Get_6D_Orientation_YL</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_YL) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c3]">LSM6DS3_X_Get_6D_Orientation_ZH</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_ZH) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c2]">LSM6DS3_X_Get_6D_Orientation_ZL</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_ZL) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[de]">LSM6DS3_X_Get_Axes</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Axes) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[df]">LSM6DS3_X_Get_AxesRaw</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_AxesRaw) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e7]">LSM6DS3_X_Get_Axes_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Axes_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[eb]">LSM6DS3_X_Get_DRDY_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_DRDY_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b6]">LSM6DS3_X_Get_Double_Tap_Detection_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Double_Tap_Detection_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c4]">LSM6DS3_X_Get_Event_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Event_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e4]">LSM6DS3_X_Get_FS</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_FS) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a1]">LSM6DS3_X_Get_Free_Fall_Detection_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Free_Fall_Detection_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e1]">LSM6DS3_X_Get_ODR</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_ODR) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a5]">LSM6DS3_X_Get_Pedometer_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Pedometer_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e0]">LSM6DS3_X_Get_Sensitivity</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Sensitivity) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b3]">LSM6DS3_X_Get_Single_Tap_Detection_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Single_Tap_Detection_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a6]">LSM6DS3_X_Get_Step_Count</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Step_Count) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ac]">LSM6DS3_X_Get_Tilt_Detection_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Tilt_Detection_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[af]">LSM6DS3_X_Get_Wake_Up_Detection_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Wake_Up_Detection_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[dc]">LSM6DS3_X_Get_WhoAmI</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_WhoAmI) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d8]">LSM6DS3_X_Init</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Init) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e9]">LSM6DS3_X_Read_Reg</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Read_Reg) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[db]">LSM6DS3_X_Sensor_Disable</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Sensor_Disable) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[da]">LSM6DS3_X_Sensor_Enable</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Sensor_Enable) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e8]">LSM6DS3_X_Set_Axes_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Axes_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e5]">LSM6DS3_X_Set_FS</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_FS) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e6]">LSM6DS3_X_Set_FS_Value</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_FS_Value) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a2]">LSM6DS3_X_Set_Free_Fall_Threshold</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Free_Fall_Threshold) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d2]">LSM6DS3_X_Set_Interrupt_Latch</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Interrupt_Latch) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e2]">LSM6DS3_X_Set_ODR</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_ODR) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e3]">LSM6DS3_X_Set_ODR_Value</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_ODR_Value) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a9]">LSM6DS3_X_Set_Pedometer_Threshold</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Pedometer_Threshold) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d3]">LSM6DS3_X_Set_SelfTest</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_SelfTest) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ba]">LSM6DS3_X_Set_Tap_Duration_Time</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Tap_Duration_Time) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b9]">LSM6DS3_X_Set_Tap_Quiet_Time</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Tap_Quiet_Time) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b8]">LSM6DS3_X_Set_Tap_Shock_Time</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Tap_Shock_Time) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b7]">LSM6DS3_X_Set_Tap_Threshold</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Tap_Threshold) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b0]">LSM6DS3_X_Set_Wake_Up_Threshold</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Wake_Up_Threshold) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ea]">LSM6DS3_X_Write_Reg</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Write_Reg) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[15c]">LSM6DSL_FIFO_G_Get_Axis</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_G_Get_Axis) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[15b]">LSM6DSL_FIFO_G_Set_Decimation</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_G_Set_Decimation) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[151]">LSM6DSL_FIFO_Get_Data</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Data) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[14e]">LSM6DSL_FIFO_Get_Empty_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Empty_Status) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[14d]">LSM6DSL_FIFO_Get_Full_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Full_Status) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[152]">LSM6DSL_FIFO_Get_Num_Of_Samples</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Num_Of_Samples) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[14f]">LSM6DSL_FIFO_Get_Overrun_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Overrun_Status) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[150]">LSM6DSL_FIFO_Get_Pattern</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Pattern) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[156]">LSM6DSL_FIFO_Set_INT1_FIFO_Full</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_INT1_FIFO_Full) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[155]">LSM6DSL_FIFO_Set_Mode</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_Mode) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[14c]">LSM6DSL_FIFO_Set_ODR_Value</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_ODR_Value) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[158]">LSM6DSL_FIFO_Set_Stop_On_Fth</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_Stop_On_Fth) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[157]">LSM6DSL_FIFO_Set_Watermark_Level</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_Watermark_Level) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[154]">LSM6DSL_FIFO_X_Get_Axis</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_X_Get_Axis) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[153]">LSM6DSL_FIFO_X_Set_Decimation</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_X_Set_Decimation) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[176]">LSM6DSL_G_Check_WhoAmI</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Check_WhoAmI) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[172]">LSM6DSL_G_DeInit</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_DeInit) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[177]">LSM6DSL_G_Get_Axes</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_Axes) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[178]">LSM6DSL_G_Get_AxesRaw</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_AxesRaw) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[182]">LSM6DSL_G_Get_DRDY_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_DRDY_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[17d]">LSM6DSL_G_Get_FS</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_FS) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[17a]">LSM6DSL_G_Get_ODR</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_ODR) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[179]">LSM6DSL_G_Get_Sensitivity</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_Sensitivity) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[175]">LSM6DSL_G_Get_WhoAmI</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_WhoAmI) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[171]">LSM6DSL_G_Init</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Init) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[180]">LSM6DSL_G_Read_Reg</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Read_Reg) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[174]">LSM6DSL_G_Sensor_Disable</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Sensor_Disable) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[173]">LSM6DSL_G_Sensor_Enable</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Sensor_Enable) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[17e]">LSM6DSL_G_Set_FS</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_FS) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[17f]">LSM6DSL_G_Set_FS_Value</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_FS_Value) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[15d]">LSM6DSL_G_Set_Interrupt_Latch</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_Interrupt_Latch) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[17b]">LSM6DSL_G_Set_ODR</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[17c]">LSM6DSL_G_Set_ODR_Value</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR_Value) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[15e]">LSM6DSL_G_Set_SelfTest</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_SelfTest) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[181]">LSM6DSL_G_Write_Reg</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Write_Reg) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[164]">LSM6DSL_X_Check_WhoAmI</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Check_WhoAmI) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[160]">LSM6DSL_X_DeInit</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_DeInit) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[143]">LSM6DSL_X_Disable_6D_Orientation</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_6D_Orientation) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[13c]">LSM6DSL_X_Disable_Double_Tap_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Double_Tap_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[127]">LSM6DSL_X_Disable_Free_Fall_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Free_Fall_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[12b]">LSM6DSL_X_Disable_Pedometer</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Pedometer) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[139]">LSM6DSL_X_Disable_Single_Tap_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Single_Tap_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[12f]">LSM6DSL_X_Disable_Step_Counter_Reset</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Step_Counter_Reset) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[132]">LSM6DSL_X_Disable_Tilt_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Tilt_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[135]">LSM6DSL_X_Disable_Wake_Up_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Wake_Up_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[142]">LSM6DSL_X_Enable_6D_Orientation</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_6D_Orientation) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[13b]">LSM6DSL_X_Enable_Double_Tap_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Double_Tap_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[126]">LSM6DSL_X_Enable_Free_Fall_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Free_Fall_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[12a]">LSM6DSL_X_Enable_Pedometer</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Pedometer) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[138]">LSM6DSL_X_Enable_Single_Tap_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Single_Tap_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[12e]">LSM6DSL_X_Enable_Step_Counter_Reset</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Step_Counter_Reset) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[131]">LSM6DSL_X_Enable_Tilt_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Tilt_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[134]">LSM6DSL_X_Enable_Wake_Up_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Wake_Up_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[144]">LSM6DSL_X_Get_6D_Orientation_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[146]">LSM6DSL_X_Get_6D_Orientation_XH</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_XH) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[145]">LSM6DSL_X_Get_6D_Orientation_XL</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_XL) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[148]">LSM6DSL_X_Get_6D_Orientation_YH</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_YH) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[147]">LSM6DSL_X_Get_6D_Orientation_YL</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_YL) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[14a]">LSM6DSL_X_Get_6D_Orientation_ZH</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_ZH) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[149]">LSM6DSL_X_Get_6D_Orientation_ZL</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_ZL) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[165]">LSM6DSL_X_Get_Axes</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Axes) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[166]">LSM6DSL_X_Get_AxesRaw</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_AxesRaw) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[170]">LSM6DSL_X_Get_DRDY_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_DRDY_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[13d]">LSM6DSL_X_Get_Double_Tap_Detection_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Double_Tap_Detection_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[14b]">LSM6DSL_X_Get_Event_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Event_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[16b]">LSM6DSL_X_Get_FS</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_FS) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[128]">LSM6DSL_X_Get_Free_Fall_Detection_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Free_Fall_Detection_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[168]">LSM6DSL_X_Get_ODR</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_ODR) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[12c]">LSM6DSL_X_Get_Pedometer_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Pedometer_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[167]">LSM6DSL_X_Get_Sensitivity</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Sensitivity) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[13a]">LSM6DSL_X_Get_Single_Tap_Detection_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Single_Tap_Detection_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[12d]">LSM6DSL_X_Get_Step_Count</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Step_Count) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[133]">LSM6DSL_X_Get_Tilt_Detection_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Tilt_Detection_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[136]">LSM6DSL_X_Get_Wake_Up_Detection_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Wake_Up_Detection_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[163]">LSM6DSL_X_Get_WhoAmI</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_WhoAmI) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[15f]">LSM6DSL_X_Init</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Init) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[16e]">LSM6DSL_X_Read_Reg</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Read_Reg) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[162]">LSM6DSL_X_Sensor_Disable</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Sensor_Disable) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[161]">LSM6DSL_X_Sensor_Enable</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Sensor_Enable) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[16c]">LSM6DSL_X_Set_FS</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_FS) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[16d]">LSM6DSL_X_Set_FS_Value</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_FS_Value) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[129]">LSM6DSL_X_Set_Free_Fall_Threshold</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Free_Fall_Threshold) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[159]">LSM6DSL_X_Set_Interrupt_Latch</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Interrupt_Latch) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[169]">LSM6DSL_X_Set_ODR</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[16a]">LSM6DSL_X_Set_ODR_Value</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR_Value) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[130]">LSM6DSL_X_Set_Pedometer_Threshold</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Pedometer_Threshold) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[15a]">LSM6DSL_X_Set_SelfTest</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_SelfTest) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[141]">LSM6DSL_X_Set_Tap_Duration_Time</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Duration_Time) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[140]">LSM6DSL_X_Set_Tap_Quiet_Time</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Quiet_Time) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[13f]">LSM6DSL_X_Set_Tap_Shock_Time</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Shock_Time) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[13e]">LSM6DSL_X_Set_Tap_Threshold</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Threshold) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[137]">LSM6DSL_X_Set_Wake_Up_Threshold</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Wake_Up_Threshold) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[16f]">LSM6DSL_X_Write_Reg</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Write_Reg) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[29f]">LedBlinkWRAPPER</a> from azureclient_mqtt_tm.o(i.LedBlinkWRAPPER) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[29e]">LedOffWRAPPER</a> from azureclient_mqtt_tm.o(i.LedOffWRAPPER) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[29d]">LedOnWRAPPER</a> from azureclient_mqtt_tm.o(i.LedOnWRAPPER) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[1e5]">MQTT_Protocol</a> from iothubtransportmqtt.o(i.MQTT_Protocol) referenced from azureclient_mqtt_tm.o(i.AzureClient_mqtt_TM)
 <LI><a href="#[19b]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[199]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[24e]">NOPCloneFunction</a> from jsondecoder.o(i.NOPCloneFunction) referenced from jsondecoder.o(i.JSONDecoder_JSON_To_MultiTree)
 <LI><a href="#[1e4]">NoCloneFunction</a> from agenttypesystem.o(i.NoCloneFunction) referenced from agenttypesystem.o(i.AgentDataTypes_ToString)
 <LI><a href="#[1ed]">NoCloneFunction</a> from datamarshaller.o(i.NoCloneFunction) referenced from datamarshaller.o(i.DataMarshaller_SendData)
 <LI><a href="#[1e3]">NoFreeFunction</a> from agenttypesystem.o(i.NoFreeFunction) referenced from agenttypesystem.o(i.AgentDataTypes_ToString)
 <LI><a href="#[1ec]">NoFreeFunction</a> from datamarshaller.o(i.NoFreeFunction) referenced from datamarshaller.o(i.DataMarshaller_SendData)
 <LI><a href="#[24d]">NoFreeFunction</a> from jsondecoder.o(i.NoFreeFunction) referenced from jsondecoder.o(i.JSONDecoder_JSON_To_MultiTree)
 <LI><a href="#[1d1]">OTG_FS_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1c7]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1a3]">PVD_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[29b]">PauseWRAPPER</a> from azureclient_mqtt_tm.o(i.PauseWRAPPER) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[1a0]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[29c]">PlayWRAPPER</a> from azureclient_mqtt_tm.o(i.PlayWRAPPER) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[29a]">QuitWRAPPER</a> from azureclient_mqtt_tm.o(i.QuitWRAPPER) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[1a7]">RCC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1c6]">RTC_Alarm_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1a5]">RTC_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[299]">RebootWRAPPER</a> from azureclient_mqtt_tm.o(i.RebootWRAPPER) referenced from azureclient_mqtt_tm.o(.constdata)
 <LI><a href="#[1e6]">ReceiveMessageCallback</a> from azureclient_mqtt_tm.o(i.ReceiveMessageCallback) referenced from azureclient_mqtt_tm.o(i.AzureClient_mqtt_TM)
 <LI><a href="#[198]">Reset_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1eb]">RetryPolicy_Exponential_BackOff_With_Jitter</a> from iothubtransport_mqtt_common.o(i.RetryPolicy_Exponential_BackOff_With_Jitter) referenced from iothubtransport_mqtt_common.o(i.CreateRetryLogic)
 <LI><a href="#[1c9]">SDIO_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1c1]">SPI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1c2]">SPI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1cb]">SPI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1d9]">SPI4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[19e]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[256]">SchemaHandlesMatch</a> from schema.o(i.SchemaHandlesMatch) referenced from schema.o(i.Schema_Destroy)
 <LI><a href="#[259]">SchemaNamespacesMatch</a> from schema.o(i.SchemaNamespacesMatch) referenced from schema.o(i.Schema_GetSchemaByNamespace)
 <LI><a href="#[25a]">SendConfirmationCallback</a> from azureclient_mqtt_tm.o(i.SendConfirmationCallback) referenced from azureclient_mqtt_tm.o(i.Send6DOrientationData)
 <LI><a href="#[25a]">SendConfirmationCallback</a> from azureclient_mqtt_tm.o(i.SendConfirmationCallback) referenced from azureclient_mqtt_tm.o(i.SendSNSData)
 <LI><a href="#[1a1]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1db]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[1a4]">TAMP_STAMP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b6]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b9]">TIM1_CC_IRQHandler</a> from stm32f4xx_it.o(i.TIM1_CC_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b8]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b7]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1ba]">TIM2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1bb]">TIM3_IRQHandler</a> from stm32f4xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1bc]">TIM4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1ca]">TIM5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1c3]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1c4]">USART2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1d5]">USART6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[19d]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[24b]">ValidateAsciiCharactersFilter</a> from iothub_message.o(i.ValidateAsciiCharactersFilter) referenced from iothub_message.o(i.IoTHubMessage_CreateFromByteArray)
 <LI><a href="#[1a2]">WWDG_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1e2]">__backspace</a> from fgetc_b.o(.text) referenced from scanf_char_file.o(.text)
 <LI><a href="#[1dc]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[1de]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[1df]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[1dd]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[25c]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[25c]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[25d]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[261]">add_one_and_zeros_padding</a> from cipher.o(i.add_one_and_zeros_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[25f]">add_pkcs_padding</a> from cipher.o(i.add_pkcs_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[263]">add_zeros_and_len_padding</a> from cipher.o(i.add_zeros_and_len_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[265]">add_zeros_padding</a> from cipher.o(i.add_zeros_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[2bd]">aes_crypt_cbc_wrap</a> from cipher_wrap.o(i.aes_crypt_cbc_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[2bc]">aes_crypt_ecb_wrap</a> from cipher_wrap.o(i.aes_crypt_ecb_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[2c0]">aes_ctx_alloc</a> from cipher_wrap.o(i.aes_ctx_alloc) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[2c1]">aes_ctx_free</a> from cipher_wrap.o(i.aes_ctx_free) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[2bf]">aes_setkey_dec_wrap</a> from cipher_wrap.o(i.aes_setkey_dec_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[2be]">aes_setkey_enc_wrap</a> from cipher_wrap.o(i.aes_setkey_enc_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[183]">calloc</a> from calloc.o(.text) referenced 2 times from platform.o(.data)
 <LI><a href="#[252]">desiredPropertyExists</a> from schema.o(i.desiredPropertyExists) referenced from schema.o(i.Schema_AddModelDesiredProperty)
 <LI><a href="#[1e7]">deviceMethodCallback</a> from azureclient_mqtt_tm.o(i.deviceMethodCallback) referenced from azureclient_mqtt_tm.o(i.AzureClient_mqtt_TM)
 <LI><a href="#[2ee]">eckey_alloc_wrap</a> from pk_wrap.o(i.eckey_alloc_wrap) referenced 2 times from pk_wrap.o(.constdata)
 <LI><a href="#[2ec]">eckey_can_do</a> from pk_wrap.o(i.eckey_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[2ed]">eckey_check_pair</a> from pk_wrap.o(i.eckey_check_pair) referenced 2 times from pk_wrap.o(.constdata)
 <LI><a href="#[2f0]">eckey_debug</a> from pk_wrap.o(i.eckey_debug) referenced 2 times from pk_wrap.o(.constdata)
 <LI><a href="#[2ef]">eckey_free_wrap</a> from pk_wrap.o(i.eckey_free_wrap) referenced 2 times from pk_wrap.o(.constdata)
 <LI><a href="#[2eb]">eckey_get_bitlen</a> from pk_wrap.o(i.eckey_get_bitlen) referenced 2 times from pk_wrap.o(.constdata)
 <LI><a href="#[2f1]">eckeydh_can_do</a> from pk_wrap.o(i.eckeydh_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[268]">ecp_mod_p256</a> from ecp_curves.o(i.ecp_mod_p256) referenced from ecp_curves.o(i.mbedtls_ecp_group_load)
 <LI><a href="#[26a]">ecp_mod_p256k1</a> from ecp_curves.o(i.ecp_mod_p256k1) referenced from ecp_curves.o(i.mbedtls_ecp_group_load)
 <LI><a href="#[269]">ecp_mod_p384</a> from ecp_curves.o(i.ecp_mod_p384) referenced from ecp_curves.o(i.mbedtls_ecp_group_load)
 <LI><a href="#[1e1]">fgetc</a> from console.o(i.fgetc) referenced from scanf_char_file.o(.text)
 <LI><a href="#[25b]">fputc</a> from console.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[184]">free</a> from mallocr.o(i.__free$realloc) referenced 4 times from platform.o(.data)
 <LI><a href="#[2c2]">gcm_aes_setkey_wrap</a> from cipher_wrap.o(i.gcm_aes_setkey_wrap) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[2c3]">gcm_ctx_alloc</a> from cipher_wrap.o(i.gcm_ctx_alloc) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[2c4]">gcm_ctx_free</a> from cipher_wrap.o(i.gcm_ctx_free) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[24c]">getIoTransportProvider</a> from iothubtransportmqtt.o(i.getIoTransportProvider) referenced from iothubtransportmqtt.o(i.IoTHubTransportMqtt_Create)
 <LI><a href="#[267]">get_no_padding</a> from cipher.o(i.get_no_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[262]">get_one_and_zeros_padding</a> from cipher.o(i.get_one_and_zeros_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[260]">get_pkcs_padding</a> from cipher.o(i.get_pkcs_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[264]">get_zeros_and_len_padding</a> from cipher.o(i.get_zeros_and_len_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[266]">get_zeros_padding</a> from cipher.o(i.get_zeros_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[1e0]">isspace</a> from isspace_o.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[1da]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[197]">malloc</a> from mallocr.o(i.__malloc$realloc) referenced 2 times from parson.o(.data)
 <LI><a href="#[257]">matchModelMethod</a> from schema.o(i.matchModelMethod) referenced from schema.o(i.Schema_GetModelMethodByName)
 <LI><a href="#[258]">matchModelName</a> from schema.o(i.matchModelName) referenced from schema.o(i.Schema_GetModelModelByName)
 <LI><a href="#[26e]">mbedtls_ctr_drbg_random</a> from ctr_drbg.o(i.mbedtls_ctr_drbg_random) referenced from tlsio_mbedtls_stm32cube_nucleo.o(i.mbedtls_init)
 <LI><a href="#[26d]">mbedtls_entropy_func</a> from entropy.o(i.mbedtls_entropy_func) referenced from tlsio_mbedtls_stm32cube_nucleo.o(i.mbedtls_init)
 <LI><a href="#[26b]">mbedtls_hardware_poll</a> from azureclient_mqtt_tm.o(i.mbedtls_hardware_poll) referenced from entropy.o(i.mbedtls_entropy_init)
 <LI><a href="#[2c8]">mbedtls_sha1</a> from sha1.o(i.mbedtls_sha1) referenced from md_wrap.o(.constdata)
 <LI><a href="#[255]">methodExists</a> from schema.o(i.methodExists) referenced from schema.o(i.Schema_CreateModelMethod)
 <LI><a href="#[253]">methodFindArgumentByBame</a> from schema.o(i.methodFindArgumentByBame) referenced from schema.o(i.Schema_AddModelMethodArgument)
 <LI><a href="#[248]">mqtt_error_callback</a> from iothubtransport_mqtt_common.o(i.mqtt_error_callback) referenced from iothubtransport_mqtt_common.o(i.InitializeTransportHandleData)
 <LI><a href="#[24a]">mqtt_notification_callback</a> from iothubtransport_mqtt_common.o(i.mqtt_notification_callback) referenced from iothubtransport_mqtt_common.o(i.InitializeTransportHandleData)
 <LI><a href="#[249]">mqtt_operation_complete_callback</a> from iothubtransport_mqtt_common.o(i.mqtt_operation_complete_callback) referenced from iothubtransport_mqtt_common.o(i.InitializeTransportHandleData)
 <LI><a href="#[27a]">onBytesReceived</a> from mqtt_client.o(i.onBytesReceived) referenced from mqtt_client.o(i.mqtt_client_connect)
 <LI><a href="#[279]">onIoError</a> from mqtt_client.o(i.onIoError) referenced from mqtt_client.o(i.mqtt_client_connect)
 <LI><a href="#[27b]">onOpenComplete</a> from mqtt_client.o(i.onOpenComplete) referenced from mqtt_client.o(i.mqtt_client_connect)
 <LI><a href="#[25e]">on_connection_closed</a> from mqtt_client.o(i.on_connection_closed) referenced from mqtt_client.o(i.close_connection)
 <LI><a href="#[26f]">on_io_recv</a> from tlsio_mbedtls_stm32cube_nucleo.o(i.on_io_recv) referenced from tlsio_mbedtls_stm32cube_nucleo.o(i.mbedtls_init)
 <LI><a href="#[270]">on_io_send</a> from tlsio_mbedtls_stm32cube_nucleo.o(i.on_io_send) referenced from tlsio_mbedtls_stm32cube_nucleo.o(i.mbedtls_init)
 <LI><a href="#[286]">on_underlying_io_bytes_received</a> from tlsio_mbedtls_stm32cube_nucleo.o(i.on_underlying_io_bytes_received) referenced from tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_open)
 <LI><a href="#[284]">on_underlying_io_close_complete</a> from tlsio_mbedtls_stm32cube_nucleo.o(i.on_underlying_io_close_complete) referenced from tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_destroy)
 <LI><a href="#[285]">on_underlying_io_error</a> from tlsio_mbedtls_stm32cube_nucleo.o(i.on_underlying_io_error) referenced from tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_open)
 <LI><a href="#[287]">on_underlying_io_open_complete</a> from tlsio_mbedtls_stm32cube_nucleo.o(i.on_underlying_io_open_complete) referenced from tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_open)
 <LI><a href="#[27c]">recvCompleteCallback</a> from mqtt_client.o(i.recvCompleteCallback) referenced from mqtt_client.o(i.mqtt_client_init)
 <LI><a href="#[254]">reportedPropertyExists</a> from schema.o(i.reportedPropertyExists) referenced from schema.o(i.Schema_AddModelReportedProperty)
 <LI><a href="#[254]">reportedPropertyExists</a> from schema.o(i.reportedPropertyExists) referenced from schema.o(i.Schema_ModelReportedPropertyByPathExists)
 <LI><a href="#[1ef]">reportedPropertyExistsByPath</a> from datapublisher.o(i.reportedPropertyExistsByPath) referenced from datapublisher.o(i.DataPublisher_PublishTransacted_ReportedProperty)
 <LI><a href="#[2e8]">rsa_alloc_wrap</a> from pk_wrap.o(i.rsa_alloc_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[2e2]">rsa_can_do</a> from pk_wrap.o(i.rsa_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[2e7]">rsa_check_pair_wrap</a> from pk_wrap.o(i.rsa_check_pair_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[2ea]">rsa_debug</a> from pk_wrap.o(i.rsa_debug) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[2e5]">rsa_decrypt_wrap</a> from pk_wrap.o(i.rsa_decrypt_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[2e6]">rsa_encrypt_wrap</a> from pk_wrap.o(i.rsa_encrypt_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[2e9]">rsa_free_wrap</a> from pk_wrap.o(i.rsa_free_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[2e1]">rsa_get_bitlen</a> from pk_wrap.o(i.rsa_get_bitlen) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[2e4]">rsa_sign_wrap</a> from pk_wrap.o(i.rsa_sign_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[2e3]">rsa_verify_wrap</a> from pk_wrap.o(i.rsa_verify_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[27f]">sendComplete</a> from mqtt_client.o(i.sendComplete) referenced from mqtt_client.o(i.sendPacketItem)
 <LI><a href="#[2cb]">sha1_clone_wrap</a> from md_wrap.o(i.sha1_clone_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[2c9]">sha1_ctx_alloc</a> from md_wrap.o(i.sha1_ctx_alloc) referenced from md_wrap.o(.constdata)
 <LI><a href="#[2ca]">sha1_ctx_free</a> from md_wrap.o(i.sha1_ctx_free) referenced from md_wrap.o(.constdata)
 <LI><a href="#[2c7]">sha1_finish_wrap</a> from md_wrap.o(i.sha1_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[2cc]">sha1_process_wrap</a> from md_wrap.o(i.sha1_process_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[2c5]">sha1_starts_wrap</a> from md_wrap.o(i.sha1_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[2c6]">sha1_update_wrap</a> from md_wrap.o(i.sha1_update_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[2d3]">sha224_clone_wrap</a> from md_wrap.o(i.sha224_clone_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[2d1]">sha224_ctx_alloc</a> from md_wrap.o(i.sha224_ctx_alloc) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[2d2]">sha224_ctx_free</a> from md_wrap.o(i.sha224_ctx_free) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[2cf]">sha224_finish_wrap</a> from md_wrap.o(i.sha224_finish_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[2d4]">sha224_process_wrap</a> from md_wrap.o(i.sha224_process_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[2cd]">sha224_starts_wrap</a> from md_wrap.o(i.sha224_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[2ce]">sha224_update_wrap</a> from md_wrap.o(i.sha224_update_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[2d0]">sha224_wrap</a> from md_wrap.o(i.sha224_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[2d5]">sha256_starts_wrap</a> from md_wrap.o(i.sha256_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[2d6]">sha256_wrap</a> from md_wrap.o(i.sha256_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[2dd]">sha384_clone_wrap</a> from md_wrap.o(i.sha384_clone_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[2db]">sha384_ctx_alloc</a> from md_wrap.o(i.sha384_ctx_alloc) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[2dc]">sha384_ctx_free</a> from md_wrap.o(i.sha384_ctx_free) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[2d9]">sha384_finish_wrap</a> from md_wrap.o(i.sha384_finish_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[2de]">sha384_process_wrap</a> from md_wrap.o(i.sha384_process_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[2d7]">sha384_starts_wrap</a> from md_wrap.o(i.sha384_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[2d8]">sha384_update_wrap</a> from md_wrap.o(i.sha384_update_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[2da]">sha384_wrap</a> from md_wrap.o(i.sha384_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[2df]">sha512_starts_wrap</a> from md_wrap.o(i.sha512_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[2e0]">sha512_wrap</a> from md_wrap.o(i.sha512_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[282]">socketio_CloneOption</a> from socketio_stm32cube.o(i.socketio_CloneOption) referenced from socketio_stm32cube.o(i.socketio_retrieveoptions)
 <LI><a href="#[281]">socketio_DestroyOption</a> from socketio_stm32cube.o(i.socketio_DestroyOption) referenced from socketio_stm32cube.o(i.socketio_retrieveoptions)
 <LI><a href="#[2b1]">socketio_close</a> from socketio_stm32cube.o(i.socketio_close) referenced from socketio_stm32cube.o(.constdata)
 <LI><a href="#[2ae]">socketio_create</a> from socketio_stm32cube.o(i.socketio_create) referenced from socketio_stm32cube.o(.constdata)
 <LI><a href="#[2af]">socketio_destroy</a> from socketio_stm32cube.o(i.socketio_destroy) referenced from socketio_stm32cube.o(.constdata)
 <LI><a href="#[2b3]">socketio_dowork</a> from socketio_stm32cube.o(i.socketio_dowork) referenced from socketio_stm32cube.o(.constdata)
 <LI><a href="#[2b0]">socketio_open</a> from socketio_stm32cube.o(i.socketio_open) referenced from socketio_stm32cube.o(.constdata)
 <LI><a href="#[2ad]">socketio_retrieveoptions</a> from socketio_stm32cube.o(i.socketio_retrieveoptions) referenced from socketio_stm32cube.o(.constdata)
 <LI><a href="#[2b2]">socketio_send</a> from socketio_stm32cube.o(i.socketio_send) referenced from socketio_stm32cube.o(.constdata)
 <LI><a href="#[280]">socketio_setoption</a> from socketio_stm32cube.o(i.socketio_setoption) referenced from socketio_stm32cube.o(.constdata)
 <LI><a href="#[280]">socketio_setoption</a> from socketio_stm32cube.o(i.socketio_setoption) referenced from socketio_stm32cube.o(i.socketio_retrieveoptions)
 <LI><a href="#[276]">ssl_calc_finished_tls_sha256</a> from ssl_tls.o(i.ssl_calc_finished_tls_sha256) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[273]">ssl_calc_finished_tls_sha384</a> from ssl_tls.o(i.ssl_calc_finished_tls_sha384) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[275]">ssl_calc_verify_tls_sha256</a> from ssl_tls.o(i.ssl_calc_verify_tls_sha256) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[272]">ssl_calc_verify_tls_sha384</a> from ssl_tls.o(i.ssl_calc_verify_tls_sha384) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[277]">ssl_update_checksum_sha256</a> from ssl_tls.o(i.ssl_update_checksum_sha256) referenced from ssl_tls.o(i.mbedtls_ssl_optimize_checksum)
 <LI><a href="#[278]">ssl_update_checksum_sha384</a> from ssl_tls.o(i.ssl_update_checksum_sha384) referenced from ssl_tls.o(i.mbedtls_ssl_optimize_checksum)
 <LI><a href="#[283]">ssl_update_checksum_start</a> from ssl_tls.o(i.ssl_update_checksum_start) referenced from ssl_tls.o(i.ssl_handshake_params_init)
 <LI><a href="#[274]">tls_prf_sha256</a> from ssl_tls.o(i.tls_prf_sha256) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[271]">tls_prf_sha384</a> from ssl_tls.o(i.tls_prf_sha384) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[26c]">tlsio_entropy_poll</a> from tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_entropy_poll) referenced from tlsio_mbedtls_stm32cube_nucleo.o(i.mbedtls_init)
 <LI><a href="#[2b8]">tlsio_mbedtls_close</a> from tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_close) referenced from tlsio_mbedtls_stm32cube_nucleo.o(.constdata)
 <LI><a href="#[2b5]">tlsio_mbedtls_create</a> from tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_create) referenced from tlsio_mbedtls_stm32cube_nucleo.o(.constdata)
 <LI><a href="#[2b6]">tlsio_mbedtls_destroy</a> from tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_destroy) referenced from tlsio_mbedtls_stm32cube_nucleo.o(.constdata)
 <LI><a href="#[2ba]">tlsio_mbedtls_dowork</a> from tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_dowork) referenced from tlsio_mbedtls_stm32cube_nucleo.o(.constdata)
 <LI><a href="#[2b7]">tlsio_mbedtls_open</a> from tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_open) referenced from tlsio_mbedtls_stm32cube_nucleo.o(.constdata)
 <LI><a href="#[2b4]">tlsio_mbedtls_retrieveoptions</a> from tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_retrieveoptions) referenced from tlsio_mbedtls_stm32cube_nucleo.o(.constdata)
 <LI><a href="#[2b9]">tlsio_mbedtls_send</a> from tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_send) referenced from tlsio_mbedtls_stm32cube_nucleo.o(.constdata)
 <LI><a href="#[2bb]">tlsio_mbedtls_setoption</a> from tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_setoption) referenced from tlsio_mbedtls_stm32cube_nucleo.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1dc]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[9f6]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2f2]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[329]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9f7]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[9f8]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[9f9]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[9fa]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[9fb]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[198]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b4]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1ad]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1ae]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1af]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b0]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b1]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b2]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b3]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1c8]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1cc]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1cd]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1ce]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1cf]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1d0]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1d2]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1d3]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1d4]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1a8]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1a9]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1aa]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1ab]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1a6]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1d8]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1be]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1bd]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1c0]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1bf]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1d7]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1d6]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1d1]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1c7]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1a3]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1a7]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1c6]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1a5]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1c9]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1c1]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1c2]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1cb]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1d9]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1a4]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b6]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b8]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b7]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1ba]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1bc]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1ca]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1c4]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1d5]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1a2]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2f4]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_int_div_int
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[2f7]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Acceleration
</UL>

<P><STRONG><a name="[2f5]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512ResultN
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[9fc]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[1e0]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[48c]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hardware_poll
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTheModelInstance
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_entropy_poll
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetryPolicy_Exponential_BackOff_With_Jitter
</UL>

<P><STRONG><a name="[519]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_entropy_poll
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
</UL>

<P><STRONG><a name="[2f9]"></a>mktime</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
</UL>

<P><STRONG><a name="[2fd]"></a>strftime</STRONG> (Thumb, 580 bytes, Stack size 72 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLogTime
</UL>

<P><STRONG><a name="[2fe]"></a>asctime</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, asctime_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = asctime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[2ff]"></a>ctime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ctime &rArr; asctime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ctime
</UL>

<P><STRONG><a name="[9fd]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[38a]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gsm_init
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDM_SaveGMD
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDM_ReCallGMD
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalBufferPushBuffer
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalBufferPopBuffer
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_pending_io
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceMethodCallback
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveMessageCallback
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallbackStatus
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_bytes_received
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_recv
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadText
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IdentifyNDEF
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IdentifySPRecord
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_line_by_line
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_session_ticket_ext
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_renegotiation_ext
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy_s
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Create_Internal
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_prepend
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_create
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_clone
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_n
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy_n
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_string
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_recv
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeUTF
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_readUTF
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[36e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_EDM_DATE_TIME_OFFSET
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_DestroyDevice
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_EDM_DATE_TIME_OFFSET
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send6DOrientationData
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDateTimeOffset
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTheModelInstance
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tts
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_resize
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_resize
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_init
</UL>

<P><STRONG><a name="[745]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_entropy_poll
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_recv
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_erase
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</UL>

<P><STRONG><a name="[9fe]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[9ff]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hardware_poll
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[a00]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a01]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_entropy_poll
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS3_ACCELERO_Init
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS0_ACCELERO_Init
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS25HB_PRESSURE_Init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LIS3MDL_MAGNETO_Init
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS25HB_TEMPERATURE_Init
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_TEMPERATURE_Init
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_HUMIDITY_Init
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS3_GYRO_Init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS0_GYRO_Init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_HUMIDITY_Init
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_GYRO_Init
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_ACCELERO_Init
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM303AGR_ACCELERO_Init
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_TEMPERATURE_Init
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM303AGR_MAGNETO_Init
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_fixed
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
</UL>

<P><STRONG><a name="[36d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMSCallback
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Create
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_recv
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_init
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_send
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_receive
</UL>

<P><STRONG><a name="[a02]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[36f]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_init
</UL>

<P><STRONG><a name="[8c0]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[44f]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy_s
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMethodPathAndExecuteMethod
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanActionPathAndExecuteAction
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parson_strndup
</UL>

<P><STRONG><a name="[412]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelReportedPropertyByPathExists
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelPropertyByPathExists
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMethodPathAndExecuteMethod
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanActionPathAndExecuteAction
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChildModelInCodeFirstMetadata
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_decimal
</UL>

<P><STRONG><a name="[370]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64decode_len
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_create
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_charz_no_quotes
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_charz
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceMethodCallback
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_setoption
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decoder
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy_s
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy_s
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_n
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy_n
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_length
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Create
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_topic_type
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveMessagePayload
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelReportedPropertyByPathExists
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelPropertyByPathExists
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCommand
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChildModelInCodeFirstMetadata
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_value
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parson_strdup
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_string
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_nget_value
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_string
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_init
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPrintf
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_send
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishVariableHeader
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToUnsubscribePacket
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToSubscribePacket
</UL>

<P><STRONG><a name="[32f]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelByName
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildByName
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetOption
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_setoption
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_setoption
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findKey
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Register
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_GetOption
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportedPropertyExistsByPath
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetStructTypeByName
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelActionByName
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateStructType
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelAction
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddStructTypeProperty
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelActionArgument
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeMethod
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeAction
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_GetPrimitiveType
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildStructTypes
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceReportedProperties
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceProperties
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindValue
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindReportedProperty
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindModelInCodeFirstMetadata
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChildModelInCodeFirstMetadata
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;areThereTwoSameNames
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_value
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportedPropertyExists
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;methodFindArgumentByBame
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;methodExists
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchModelName
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchModelMethod
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desiredPropertyExists
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchemaNamespacesMatch
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddModelProperty
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChildByName
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_receive
</UL>

<P><STRONG><a name="[37d]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseWellKnownType
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseURI
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseMediaType
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseForumExternalType
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x520_attr_from_asn1
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x509_ext_from_asn1
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_pk_alg_from_asn1
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_md_alg_from_asn1
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_grp_id_from_asn1
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_ext_key_usage_from_asn1
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_is_revoked
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_string_cmp
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_extended_key_usage
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSystemProperty
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_receive
</UL>

<P><STRONG><a name="[9a5]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_create
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[48f]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelReportedPropertyByPathExists
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelPropertyByPathExists
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChildModelInCodeFirstMetadata
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_null_value
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_boolean_value
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_nget_value
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_decimal
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseValue
</UL>

<P><STRONG><a name="[183]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = calloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSNSData
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send6DOrientationData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[304]"></a>__0scanf</STRONG> (Thumb, 26 bytes, Stack size 56 bytes, __0scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __0scanf &rArr; __vfscanf_char_file &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[306]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_recv
</UL>

<P><STRONG><a name="[308]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[32a]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[30a]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanfd
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[30d]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanfu
</UL>

<P><STRONG><a name="[30e]"></a>strtoull</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = strtoull &rArr; __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanfllu
</UL>

<P><STRONG><a name="[310]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallbackStatus
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_receive
</UL>

<P><STRONG><a name="[311]"></a>atol</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
</UL>

<P><STRONG><a name="[312]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTheModelInstance
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExpiryValue
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRetry
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[316]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
</UL>

<P><STRONG><a name="[317]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[318]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExpiryValue
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[319]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[31a]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExpiryValue
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[31b]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTheModelInstance
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRetry
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
</UL>

<P><STRONG><a name="[31c]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[31d]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[31e]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_seconds_since_epoch
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[31f]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[336]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[781]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanflf
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[3ce]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRetry
</UL>

<P><STRONG><a name="[3cf]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRetry
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[320]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTheModelInstance
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[a03]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[78a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2f6]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[a04]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[313]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a05]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLogTime
</UL>

<P><STRONG><a name="[2fa]"></a>_localtime</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[309]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[307]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[1dd]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[1de]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[30b]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[325]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtof_int
</UL>

<P><STRONG><a name="[326]"></a>__strtof_int</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, strtof.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
</UL>

<P><STRONG><a name="[30f]"></a>__strtoull</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, __strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoull
</UL>

<P><STRONG><a name="[305]"></a>__vfscanf_char_file</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char_file &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0scanf
</UL>

<P><STRONG><a name="[a06]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[321]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[a07]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[315]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[314]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[2f3]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[a08]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[a09]"></a>_fgetc$bs</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fgetc_b.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>__backspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fgetc_b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char_file.o(.text)
</UL>
<P><STRONG><a name="[322]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[324]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[32c]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[328]"></a>_strtoull</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, _strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
</UL>

<P><STRONG><a name="[a0a]"></a>__I$use$semihosting$fgetc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusesemig.o(.text), UNUSED)

<P><STRONG><a name="[a0b]"></a>__fp_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fpstat.o(.text), UNUSED)

<P><STRONG><a name="[782]"></a>__ieee_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fpstat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[a0c]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[a0d]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[a0e]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>AZURE1_ERRORStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, platform_stm32cube_nucleof401re.o(i.AZURE1_ERRORStrings))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureExit
</UL>

<P><STRONG><a name="[1ee]"></a>AgentDataTypes_ToString</STRONG> (Thumb, 3284 bytes, Stack size 80 bytes, agenttypesystem.o(i.AgentDataTypes_ToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = AgentDataTypes_ToString &rArr; MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf_s
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Create
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexDigitToChar
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64char
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64b8
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64b16
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinff
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
</UL>
<BR>[Address Reference Count : 2]<UL><LI> datamarshaller.o(i.DataMarshaller_SendData)
<LI> agenttypesystem.o(i.AgentDataTypes_ToString)
</UL>
<P><STRONG><a name="[340]"></a>AzureClient_mqtt_TM</STRONG> (Thumb, 1950 bytes, Stack size 56 bytes, azureclient_mqtt_tm.o(i.AzureClient_mqtt_TM))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = AzureClient_mqtt_TM &rArr; ReportState &rArr; CodeFirst_SendAsyncReported &rArr; Device_CommitTransaction_ReportedProperties &rArr; DataPublisher_CommitTransaction_ReportedProperties &rArr; DataMarshaller_SendData_ReportedProperties &rArr; json_serialize_to_string_pretty &rArr; json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serializer_init
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serializer_deinit
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_deinit
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopTimer1
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer1
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelByName
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMSCallback
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetOption
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetMessageCallback
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetDeviceTwinCallback
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetDeviceMethodCallback
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_DoWork
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Destroy
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_RegisterSchema
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_DestroyDevice
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureExit
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitAllTheMessages
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportState
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSNSData
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send6DOrientationData
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonCallback
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[343]"></a>AzureExit</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, platform_stm32cube_nucleof401re.o(i.AzureExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AzureExit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZURE1_ERRORStrings
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
</UL>

<P><STRONG><a name="[361]"></a>BG96_Configuration</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, stm32_bg96_iot.o(i.BG96_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BG96_Configuration &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[365]"></a>BG96_Error_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32_bg96_iot.o(i.BG96_Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BG96_Error_Handler &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_Timer_Config
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_Configuration
</UL>

<P><STRONG><a name="[367]"></a>BG96_Timer_Config</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32_bg96_iot.o(i.BG96_Timer_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BG96_Timer_Config &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[388]"></a>BG96_check_ready</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bg96_interface.o(i.BG96_check_ready))
<BR><BR>[Called By]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gsm_init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_recv
</UL>

<P><STRONG><a name="[36a]"></a>BG96_init</STRONG> (Thumb, 636 bytes, Stack size 96 bytes, bg96_interface.o(i.BG96_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = BG96_init &rArr; BG96_receive &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_bg96_connected
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPrintf
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_set_aswer
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gsm_init
</UL>

<P><STRONG><a name="[37a]"></a>BG96_power_on</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bg96_interface.o(i.BG96_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BG96_power_on &rArr; BG96_power &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_power
</UL>
<BR>[Called By]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gsm_init
</UL>

<P><STRONG><a name="[379]"></a>BG96_pwr_key_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32_bg96_iot.o(i.BG96_pwr_key_off))
<BR><BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_power
</UL>

<P><STRONG><a name="[374]"></a>BG96_pwr_key_on</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32_bg96_iot.o(i.BG96_pwr_key_on))
<BR><BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_power
</UL>

<P><STRONG><a name="[378]"></a>BG96_reset_off</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_bg96_iot.o(i.BG96_reset_off))
<BR><BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_power
</UL>

<P><STRONG><a name="[375]"></a>BG96_reset_on</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32_bg96_iot.o(i.BG96_reset_on))
<BR><BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_power
</UL>

<P><STRONG><a name="[76e]"></a>BG96_rx_callback</STRONG> (Thumb, 312 bytes, Stack size 36 bytes, bg96_interface.o(i.BG96_rx_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BG96_rx_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[9e4]"></a>BG96_socket_client_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bg96_interface.o(i.BG96_socket_client_close))
<BR><BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_close
</UL>

<P><STRONG><a name="[382]"></a>BG96_socket_client_open</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bg96_interface.o(i.BG96_socket_client_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = BG96_socket_client_open &rArr; BG96_socket_open &rArr; BG96_socket &rArr; BG96_receive &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_open
</UL>
<BR>[Called By]<UL><LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_connect
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[384]"></a>BG96_socket_client_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bg96_interface.o(i.BG96_socket_client_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = BG96_socket_client_write &rArr; BG96_socket_write &rArr; BG96_socket_send &rArr; BG96_receive &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_write
</UL>
<BR>[Called By]<UL><LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_send
</UL>

<P><STRONG><a name="[383]"></a>BG96_socket_open</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bg96_interface.o(i.BG96_socket_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = BG96_socket_open &rArr; BG96_socket &rArr; BG96_receive &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_alloc
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_client_open
</UL>

<P><STRONG><a name="[387]"></a>BG96_socket_recv</STRONG> (Thumb, 402 bytes, Stack size 32 bytes, bg96_interface.o(i.BG96_socket_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = BG96_socket_recv &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_bg96_socket_data_received
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_bg96_socket_client_remote_server_closed
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_check_ready
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPrintf
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_free
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_set_READ_aswer
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_receive
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_timers_callback
</UL>

<P><STRONG><a name="[385]"></a>BG96_socket_write</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bg96_interface.o(i.BG96_socket_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = BG96_socket_write &rArr; BG96_socket_send &rArr; BG96_receive &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_send
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_client_write
</UL>

<P><STRONG><a name="[38e]"></a>BG96_timers_callback</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bg96_interface.o(i.BG96_timers_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = BG96_timers_callback &rArr; BG96_socket_recv &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[38f]"></a>BG96_uart_send</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32_bg96_iot.o(i.BG96_uart_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BG96_uart_send &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPrintf
</UL>

<P><STRONG><a name="[377]"></a>BG96_vbat_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32_bg96_iot.o(i.BG96_vbat_off))
<BR><BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_power
</UL>

<P><STRONG><a name="[376]"></a>BG96_vbat_on</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32_bg96_iot.o(i.BG96_vbat_on))
<BR><BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_power
</UL>

<P><STRONG><a name="[1f9]"></a>BSP_ACCELERO_Disable_6D_Orientation_Ext_IKS01A1</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_6D_Orientation_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWOrientation6D)
</UL>
<P><STRONG><a name="[1f8]"></a>BSP_ACCELERO_Disable_6D_Orientation_Ext_IKS01A2</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_6D_Orientation_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWOrientation6D)
</UL>
<P><STRONG><a name="[1f3]"></a>BSP_ACCELERO_Disable_Double_Tap_Detection_Ext_IKS01A1</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_Double_Tap_Detection_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWDoubleTap)
</UL>
<P><STRONG><a name="[1f2]"></a>BSP_ACCELERO_Disable_Double_Tap_Detection_Ext_IKS01A2</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_Double_Tap_Detection_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWDoubleTap)
</UL>
<P><STRONG><a name="[1f7]"></a>BSP_ACCELERO_Disable_Free_Fall_Detection_Ext_IKS01A1</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_Free_Fall_Detection_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWFreeFall)
</UL>
<P><STRONG><a name="[1f6]"></a>BSP_ACCELERO_Disable_Free_Fall_Detection_Ext_IKS01A2</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_Free_Fall_Detection_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWFreeFall)
</UL>
<P><STRONG><a name="[1fb]"></a>BSP_ACCELERO_Disable_Pedometer_Ext_IKS01A1</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_Pedometer_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWPedometer)
</UL>
<P><STRONG><a name="[1fa]"></a>BSP_ACCELERO_Disable_Pedometer_Ext_IKS01A2</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_Pedometer_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWPedometer)
</UL>
<P><STRONG><a name="[1fd]"></a>BSP_ACCELERO_Disable_Single_Tap_Detection_Ext_IKS01A1</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_Single_Tap_Detection_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWSingleTap)
</UL>
<P><STRONG><a name="[1fc]"></a>BSP_ACCELERO_Disable_Single_Tap_Detection_Ext_IKS01A2</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_Single_Tap_Detection_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWSingleTap)
</UL>
<P><STRONG><a name="[1ff]"></a>BSP_ACCELERO_Disable_Tilt_Detection_Ext_IKS01A1</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_Tilt_Detection_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWTilt)
</UL>
<P><STRONG><a name="[1fe]"></a>BSP_ACCELERO_Disable_Tilt_Detection_Ext_IKS01A2</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_Tilt_Detection_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWTilt)
</UL>
<P><STRONG><a name="[201]"></a>BSP_ACCELERO_Disable_Wake_Up_Detection_Ext_IKS01A1</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_Wake_Up_Detection_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWWakeUp)
</UL>
<P><STRONG><a name="[200]"></a>BSP_ACCELERO_Disable_Wake_Up_Detection_Ext_IKS01A2</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_Wake_Up_Detection_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWWakeUp)
</UL>
<P><STRONG><a name="[207]"></a>BSP_ACCELERO_Enable_6D_Orientation_Ext_IKS01A1</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_6D_Orientation_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWOrientation6D)
</UL>
<P><STRONG><a name="[206]"></a>BSP_ACCELERO_Enable_6D_Orientation_Ext_IKS01A2</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_6D_Orientation_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWOrientation6D)
</UL>
<P><STRONG><a name="[203]"></a>BSP_ACCELERO_Enable_Double_Tap_Detection_Ext_IKS01A1</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_Double_Tap_Detection_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWDoubleTap)
</UL>
<P><STRONG><a name="[202]"></a>BSP_ACCELERO_Enable_Double_Tap_Detection_Ext_IKS01A2</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_Double_Tap_Detection_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWDoubleTap)
</UL>
<P><STRONG><a name="[205]"></a>BSP_ACCELERO_Enable_Free_Fall_Detection_Ext_IKS01A1</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_Free_Fall_Detection_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWFreeFall)
</UL>
<P><STRONG><a name="[204]"></a>BSP_ACCELERO_Enable_Free_Fall_Detection_Ext_IKS01A2</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_Free_Fall_Detection_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWFreeFall)
</UL>
<P><STRONG><a name="[209]"></a>BSP_ACCELERO_Enable_Pedometer_Ext_IKS01A1</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_Pedometer_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWPedometer)
</UL>
<P><STRONG><a name="[208]"></a>BSP_ACCELERO_Enable_Pedometer_Ext_IKS01A2</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_Pedometer_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWPedometer)
</UL>
<P><STRONG><a name="[20b]"></a>BSP_ACCELERO_Enable_Single_Tap_Detection_Ext_IKS01A1</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_Single_Tap_Detection_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWSingleTap)
</UL>
<P><STRONG><a name="[20a]"></a>BSP_ACCELERO_Enable_Single_Tap_Detection_Ext_IKS01A2</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_Single_Tap_Detection_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWSingleTap)
</UL>
<P><STRONG><a name="[20d]"></a>BSP_ACCELERO_Enable_Tilt_Detection_Ext_IKS01A1</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_Tilt_Detection_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWTilt)
</UL>
<P><STRONG><a name="[20c]"></a>BSP_ACCELERO_Enable_Tilt_Detection_Ext_IKS01A2</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_Tilt_Detection_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWTilt)
</UL>
<P><STRONG><a name="[20f]"></a>BSP_ACCELERO_Enable_Wake_Up_Detection_Ext_IKS01A1</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_Wake_Up_Detection_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWWakeUp)
</UL>
<P><STRONG><a name="[20e]"></a>BSP_ACCELERO_Enable_Wake_Up_Detection_Ext_IKS01A2</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_Wake_Up_Detection_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWWakeUp)
</UL>
<P><STRONG><a name="[225]"></a>BSP_ACCELERO_Get_6D_Orientation_XH_Ext_IKS01A1</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_XH_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetHWOrientation6D)
</UL>
<P><STRONG><a name="[224]"></a>BSP_ACCELERO_Get_6D_Orientation_XH_Ext_IKS01A2</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_XH_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetHWOrientation6D)
</UL>
<P><STRONG><a name="[223]"></a>BSP_ACCELERO_Get_6D_Orientation_XL_Ext_IKS01A1</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_XL_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetHWOrientation6D)
</UL>
<P><STRONG><a name="[222]"></a>BSP_ACCELERO_Get_6D_Orientation_XL_Ext_IKS01A2</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_XL_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetHWOrientation6D)
</UL>
<P><STRONG><a name="[229]"></a>BSP_ACCELERO_Get_6D_Orientation_YH_Ext_IKS01A1</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_YH_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetHWOrientation6D)
</UL>
<P><STRONG><a name="[228]"></a>BSP_ACCELERO_Get_6D_Orientation_YH_Ext_IKS01A2</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_YH_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetHWOrientation6D)
</UL>
<P><STRONG><a name="[227]"></a>BSP_ACCELERO_Get_6D_Orientation_YL_Ext_IKS01A1</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_YL_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetHWOrientation6D)
</UL>
<P><STRONG><a name="[226]"></a>BSP_ACCELERO_Get_6D_Orientation_YL_Ext_IKS01A2</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_YL_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetHWOrientation6D)
</UL>
<P><STRONG><a name="[22d]"></a>BSP_ACCELERO_Get_6D_Orientation_ZH_Ext_IKS01A1</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_ZH_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetHWOrientation6D)
</UL>
<P><STRONG><a name="[22c]"></a>BSP_ACCELERO_Get_6D_Orientation_ZH_Ext_IKS01A2</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_ZH_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetHWOrientation6D)
</UL>
<P><STRONG><a name="[22b]"></a>BSP_ACCELERO_Get_6D_Orientation_ZL_Ext_IKS01A1</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_ZL_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetHWOrientation6D)
</UL>
<P><STRONG><a name="[22a]"></a>BSP_ACCELERO_Get_6D_Orientation_ZL_Ext_IKS01A2</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_ZL_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetHWOrientation6D)
</UL>
<P><STRONG><a name="[21d]"></a>BSP_ACCELERO_Get_Axes_IKS01A1</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Axes_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Get_Axes_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(i.FillTheModelInstance)
</UL>
<P><STRONG><a name="[21c]"></a>BSP_ACCELERO_Get_Axes_IKS01A2</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Axes_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Get_Axes_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(i.FillTheModelInstance)
</UL>
<P><STRONG><a name="[250]"></a>BSP_ACCELERO_Get_Event_Status_Ext_IKS01A1</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Event_Status_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.MEMSCallback)
</UL>
<P><STRONG><a name="[24f]"></a>BSP_ACCELERO_Get_Event_Status_Ext_IKS01A2</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Event_Status_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.MEMSCallback)
</UL>
<P><STRONG><a name="[231]"></a>BSP_ACCELERO_Get_ODR_IKS01A1</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_ODR_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Get_ODR_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.InitHWFeatures)
</UL>
<P><STRONG><a name="[230]"></a>BSP_ACCELERO_Get_ODR_IKS01A2</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_ODR_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Get_ODR_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.InitHWFeatures)
</UL>
<P><STRONG><a name="[22f]"></a>BSP_ACCELERO_Get_Step_Count_Ext_IKS01A1</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Step_Count_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetStepHWPedometer)
</UL>
<P><STRONG><a name="[22e]"></a>BSP_ACCELERO_Get_Step_Count_Ext_IKS01A2</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Step_Count_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetStepHWPedometer)
</UL>
<P><STRONG><a name="[50e]"></a>BSP_ACCELERO_Get_WhoAmI_IKS01A1</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_WhoAmI_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Get_WhoAmI_IKS01A1
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MEM1_Sensors
</UL>

<P><STRONG><a name="[391]"></a>BSP_ACCELERO_Init_IKS01A1</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Init_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_ACCELERO_Init_IKS01A1 &rArr; BSP_LSM6DS3_ACCELERO_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS3_ACCELERO_Init
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS0_ACCELERO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MEM1_Sensors
</UL>

<P><STRONG><a name="[394]"></a>BSP_ACCELERO_Init_IKS01A2</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Init_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_ACCELERO_Init_IKS01A2 &rArr; BSP_LSM6DSL_ACCELERO_Init &rArr; LSM6DSL_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_ACCELERO_Init
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM303AGR_ACCELERO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MEM1_Sensors
</UL>

<P><STRONG><a name="[23d]"></a>BSP_ACCELERO_Sensor_Enable_IKS01A1</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Sensor_Enable_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Sensor_Enable_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[23c]"></a>BSP_ACCELERO_Sensor_Enable_IKS01A2</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Sensor_Enable_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Sensor_Enable_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[27e]"></a>BSP_ACCELERO_Set_FS_Value_IKS01A1</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_FS_Value_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Set_FS_Value_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.platform_init)
</UL>
<P><STRONG><a name="[27d]"></a>BSP_ACCELERO_Set_FS_Value_IKS01A2</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_FS_Value_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Set_FS_Value_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.platform_init)
</UL>
<P><STRONG><a name="[485]"></a>BSP_ACCELERO_Set_Free_Fall_Threshold_Ext_IKS01A1</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_Free_Fall_Threshold_Ext_IKS01A1))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWFreeFall
</UL>

<P><STRONG><a name="[484]"></a>BSP_ACCELERO_Set_Free_Fall_Threshold_Ext_IKS01A2</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_Free_Fall_Threshold_Ext_IKS01A2))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWFreeFall
</UL>

<P><STRONG><a name="[1f5]"></a>BSP_ACCELERO_Set_ODR_Value_IKS01A1</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Set_ODR_Value_IKS01A1
</UL>
<BR>[Address Reference Count : 7]<UL><LI> hwadvancefeatures.o(i.DisableHWPedometer)
<LI> hwadvancefeatures.o(i.DisableHWSingleTap)
<LI> hwadvancefeatures.o(i.DisableHWTilt)
<LI> hwadvancefeatures.o(i.DisableHWWakeUp)
<LI> hwadvancefeatures.o(i.DisableHWDoubleTap)
<LI> hwadvancefeatures.o(i.DisableHWFreeFall)
<LI> hwadvancefeatures.o(i.DisableHWOrientation6D)
</UL>
<P><STRONG><a name="[1f4]"></a>BSP_ACCELERO_Set_ODR_Value_IKS01A2</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Set_ODR_Value_IKS01A2
</UL>
<BR>[Address Reference Count : 7]<UL><LI> hwadvancefeatures.o(i.DisableHWPedometer)
<LI> hwadvancefeatures.o(i.DisableHWSingleTap)
<LI> hwadvancefeatures.o(i.DisableHWTilt)
<LI> hwadvancefeatures.o(i.DisableHWWakeUp)
<LI> hwadvancefeatures.o(i.DisableHWDoubleTap)
<LI> hwadvancefeatures.o(i.DisableHWFreeFall)
<LI> hwadvancefeatures.o(i.DisableHWOrientation6D)
</UL>
<P><STRONG><a name="[483]"></a>BSP_ACCELERO_Set_Tap_Threshold_Ext_IKS01A1</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_Tap_Threshold_Ext_IKS01A1))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWDoubleTap
</UL>

<P><STRONG><a name="[482]"></a>BSP_ACCELERO_Set_Tap_Threshold_Ext_IKS01A2</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_Tap_Threshold_Ext_IKS01A2))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWDoubleTap
</UL>

<P><STRONG><a name="[21f]"></a>BSP_GYRO_Get_Axes_IKS01A1</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, x_nucleo_iks01a1_gyro.o(i.BSP_GYRO_Get_Axes_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_GYRO_Get_Axes_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(i.FillTheModelInstance)
</UL>
<P><STRONG><a name="[21e]"></a>BSP_GYRO_Get_Axes_IKS01A2</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, x_nucleo_iks01a2_gyro.o(i.BSP_GYRO_Get_Axes_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_GYRO_Get_Axes_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(i.FillTheModelInstance)
</UL>
<P><STRONG><a name="[233]"></a>BSP_GYRO_Init_IKS01A1</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, x_nucleo_iks01a1_gyro.o(i.BSP_GYRO_Init_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_GYRO_Init_IKS01A1 &rArr; BSP_LSM6DS3_GYRO_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS3_GYRO_Init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS0_GYRO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[232]"></a>BSP_GYRO_Init_IKS01A2</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, x_nucleo_iks01a2_gyro.o(i.BSP_GYRO_Init_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_GYRO_Init_IKS01A2 &rArr; BSP_LSM6DSL_GYRO_Init &rArr; LSM6DSL_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_GYRO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[23f]"></a>BSP_GYRO_Sensor_Enable_IKS01A1</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, x_nucleo_iks01a1_gyro.o(i.BSP_GYRO_Sensor_Enable_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_GYRO_Sensor_Enable_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[23e]"></a>BSP_GYRO_Sensor_Enable_IKS01A2</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, x_nucleo_iks01a2_gyro.o(i.BSP_GYRO_Sensor_Enable_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_GYRO_Sensor_Enable_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[217]"></a>BSP_HUMIDITY_Get_Hum_IKS01A1</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, x_nucleo_iks01a1_humidity.o(i.BSP_HUMIDITY_Get_Hum_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_HUMIDITY_Get_Hum_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(i.FillTheModelInstance)
</UL>
<P><STRONG><a name="[216]"></a>BSP_HUMIDITY_Get_Hum_IKS01A2</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_Get_Hum_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_HUMIDITY_Get_Hum_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(i.FillTheModelInstance)
</UL>
<P><STRONG><a name="[237]"></a>BSP_HUMIDITY_Init_IKS01A1</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, x_nucleo_iks01a1_humidity.o(i.BSP_HUMIDITY_Init_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_HUMIDITY_Init_IKS01A1 &rArr; BSP_HTS221_HUMIDITY_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_HUMIDITY_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[236]"></a>BSP_HUMIDITY_Init_IKS01A2</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_Init_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_HUMIDITY_Init_IKS01A2 &rArr; BSP_HTS221_HUMIDITY_Init &rArr; Sensor_IO_Init_IKS01A2 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_HUMIDITY_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[215]"></a>BSP_HUMIDITY_IsInitialized_IKS01A1</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, x_nucleo_iks01a1_humidity.o(i.BSP_HUMIDITY_IsInitialized_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(i.FillTheModelInstance)
</UL>
<P><STRONG><a name="[214]"></a>BSP_HUMIDITY_IsInitialized_IKS01A2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_IsInitialized_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(i.FillTheModelInstance)
</UL>
<P><STRONG><a name="[243]"></a>BSP_HUMIDITY_Sensor_Enable_IKS01A1</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, x_nucleo_iks01a1_humidity.o(i.BSP_HUMIDITY_Sensor_Enable_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_HUMIDITY_Sensor_Enable_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[242]"></a>BSP_HUMIDITY_Sensor_Enable_IKS01A2</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_Sensor_Enable_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_HUMIDITY_Sensor_Enable_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[3a0]"></a>BSP_LED_Init</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, stm32f4xx_nucleo.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[351]"></a>BSP_LED_Off</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_nucleo.o(i.BSP_LED_Off))
<BR><BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureExit
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOff
</UL>

<P><STRONG><a name="[344]"></a>BSP_LED_On</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_nucleo.o(i.BSP_LED_On))
<BR><BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureExit
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOn
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_Error_Handler
</UL>

<P><STRONG><a name="[357]"></a>BSP_LED_Toggle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_nucleo.o(i.BSP_LED_Toggle))
<BR><BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_Error_Handler
</UL>

<P><STRONG><a name="[221]"></a>BSP_MAGNETO_Get_Axes_IKS01A1</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, x_nucleo_iks01a1_magneto.o(i.BSP_MAGNETO_Get_Axes_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_MAGNETO_Get_Axes_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(i.FillTheModelInstance)
</UL>
<P><STRONG><a name="[220]"></a>BSP_MAGNETO_Get_Axes_IKS01A2</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, x_nucleo_iks01a2_magneto.o(i.BSP_MAGNETO_Get_Axes_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_MAGNETO_Get_Axes_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(i.FillTheModelInstance)
</UL>
<P><STRONG><a name="[235]"></a>BSP_MAGNETO_Init_IKS01A1</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, x_nucleo_iks01a1_magneto.o(i.BSP_MAGNETO_Init_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_MAGNETO_Init_IKS01A1 &rArr; BSP_LIS3MDL_MAGNETO_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LIS3MDL_MAGNETO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[234]"></a>BSP_MAGNETO_Init_IKS01A2</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, x_nucleo_iks01a2_magneto.o(i.BSP_MAGNETO_Init_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_MAGNETO_Init_IKS01A2 &rArr; BSP_LSM303AGR_MAGNETO_Init &rArr; Sensor_IO_Init_IKS01A2 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM303AGR_MAGNETO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[241]"></a>BSP_MAGNETO_Sensor_Enable_IKS01A1</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, x_nucleo_iks01a1_magneto.o(i.BSP_MAGNETO_Sensor_Enable_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_MAGNETO_Sensor_Enable_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[240]"></a>BSP_MAGNETO_Sensor_Enable_IKS01A2</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, x_nucleo_iks01a2_magneto.o(i.BSP_MAGNETO_Sensor_Enable_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_MAGNETO_Sensor_Enable_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[3af]"></a>BSP_PB_Init</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, stm32f4xx_nucleo.o(i.BSP_PB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_PB_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[21b]"></a>BSP_PRESSURE_Get_Press_IKS01A1</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_Get_Press_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PRESSURE_Get_Press_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(i.FillTheModelInstance)
</UL>
<P><STRONG><a name="[21a]"></a>BSP_PRESSURE_Get_Press_IKS01A2</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, x_nucleo_iks01a2_pressure.o(i.BSP_PRESSURE_Get_Press_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PRESSURE_Get_Press_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(i.FillTheModelInstance)
</UL>
<P><STRONG><a name="[23b]"></a>BSP_PRESSURE_Init_IKS01A1</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_Init_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_PRESSURE_Init_IKS01A1 &rArr; BSP_LPS25HB_PRESSURE_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS25HB_PRESSURE_Init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[23a]"></a>BSP_PRESSURE_Init_IKS01A2</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, x_nucleo_iks01a2_pressure.o(i.BSP_PRESSURE_Init_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_PRESSURE_Init_IKS01A2 &rArr; BSP_LPS22HB_PRESSURE_Init &rArr; Sensor_IO_Init_IKS01A2 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[219]"></a>BSP_PRESSURE_IsInitialized_IKS01A1</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_IsInitialized_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(i.FillTheModelInstance)
</UL>
<P><STRONG><a name="[218]"></a>BSP_PRESSURE_IsInitialized_IKS01A2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, x_nucleo_iks01a2_pressure.o(i.BSP_PRESSURE_IsInitialized_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(i.FillTheModelInstance)
</UL>
<P><STRONG><a name="[247]"></a>BSP_PRESSURE_Sensor_Enable_IKS01A1</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_Sensor_Enable_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PRESSURE_Sensor_Enable_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[246]"></a>BSP_PRESSURE_Sensor_Enable_IKS01A2</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, x_nucleo_iks01a2_pressure.o(i.BSP_PRESSURE_Sensor_Enable_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PRESSURE_Sensor_Enable_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[213]"></a>BSP_TEMPERATURE_Get_Temp_IKS01A1</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, x_nucleo_iks01a1_temperature.o(i.BSP_TEMPERATURE_Get_Temp_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_TEMPERATURE_Get_Temp_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(i.FillTheModelInstance)
</UL>
<P><STRONG><a name="[212]"></a>BSP_TEMPERATURE_Get_Temp_IKS01A2</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_Get_Temp_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_TEMPERATURE_Get_Temp_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(i.FillTheModelInstance)
</UL>
<P><STRONG><a name="[239]"></a>BSP_TEMPERATURE_Init_IKS01A1</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, x_nucleo_iks01a1_temperature.o(i.BSP_TEMPERATURE_Init_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_TEMPERATURE_Init_IKS01A1 &rArr; BSP_LPS25HB_TEMPERATURE_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS25HB_TEMPERATURE_Init
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_TEMPERATURE_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[238]"></a>BSP_TEMPERATURE_Init_IKS01A2</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_Init_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_TEMPERATURE_Init_IKS01A2 &rArr; BSP_LPS22HB_TEMPERATURE_Init &rArr; Sensor_IO_Init_IKS01A2 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_TEMPERATURE_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[211]"></a>BSP_TEMPERATURE_IsInitialized_IKS01A1</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, x_nucleo_iks01a1_temperature.o(i.BSP_TEMPERATURE_IsInitialized_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(i.FillTheModelInstance)
</UL>
<P><STRONG><a name="[210]"></a>BSP_TEMPERATURE_IsInitialized_IKS01A2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_IsInitialized_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(i.FillTheModelInstance)
</UL>
<P><STRONG><a name="[245]"></a>BSP_TEMPERATURE_Sensor_Enable_IKS01A1</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, x_nucleo_iks01a1_temperature.o(i.BSP_TEMPERATURE_Sensor_Enable_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_TEMPERATURE_Sensor_Enable_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[244]"></a>BSP_TEMPERATURE_Sensor_Enable_IKS01A2</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_Sensor_Enable_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_TEMPERATURE_Sensor_Enable_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[3b1]"></a>BUFFER_clone</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, buffer.o(i.BUFFER_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BUFFER_clone &rArr; BUFFER_safemalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_safemalloc
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
</UL>

<P><STRONG><a name="[3c3]"></a>BUFFER_content</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, buffer.o(i.BUFFER_content))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encoder
</UL>

<P><STRONG><a name="[3b3]"></a>BUFFER_create</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, buffer.o(i.BUFFER_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BUFFER_create &rArr; BUFFER_safemalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_safemalloc
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
</UL>

<P><STRONG><a name="[3b4]"></a>BUFFER_delete</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, buffer.o(i.BUFFER_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BUFFER_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decoder
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completePacketData
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_ping
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_disconnect
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_destroy
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
</UL>

<P><STRONG><a name="[3b5]"></a>BUFFER_enlarge</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, buffer.o(i.BUFFER_enlarge))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BUFFER_enlarge &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMACSHA256_ComputeHash
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructSubscibeTypeVariableHeader
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishVariableHeader
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnectVariableHeader
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToUnsubscribePacket
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToSubscribePacket
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_ping
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_disconnect
</UL>

<P><STRONG><a name="[53b]"></a>BUFFER_length</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, buffer.o(i.BUFFER_length))
<BR><BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetByteArray
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishVariableHeader
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToUnsubscribePacket
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToSubscribePacket
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_bytesReceived
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
</UL>

<P><STRONG><a name="[3b6]"></a>BUFFER_new</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, buffer.o(i.BUFFER_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BUFFER_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decoder
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareheaderDataInfo
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_ping
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_disconnect
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
</UL>

<P><STRONG><a name="[3b7]"></a>BUFFER_pre_build</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, buffer.o(i.BUFFER_pre_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BUFFER_pre_build &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decoder
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareheaderDataInfo
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
</UL>

<P><STRONG><a name="[3b8]"></a>BUFFER_prepend</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, buffer.o(i.BUFFER_prepend))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BUFFER_prepend &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
</UL>

<P><STRONG><a name="[3c4]"></a>BUFFER_size</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, buffer.o(i.BUFFER_size))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encoder
</UL>

<P><STRONG><a name="[3bb]"></a>BUFFER_u_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, buffer.o(i.BUFFER_u_char))
<BR><BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetByteArray
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decoder
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMACSHA256_ComputeHash
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructSubscibeTypeVariableHeader
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishVariableHeader
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnectVariableHeader
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToUnsubscribePacket
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToSubscribePacket
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_ping
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_disconnect
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_bytesReceived
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
</UL>

<P><STRONG><a name="[3b9]"></a>Base64_Decoder</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, azure_base64.o(i.Base64_Decoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Base64_Decoder &rArr; BUFFER_pre_build &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64decode_len
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64decode
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_pre_build
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
</UL>

<P><STRONG><a name="[3c2]"></a>Base64_Encoder</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, azure_base64.o(i.Base64_Encoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Base64_Encoder &rArr; Base64_Encode_Internal &rArr; STRING_new_with_memory &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_size
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_content
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
</UL>

<P><STRONG><a name="[19c]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[7bd]"></a>CONSTBUFFER_Create</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, constbuffer.o(i.CONSTBUFFER_Create))
<BR><BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_twin_data_create
</UL>

<P><STRONG><a name="[3c9]"></a>CONSTBUFFER_Destroy</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, constbuffer.o(i.CONSTBUFFER_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CONSTBUFFER_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_twin_data_destroy
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_twin_data_create
</UL>

<P><STRONG><a name="[9a8]"></a>CONSTBUFFER_GetContent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, constbuffer.o(i.CONSTBUFFER_GetContent))
<BR><BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
</UL>

<P><STRONG><a name="[2a4]"></a>ChangeHWMode</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, azureclient_mqtt_tm.o(i.ChangeHWMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = ChangeHWMode &rArr; ReportState &rArr; CodeFirst_SendAsyncReported &rArr; Device_CommitTransaction_ReportedProperties &rArr; DataPublisher_CommitTransaction_ReportedProperties &rArr; DataMarshaller_SendData_ReportedProperties &rArr; json_serialize_to_string_pretty &rArr; json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportState
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStepHWPedometer
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWWakeUp
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWTilt
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWSingleTap
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWPedometer
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWOrientation6D
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWFreeFall
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWDoubleTap
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallbackStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[2a0]"></a>ChangeTelemetryInterval</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.ChangeTelemetryInterval))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = ChangeTelemetryInterval &rArr; ReportState &rArr; CodeFirst_SendAsyncReported &rArr; Device_CommitTransaction_ReportedProperties &rArr; DataPublisher_CommitTransaction_ReportedProperties &rArr; DataMarshaller_SendData_ReportedProperties &rArr; json_serialize_to_string_pretty &rArr; json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportState
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallbackStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[34a]"></a>CodeFirst_CreateDevice</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, codefirst.o(i.CodeFirst_CreateDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CodeFirst_CreateDevice &rArr; Device_Create &rArr; DataPublisher_Create &rArr; DataMarshaller_Create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddDeviceRef
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Destroy
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Create
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Init_impl
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
</UL>

<P><STRONG><a name="[3de]"></a>CodeFirst_Deinit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, codefirst.o(i.CodeFirst_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CodeFirst_Deinit &rArr; DestroyDevice &rArr; Device_Destroy &rArr; DataPublisher_Destroy &rArr; DataMarshaller_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyDevice
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serializer_deinit
</UL>

<P><STRONG><a name="[35c]"></a>CodeFirst_DestroyDevice</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, codefirst.o(i.CodeFirst_DestroyDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CodeFirst_DestroyDevice &rArr; Schema_DestroyIfUnused &rArr; Schema_Destroy &rArr; VECTOR_erase &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ReleaseDeviceRef
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_DestroyIfUnused
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinitializeDesiredProperties
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyDevice
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
</UL>

<P><STRONG><a name="[3e3]"></a>CodeFirst_ExecuteCommand</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, codefirst.o(i.CodeFirst_ExecuteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = CodeFirst_ExecuteCommand &rArr; Device_ExecuteCommand &rArr; CommandDecoder_ExecuteCommand &rArr; DecodeCommand &rArr; ScanActionPathAndExecuteAction &rArr; DecodeAndExecuteModelAction &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_ExecuteCommand
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveMessageCallback
</UL>

<P><STRONG><a name="[3e6]"></a>CodeFirst_ExecuteMethod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, codefirst.o(i.CodeFirst_ExecuteMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = CodeFirst_ExecuteMethod &rArr; Device_ExecuteMethod &rArr; CommandDecoder_ExecuteMethod &rArr; DecodeMethod &rArr; ScanMethodPathAndExecuteMethod &rArr; DecodeAndExecuteModelMethod &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_ExecuteMethod
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceMethodCallback
</UL>

<P><STRONG><a name="[3e8]"></a>CodeFirst_GetPrimitiveType</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, codefirst.o(i.CodeFirst_GetPrimitiveType))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CodeFirst_GetPrimitiveType &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
</UL>

<P><STRONG><a name="[3e9]"></a>CodeFirst_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, codefirst.o(i.CodeFirst_Init))
<BR><BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Init_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serializer_init
</UL>

<P><STRONG><a name="[1ea]"></a>CodeFirst_InvokeAction</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, codefirst.o(i.CodeFirst_InvokeAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CodeFirst_InvokeAction &rArr; FindChildModelInCodeFirstMetadata &rArr; FindModelInCodeFirstMetadata &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelName
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindModelInCodeFirstMetadata
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChildModelInCodeFirstMetadata
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> codefirst.o(i.CodeFirst_CreateDevice)
</UL>
<P><STRONG><a name="[1e9]"></a>CodeFirst_InvokeMethod</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, codefirst.o(i.CodeFirst_InvokeMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CodeFirst_InvokeMethod &rArr; FindChildModelInCodeFirstMetadata &rArr; FindModelInCodeFirstMetadata &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelName
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindModelInCodeFirstMetadata
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChildModelInCodeFirstMetadata
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> codefirst.o(i.CodeFirst_CreateDevice)
</UL>
<P><STRONG><a name="[348]"></a>CodeFirst_RegisterSchema</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, codefirst.o(i.CodeFirst_RegisterSchema))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CodeFirst_RegisterSchema &rArr; buildModelTypes &rArr; buildModel &rArr; Schema_AddModelDesiredProperty &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetSchemaByNamespace
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Create
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildStructTypes
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModelTypes
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
</UL>

<P><STRONG><a name="[3f2]"></a>CodeFirst_SendAsync</STRONG> (Thumb, 316 bytes, Stack size 128 bytes, codefirst.o(i.CodeFirst_SendAsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = CodeFirst_SendAsync &rArr; Device_EndTransaction &rArr; DataPublisher_EndTransaction &rArr; DataMarshaller_SendData &rArr; MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelName
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_StartTransaction
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_PublishTransacted
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_EndTransaction
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CancelTransaction
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceProperties
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindValue
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindDevice
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Init_impl
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSNSData
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send6DOrientationData
</UL>

<P><STRONG><a name="[3fd]"></a>CodeFirst_SendAsyncReported</STRONG> (Thumb, 318 bytes, Stack size 128 bytes, codefirst.o(i.CodeFirst_SendAsyncReported))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = CodeFirst_SendAsyncReported &rArr; Device_CommitTransaction_ReportedProperties &rArr; DataPublisher_CommitTransaction_ReportedProperties &rArr; DataMarshaller_SendData_ReportedProperties &rArr; json_serialize_to_string_pretty &rArr; json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelName
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_PublishTransacted_ReportedProperty
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_DestroyTransaction_ReportedProperties
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CreateTransaction_ReportedProperties
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CommitTransaction_ReportedProperties
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceReportedProperties
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindReportedProperty
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindDevice
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Init_impl
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportState
</UL>

<P><STRONG><a name="[404]"></a>CommandDecoder_Create</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, commanddecoder.o(i.CommandDecoder_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CommandDecoder_Create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Create
</UL>

<P><STRONG><a name="[405]"></a>CommandDecoder_Destroy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, commanddecoder.o(i.CommandDecoder_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CommandDecoder_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Destroy
</UL>

<P><STRONG><a name="[406]"></a>CommandDecoder_ExecuteCommand</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, commanddecoder.o(i.CommandDecoder_ExecuteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = CommandDecoder_ExecuteCommand &rArr; DecodeCommand &rArr; ScanActionPathAndExecuteAction &rArr; DecodeAndExecuteModelAction &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONDecoder_JSON_To_MultiTree
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCommand
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_ExecuteCommand
</UL>

<P><STRONG><a name="[409]"></a>CommandDecoder_ExecuteMethod</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, commanddecoder.o(i.CommandDecoder_ExecuteMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = CommandDecoder_ExecuteMethod &rArr; DecodeMethod &rArr; ScanMethodPathAndExecuteMethod &rArr; DecodeAndExecuteModelMethod &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONDecoder_JSON_To_MultiTree
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeMethod
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_ExecuteMethod
</UL>

<P><STRONG><a name="[40b]"></a>CreateAgentDataType_From_String</STRONG> (Thumb, 2240 bytes, Stack size 88 bytes, agenttypesystem.o(i.CreateAgentDataType_From_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = CreateAgentDataType_From_String &rArr; sscanff &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy_s
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_n
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanbase64b8
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanbase64b16
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_date
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanfu
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanfllu
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanflf
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanff
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanfdotllu
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanfd
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf3d2d
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf2d
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanOptionalMinusSign
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanMandatory2CapitalHexDigits
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAndReadNDigitsInt
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan4base64char
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tm_yday_and_tm_wday
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDecimal
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDate
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
</UL>

<P><STRONG><a name="[429]"></a>Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE</STRONG> (Thumb, 566 bytes, Stack size 32 bytes, agenttypesystem.o(i.Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE &rArr;  Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyHalfBakedComplexType
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
</UL>

<P><STRONG><a name="[42c]"></a>Create_AGENT_DATA_TYPE_from_EDM_DATE_TIME_OFFSET</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, agenttypesystem.o(i.Create_AGENT_DATA_TYPE_from_EDM_DATE_TIME_OFFSET))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Create_AGENT_DATA_TYPE_from_EDM_DATE_TIME_OFFSET &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDate
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_EDM_DATE_TIME_OFFSET
</UL>

<P><STRONG><a name="[767]"></a>Create_AGENT_DATA_TYPE_from_FLOAT</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, agenttypesystem.o(i.Create_AGENT_DATA_TYPE_from_FLOAT))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_float
</UL>

<P><STRONG><a name="[42d]"></a>Create_AGENT_DATA_TYPE_from_Members</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, agenttypesystem.o(i.Create_AGENT_DATA_TYPE_from_Members))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Create_AGENT_DATA_TYPE_from_Members &rArr; Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE &rArr;  Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isOneNameNULL
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;areThereTwoSameNames
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyHalfBakedComplexType
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
</UL>

<P><STRONG><a name="[768]"></a>Create_AGENT_DATA_TYPE_from_SINT32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, agenttypesystem.o(i.Create_AGENT_DATA_TYPE_from_SINT32))
<BR><BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_int
</UL>

<P><STRONG><a name="[430]"></a>Create_AGENT_DATA_TYPE_from_charz</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, agenttypesystem.o(i.Create_AGENT_DATA_TYPE_from_charz))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Create_AGENT_DATA_TYPE_from_charz &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_ascii_char_ptr
</UL>

<P><STRONG><a name="[431]"></a>Create_AGENT_DATA_TYPE_from_charz_no_quotes</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, agenttypesystem.o(i.Create_AGENT_DATA_TYPE_from_charz_no_quotes))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Create_AGENT_DATA_TYPE_from_charz_no_quotes &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_ascii_char_ptr_no_quotes
</UL>

<P><STRONG><a name="[411]"></a>Create_AGENT_DATA_TYPE_from_date</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, agenttypesystem.o(i.Create_AGENT_DATA_TYPE_from_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Create_AGENT_DATA_TYPE_from_date
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDate
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[518]"></a>DList_InitializeListHead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, doublylinkedlist.o(i.DList_InitializeListHead))
<BR><BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMsgComplete
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
</UL>

<P><STRONG><a name="[52a]"></a>DList_InsertTailList</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, doublylinkedlist.o(i.DList_InsertTailList))
<BR><BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendReportedState
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_DoWork
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_ProcessItem
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMsgComplete
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
</UL>

<P><STRONG><a name="[552]"></a>DList_IsListEmpty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, doublylinkedlist.o(i.DList_IsListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_GetSendStatus
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
</UL>

<P><STRONG><a name="[47f]"></a>DList_RemoveEntryList</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, doublylinkedlist.o(i.DList_RemoveEntryList))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_DoWork
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_ProcessItem
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_operation_complete_callback
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_ReportedStateComplete
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoTimeouts
</UL>

<P><STRONG><a name="[527]"></a>DList_RemoveHeadList</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, doublylinkedlist.o(i.DList_RemoveHeadList))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Destroy
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendComplete
</UL>

<P><STRONG><a name="[432]"></a>DataMarshaller_Create</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, datamarshaller.o(i.DataMarshaller_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DataMarshaller_Create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Create
</UL>

<P><STRONG><a name="[433]"></a>DataMarshaller_Destroy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, datamarshaller.o(i.DataMarshaller_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DataMarshaller_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Destroy
</UL>

<P><STRONG><a name="[434]"></a>DataMarshaller_SendData</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, datamarshaller.o(i.DataMarshaller_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = DataMarshaller_SendData &rArr; MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_length
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Create
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_EndTransaction
</UL>

<P><STRONG><a name="[436]"></a>DataMarshaller_SendData_ReportedProperties</STRONG> (Thumb, 274 bytes, Stack size 64 bytes, datamarshaller.o(i.DataMarshaller_SendData_ReportedProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = DataMarshaller_SendData_ReportedProperties &rArr; json_serialize_to_string_pretty &rArr; json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_object
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_string_pretty
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_string
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CommitTransaction_ReportedProperties
</UL>

<P><STRONG><a name="[43f]"></a>DataPublisher_CancelTransaction</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, datapublisher.o(i.DataPublisher_CancelTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DataPublisher_CancelTransaction &rArr; Destroy_AGENT_DATA_TYPE &rArr;  Destroy_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_EndTransaction
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CancelTransaction
</UL>

<P><STRONG><a name="[440]"></a>DataPublisher_CommitTransaction_ReportedProperties</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, datapublisher.o(i.DataPublisher_CommitTransaction_ReportedProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = DataPublisher_CommitTransaction_ReportedProperties &rArr; DataMarshaller_SendData_ReportedProperties &rArr; json_serialize_to_string_pretty &rArr; json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CommitTransaction_ReportedProperties
</UL>

<P><STRONG><a name="[441]"></a>DataPublisher_Create</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, datapublisher.o(i.DataPublisher_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DataPublisher_Create &rArr; DataMarshaller_Create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_Create
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Create
</UL>

<P><STRONG><a name="[442]"></a>DataPublisher_CreateTransaction_ReportedProperties</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, datapublisher.o(i.DataPublisher_CreateTransaction_ReportedProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DataPublisher_CreateTransaction_ReportedProperties &rArr; VECTOR_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_create
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_CreateTransaction_ReportedProperties
</UL>

<P><STRONG><a name="[443]"></a>DataPublisher_Destroy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, datapublisher.o(i.DataPublisher_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DataPublisher_Destroy &rArr; DataMarshaller_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_Destroy
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Destroy
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Create
</UL>

<P><STRONG><a name="[444]"></a>DataPublisher_DestroyTransaction_ReportedProperties</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, datapublisher.o(i.DataPublisher_DestroyTransaction_ReportedProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DataPublisher_DestroyTransaction_ReportedProperties &rArr; Destroy_AGENT_DATA_TYPE &rArr;  Destroy_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_DestroyTransaction_ReportedProperties
</UL>

<P><STRONG><a name="[446]"></a>DataPublisher_EndTransaction</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, datapublisher.o(i.DataPublisher_EndTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = DataPublisher_EndTransaction &rArr; DataMarshaller_SendData &rArr; MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CancelTransaction
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_EndTransaction
</UL>

<P><STRONG><a name="[447]"></a>DataPublisher_PublishTransacted</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, datapublisher.o(i.DataPublisher_PublishTransacted))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DataPublisher_PublishTransacted &rArr; Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE &rArr;  Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelPropertyByPathExists
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_PublishTransacted
</UL>

<P><STRONG><a name="[449]"></a>DataPublisher_PublishTransacted_ReportedProperty</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, datapublisher.o(i.DataPublisher_PublishTransacted_ReportedProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DataPublisher_PublishTransacted_ReportedProperty &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelReportedPropertyByPathExists
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_PublishTransacted_ReportedProperty
</UL>

<P><STRONG><a name="[44d]"></a>DataPublisher_StartTransaction</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, datapublisher.o(i.DataPublisher_StartTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DataPublisher_StartTransaction &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_StartTransaction
</UL>

<P><STRONG><a name="[19f]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3fa]"></a>Destroy_AGENT_DATA_TYPE</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, agenttypesystem.o(i.Destroy_AGENT_DATA_TYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + In Cycle
<LI>Call Chain = Destroy_AGENT_DATA_TYPE &rArr;  Destroy_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_DestroyTransaction_ReportedProperties
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CancelTransaction
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceReportedProperties
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceProperties
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyHalfBakedComplexType
</UL>

<P><STRONG><a name="[3fb]"></a>Device_CancelTransaction</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, iotdevice.o(i.Device_CancelTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Device_CancelTransaction &rArr; DataPublisher_CancelTransaction &rArr; Destroy_AGENT_DATA_TYPE &rArr;  Destroy_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CancelTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
</UL>

<P><STRONG><a name="[403]"></a>Device_CommitTransaction_ReportedProperties</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iotdevice.o(i.Device_CommitTransaction_ReportedProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = Device_CommitTransaction_ReportedProperties &rArr; DataPublisher_CommitTransaction_ReportedProperties &rArr; DataMarshaller_SendData_ReportedProperties &rArr; json_serialize_to_string_pretty &rArr; json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CommitTransaction_ReportedProperties
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
</UL>

<P><STRONG><a name="[3db]"></a>Device_Create</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, iotdevice.o(i.Device_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Device_Create &rArr; DataPublisher_Create &rArr; DataMarshaller_Create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Destroy
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Create
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_Create
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
</UL>

<P><STRONG><a name="[3fe]"></a>Device_CreateTransaction_ReportedProperties</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iotdevice.o(i.Device_CreateTransaction_ReportedProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Device_CreateTransaction_ReportedProperties &rArr; DataPublisher_CreateTransaction_ReportedProperties &rArr; VECTOR_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CreateTransaction_ReportedProperties
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
</UL>

<P><STRONG><a name="[3dd]"></a>Device_Destroy</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iotdevice.o(i.Device_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Device_Destroy &rArr; DataPublisher_Destroy &rArr; DataMarshaller_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Destroy
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_Destroy
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyDevice
</UL>

<P><STRONG><a name="[402]"></a>Device_DestroyTransaction_ReportedProperties</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iotdevice.o(i.Device_DestroyTransaction_ReportedProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Device_DestroyTransaction_ReportedProperties &rArr; DataPublisher_DestroyTransaction_ReportedProperties &rArr; Destroy_AGENT_DATA_TYPE &rArr;  Destroy_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_DestroyTransaction_ReportedProperties
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
</UL>

<P><STRONG><a name="[3fc]"></a>Device_EndTransaction</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iotdevice.o(i.Device_EndTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Device_EndTransaction &rArr; DataPublisher_EndTransaction &rArr; DataMarshaller_SendData &rArr; MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_EndTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
</UL>

<P><STRONG><a name="[3e5]"></a>Device_ExecuteCommand</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, iotdevice.o(i.Device_ExecuteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = Device_ExecuteCommand &rArr; CommandDecoder_ExecuteCommand &rArr; DecodeCommand &rArr; ScanActionPathAndExecuteAction &rArr; DecodeAndExecuteModelAction &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_ExecuteCommand
</UL>

<P><STRONG><a name="[3e7]"></a>Device_ExecuteMethod</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, iotdevice.o(i.Device_ExecuteMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = Device_ExecuteMethod &rArr; CommandDecoder_ExecuteMethod &rArr; DecodeMethod &rArr; ScanMethodPathAndExecuteMethod &rArr; DecodeAndExecuteModelMethod &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteMethod
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_ExecuteMethod
</UL>

<P><STRONG><a name="[3f9]"></a>Device_PublishTransacted</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iotdevice.o(i.Device_PublishTransacted))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Device_PublishTransacted &rArr; DataPublisher_PublishTransacted &rArr; Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE &rArr;  Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceProperties
</UL>

<P><STRONG><a name="[401]"></a>Device_PublishTransacted_ReportedProperty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iotdevice.o(i.Device_PublishTransacted_ReportedProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Device_PublishTransacted_ReportedProperty &rArr; DataPublisher_PublishTransacted_ReportedProperty &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceReportedProperties
</UL>

<P><STRONG><a name="[3f3]"></a>Device_StartTransaction</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iotdevice.o(i.Device_StartTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Device_StartTransaction &rArr; DataPublisher_StartTransaction &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_StartTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
</UL>

<P><STRONG><a name="[472]"></a>DisableHWDoubleTap</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hwadvancefeatures.o(i.DisableHWDoubleTap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DisableHWDoubleTap &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
</UL>

<P><STRONG><a name="[473]"></a>DisableHWFeatures</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, hwadvancefeatures.o(i.DisableHWFeatures))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DisableHWFeatures &rArr; DisableHWTilt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWTilt
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWSingleTap
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWPedometer
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWOrientation6D
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFreeFall
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWDoubleTap
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWWakeUp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWWakeUp
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWTilt
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWSingleTap
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWPedometer
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWOrientation6D
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWFreeFall
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWDoubleTap
</UL>

<P><STRONG><a name="[475]"></a>DisableHWFreeFall</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hwadvancefeatures.o(i.DisableHWFreeFall))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DisableHWFreeFall &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
</UL>

<P><STRONG><a name="[479]"></a>DisableHWOrientation6D</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hwadvancefeatures.o(i.DisableHWOrientation6D))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DisableHWOrientation6D &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
</UL>

<P><STRONG><a name="[474]"></a>DisableHWPedometer</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hwadvancefeatures.o(i.DisableHWPedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DisableHWPedometer &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
</UL>

<P><STRONG><a name="[476]"></a>DisableHWSingleTap</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hwadvancefeatures.o(i.DisableHWSingleTap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DisableHWSingleTap &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
</UL>

<P><STRONG><a name="[478]"></a>DisableHWTilt</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hwadvancefeatures.o(i.DisableHWTilt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DisableHWTilt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
</UL>

<P><STRONG><a name="[477]"></a>DisableHWWakeUp</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hwadvancefeatures.o(i.DisableHWWakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DisableHWWakeUp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
</UL>

<P><STRONG><a name="[1c5]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1ac]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b5]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3d5]"></a>EnableHWDoubleTap</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, hwadvancefeatures.o(i.EnableHWDoubleTap))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EnableHWDoubleTap &rArr; DisableHWFeatures &rArr; DisableHWTilt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Set_Tap_Threshold_Ext_IKS01A2
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Set_Tap_Threshold_Ext_IKS01A1
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeHWMode
</UL>

<P><STRONG><a name="[3d3]"></a>EnableHWFreeFall</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, hwadvancefeatures.o(i.EnableHWFreeFall))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EnableHWFreeFall &rArr; DisableHWFeatures &rArr; DisableHWTilt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Set_Free_Fall_Threshold_Ext_IKS01A2
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Set_Free_Fall_Threshold_Ext_IKS01A1
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeHWMode
</UL>

<P><STRONG><a name="[3d8]"></a>EnableHWOrientation6D</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hwadvancefeatures.o(i.EnableHWOrientation6D))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EnableHWOrientation6D &rArr; DisableHWFeatures &rArr; DisableHWTilt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeHWMode
</UL>

<P><STRONG><a name="[3d1]"></a>EnableHWPedometer</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hwadvancefeatures.o(i.EnableHWPedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EnableHWPedometer &rArr; DisableHWFeatures &rArr; DisableHWTilt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeHWMode
</UL>

<P><STRONG><a name="[3d4]"></a>EnableHWSingleTap</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hwadvancefeatures.o(i.EnableHWSingleTap))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EnableHWSingleTap &rArr; DisableHWFeatures &rArr; DisableHWTilt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeHWMode
</UL>

<P><STRONG><a name="[3d7]"></a>EnableHWTilt</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hwadvancefeatures.o(i.EnableHWTilt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EnableHWTilt &rArr; DisableHWFeatures &rArr; DisableHWTilt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeHWMode
</UL>

<P><STRONG><a name="[3d6]"></a>EnableHWWakeUp</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hwadvancefeatures.o(i.EnableHWWakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EnableHWWakeUp &rArr; DisableHWFeatures &rArr; DisableHWTilt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeHWMode
</UL>

<P><STRONG><a name="[486]"></a>EraseMetaDataManager</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, metadatamanager.o(i.EraseMetaDataManager))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EraseMetaDataManager &rArr; UserFunctionForErasingFlash &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFunctionForErasingFlash
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMetaDataManager
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[722]"></a>FIRMWARE_UPDATE_STATUSStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.FIRMWARE_UPDATE_STATUSStrings))
<BR><BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportState
</UL>

<P><STRONG><a name="[496]"></a>FLASH_Erase_Sector</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_Erase_Sector))
<BR><BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[497]"></a>FLASH_FlushCaches</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[488]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[490]"></a>GET_BG96_mac</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, bg96_interface.o(i.GET_BG96_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GET_BG96_mac &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[492]"></a>GetHWOrientation6D</STRONG> (Thumb, 406 bytes, Stack size 40 bytes, hwadvancefeatures.o(i.GetHWOrientation6D))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetHWOrientation6D &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMSCallback
</UL>

<P><STRONG><a name="[3d2]"></a>GetStepHWPedometer</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hwadvancefeatures.o(i.GetStepHWPedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetStepHWPedometer &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMSCallback
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeHWMode
</UL>

<P><STRONG><a name="[350]"></a>HAL_Delay</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, platform_stm32cube_nucleof401re.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadAPI_Sleep
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_WaitMs
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureExit
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitAllTheMessages
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Error
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_Error_Handler
</UL>

<P><STRONG><a name="[494]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, stm32f4xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFunctionForErasingFlash
</UL>

<P><STRONG><a name="[774]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFunctionForSavingFlash
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFunctionForErasingFlash
</UL>

<P><STRONG><a name="[498]"></a>HAL_FLASH_Program</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Word
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Byte
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFunctionForSavingFlash
</UL>

<P><STRONG><a name="[773]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFunctionForSavingFlash
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFunctionForErasingFlash
</UL>

<P><STRONG><a name="[4de]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 244 bytes, Stack size 36 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[49d]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, platform_stm32cube_nucleof401re.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[481]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[363]"></a>HAL_GPIO_Init</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_Configuration
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GPOInit
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Sensor_IO_ITConfig
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig_IKS01A1
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Sensor_IO_ITConfig
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig_IKS01A2
</UL>

<P><STRONG><a name="[6e9]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GPO_ReadPin
</UL>

<P><STRONG><a name="[3a1]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>

<P><STRONG><a name="[362]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_Configuration
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_vbat_on
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_vbat_off
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_reset_on
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_reset_off
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_pwr_key_on
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_pwr_key_off
</UL>

<P><STRONG><a name="[9a3]"></a>HAL_GetHalVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetHalVersion))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[489]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GetTick
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[49e]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Error
</UL>

<P><STRONG><a name="[501]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Init
</UL>

<P><STRONG><a name="[4a0]"></a>HAL_I2C_Init</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Init
</UL>

<P><STRONG><a name="[4a3]"></a>HAL_I2C_IsDeviceReady</STRONG> (Thumb, 358 bytes, Stack size 56 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_IsDeviceReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
</UL>

<P><STRONG><a name="[4a5]"></a>HAL_I2C_Master_Receive</STRONG> (Thumb, 668 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Master_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_Master_Receive &rArr; I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestRead
</UL>
<BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cresponse
</UL>

<P><STRONG><a name="[4a8]"></a>HAL_I2C_Master_Transmit</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Master_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
</UL>

<P><STRONG><a name="[4ac]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 666 bytes, Stack size 64 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_ReadData
</UL>

<P><STRONG><a name="[4ae]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 342 bytes, Stack size 64 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_WriteData
</UL>

<P><STRONG><a name="[49f]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[4a1]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[760]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[4b0]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[4b2]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[4b3]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[37b]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_recv
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_receive
</UL>

<P><STRONG><a name="[37c]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Sensor_IO_ITConfig
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig_IKS01A1
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Sensor_IO_ITConfig
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig_IKS01A2
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_recv
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_receive
</UL>

<P><STRONG><a name="[3b0]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Sensor_IO_ITConfig
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig_IKS01A1
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Sensor_IO_ITConfig
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig_IKS01A2
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[4b1]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[35a]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
</UL>

<P><STRONG><a name="[4b6]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[4b7]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[4b9]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[4a2]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[4ba]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[4b8]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[4bb]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 890 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[9a6]"></a>HAL_RTCEx_BKUPRead</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPRead))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[766]"></a>HAL_RTCEx_BKUPWrite</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPWrite))
<BR><BR>[Called By]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemSetSystemTime
</UL>

<P><STRONG><a name="[4bc]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalendarShow
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
</UL>

<P><STRONG><a name="[4be]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalendarShow
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
</UL>

<P><STRONG><a name="[4bf]"></a>HAL_RTC_Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRTC
</UL>

<P><STRONG><a name="[4c0]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 54 bytes, Stack size 80 bytes, stm32f4xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[4c2]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemSetSystemTime
</UL>

<P><STRONG><a name="[4c5]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemSetSystemTime
</UL>

<P><STRONG><a name="[4c4]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[4b4]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[4cd]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[4cf]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[368]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_Timer_Config
</UL>

<P><STRONG><a name="[4c6]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[369]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_Timer_Config
</UL>

<P><STRONG><a name="[4c9]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[4c8]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[4d0]"></a>HAL_TIM_OC_ConfigChannel</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_OC_ConfigChannel &rArr; TIM_OC4_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimers
</UL>

<P><STRONG><a name="[4ca]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, platform_stm32cube_nucleof401re.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_OC_DelayElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ReadCapturedValue
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[4d6]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_OC_Init &rArr; HAL_TIM_OC_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimers
</UL>

<P><STRONG><a name="[4d7]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_OC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_OC_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[4d8]"></a>HAL_TIM_OC_Start_IT</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_OC_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer1
</UL>

<P><STRONG><a name="[4da]"></a>HAL_TIM_OC_Stop_IT</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_Stop_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_OC_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopTimer1
</UL>

<P><STRONG><a name="[4cb]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[4cc]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[4d5]"></a>HAL_TIM_ReadCapturedValue</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ReadCapturedValue))
<BR><BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
</UL>

<P><STRONG><a name="[4ce]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[364]"></a>HAL_UART_DeInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_Configuration
</UL>

<P><STRONG><a name="[76a]"></a>HAL_UART_GetState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Global_Init
</UL>

<P><STRONG><a name="[366]"></a>HAL_UART_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Global_Init
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_Configuration
</UL>

<P><STRONG><a name="[4db]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[4dc]"></a>HAL_UART_MspInit</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[4df]"></a>HAL_UART_Receive</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartReceiveChar
</UL>

<P><STRONG><a name="[390]"></a>HAL_UART_Transmit</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendChar
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartReceiveChar
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_uart_send
</UL>

<P><STRONG><a name="[4e1]"></a>HMACSHA256_ComputeHash</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, hmacsha256.o(i.HMACSHA256_ComputeHash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
</UL>

<P><STRONG><a name="[4e3]"></a>HTS221_Activate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_Activate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Enable
</UL>

<P><STRONG><a name="[4e8]"></a>HTS221_DeActivate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_DeActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Disable
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>

<P><STRONG><a name="[4e9]"></a>HTS221_Get_DataStatus</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Get_DataStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_Get_DataStatus &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_DRDY_Status
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_DRDY_Status
</UL>

<P><STRONG><a name="[4ea]"></a>HTS221_Get_DeviceID</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hts221_driver.o(i.HTS221_Get_DeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_WhoAmI
</UL>

<P><STRONG><a name="[4ec]"></a>HTS221_Get_Humidity</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, hts221_driver.o(i.HTS221_Get_Humidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HTS221_Get_Humidity &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Hum
</UL>

<P><STRONG><a name="[4ee]"></a>HTS221_Get_Odr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Get_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_Get_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_ODR
</UL>

<P><STRONG><a name="[4f0]"></a>HTS221_Get_Temperature</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, hts221_driver.o(i.HTS221_Get_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HTS221_Get_Temperature &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Temp
</UL>

<P><STRONG><a name="[4e4]"></a>HTS221_ReadReg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hts221_driver.o(i.HTS221_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Read_Reg
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_BduMode
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Temperature
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Odr
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Humidity
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DeviceID
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DataStatus
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Activate
</UL>

<P><STRONG><a name="[4f8]"></a>HTS221_Set_BduMode</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Set_BduMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_Set_BduMode &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_assert_failed
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>

<P><STRONG><a name="[4fb]"></a>HTS221_Set_Odr</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Set_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_assert_failed
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR_Value
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
</UL>

<P><STRONG><a name="[4e5]"></a>HTS221_WriteReg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hts221_driver.o(i.HTS221_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Write_Reg
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_BduMode
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Activate
</UL>

<P><STRONG><a name="[4fa]"></a>HTS221_assert_failed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hts221_driver.o(i.HTS221_assert_failed))
<BR><BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_assert_failed
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_BduMode
</UL>

<P><STRONG><a name="[19a]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4fe]"></a>I2C_Global_Error</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_i2c.o(i.I2C_Global_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2C_Global_Error &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Init
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_WriteData
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_ReadData
</UL>

<P><STRONG><a name="[500]"></a>I2C_Global_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_i2c.o(i.I2C_Global_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Error
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A2
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Init
</UL>

<P><STRONG><a name="[75b]"></a>IOTHUB_CLIENT_CONFIRMATION_RESULTStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, iothub_client_ll.o(i.IOTHUB_CLIENT_CONFIRMATION_RESULTStrings))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConfirmationCallback
</UL>

<P><STRONG><a name="[9a4]"></a>InitHWFeatures</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hwadvancefeatures.o(i.InitHWFeatures))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[504]"></a>InitMetaDataManager</STRONG> (Thumb, 978 bytes, Stack size 72 bytes, metadatamanager.o(i.InitMetaDataManager))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = InitMetaDataManager &rArr; EraseMetaDataManager &rArr; UserFunctionForErasingFlash &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMetaDataManager
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseMetaDataManager
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReseMetaDataManager
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReCallMetaDataManager
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOut_MDM_LicenseStatus
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOut_MDM_GMDStatus
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[51c]"></a>IoTHubClient_Auth_Create</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IoTHubClient_Auth_Create &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
</UL>

<P><STRONG><a name="[51d]"></a>IoTHubClient_Auth_Destroy</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IoTHubClient_Auth_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Destroy
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
</UL>

<P><STRONG><a name="[55c]"></a>IoTHubClient_Auth_Get_Credential_Type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Get_Credential_Type))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Register
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
</UL>

<P><STRONG><a name="[55d]"></a>IoTHubClient_Auth_Get_DeviceKey</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Get_DeviceKey))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Register
</UL>

<P><STRONG><a name="[51e]"></a>IoTHubClient_Auth_Get_SasToken</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Get_SasToken))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = IoTHubClient_Auth_Get_SasToken &rArr; SASToken_CreateString &rArr; construct_sas_token &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_seconds_since_epoch
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_CreateString
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
</UL>

<P><STRONG><a name="[521]"></a>IoTHubClient_Auth_Is_SasToken_Valid</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Is_SasToken_Valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = IoTHubClient_Auth_Is_SasToken_Valid &rArr; SASToken_Validate &rArr; getExpiryValue &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
</UL>

<P><STRONG><a name="[55f]"></a>IoTHubClient_Auth_Set_x509_Type</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, iothub_client_authorization.o(i.IoTHubClient_Auth_Set_x509_Type))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
</UL>

<P><STRONG><a name="[511]"></a>IoTHubClient_LL_ConnectionStatusCallBack</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iothub_client_ll.o(i.IoTHubClient_LL_ConnectionStatusCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IoTHubClient_LL_ConnectionStatusCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_operation_complete_callback
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_error_callback
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
</UL>

<P><STRONG><a name="[346]"></a>IoTHubClient_LL_CreateFromConnectionString</STRONG> (Thumb, 654 bytes, Stack size 72 bytes, iothub_client_ll.o(i.IoTHubClient_LL_CreateFromConnectionString))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = IoTHubClient_LL_CreateFromConnectionString &rArr; initialize_iothub_client &rArr; make_product_info &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_destroy
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
</UL>

<P><STRONG><a name="[35d]"></a>IoTHubClient_LL_Destroy</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, iothub_client_ll.o(i.IoTHubClient_LL_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IoTHubClient_LL_Destroy &rArr; IoTHubMessage_Destroy &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_destroy
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveHeadList
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Destroy
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_twin_data_destroy
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
</UL>

<P><STRONG><a name="[529]"></a>IoTHubClient_LL_DeviceMethodComplete</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, iothub_client_ll.o(i.IoTHubClient_LL_DeviceMethodComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IoTHubClient_LL_DeviceMethodComplete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[34f]"></a>IoTHubClient_LL_DoWork</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, iothub_client_ll.o(i.IoTHubClient_LL_DoWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = IoTHubClient_LL_DoWork &rArr; DoTimeouts &rArr; IoTHubMessage_Destroy &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_twin_data_destroy
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoTimeouts
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitAllTheMessages
</UL>

<P><STRONG><a name="[52b]"></a>IoTHubClient_LL_GetOption</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, iothub_client_ll.o(i.IoTHubClient_LL_GetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IoTHubClient_LL_GetOption &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
</UL>

<P><STRONG><a name="[52c]"></a>IoTHubClient_LL_MessageCallback</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, iothub_client_ll.o(i.IoTHubClient_LL_MessageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IoTHubClient_LL_MessageCallback &rArr; get_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[52d]"></a>IoTHubClient_LL_ReportedStateComplete</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, iothub_client_ll.o(i.IoTHubClient_LL_ReportedStateComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IoTHubClient_LL_ReportedStateComplete &rArr; device_twin_data_destroy &rArr; CONSTBUFFER_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_twin_data_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[98e]"></a>IoTHubClient_LL_RetrievePropertyComplete</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, iothub_client_ll.o(i.IoTHubClient_LL_RetrievePropertyComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IoTHubClient_LL_RetrievePropertyComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[52e]"></a>IoTHubClient_LL_SendComplete</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SendComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IoTHubClient_LL_SendComplete &rArr; IoTHubMessage_Destroy &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveHeadList
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMsgComplete
</UL>

<P><STRONG><a name="[52f]"></a>IoTHubClient_LL_SendEventAsync</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SendEventAsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IoTHubClient_LL_SendEventAsync &rArr; IoTHubMessage_Clone &rArr; Map_Clone &rArr; Map_CloneVector &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attach_ms_timesOutAfter
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSNSData
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send6DOrientationData
</UL>

<P><STRONG><a name="[532]"></a>IoTHubClient_LL_SendReportedState</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SendReportedState))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = IoTHubClient_LL_SendReportedState &rArr; dev_twin_data_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_item_id
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_twin_data_destroy
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_twin_data_create
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportState
</UL>

<P><STRONG><a name="[34d]"></a>IoTHubClient_LL_SetDeviceMethodCallback</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SetDeviceMethodCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IoTHubClient_LL_SetDeviceMethodCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
</UL>

<P><STRONG><a name="[34e]"></a>IoTHubClient_LL_SetDeviceTwinCallback</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SetDeviceTwinCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IoTHubClient_LL_SetDeviceTwinCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
</UL>

<P><STRONG><a name="[34c]"></a>IoTHubClient_LL_SetMessageCallback</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SetMessageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IoTHubClient_LL_SetMessageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
</UL>

<P><STRONG><a name="[347]"></a>IoTHubClient_LL_SetOption</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = IoTHubClient_LL_SetOption &rArr; make_product_info &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_product_info
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
</UL>

<P><STRONG><a name="[811]"></a>IoTHubClient_LL_SetRetryPolicy</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, iothub_client_ll.o(i.IoTHubClient_LL_SetRetryPolicy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IoTHubClient_LL_SetRetryPolicy
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
</UL>

<P><STRONG><a name="[531]"></a>IoTHubMessage_Clone</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, iothub_message.o(i.IoTHubMessage_Clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IoTHubMessage_Clone &rArr; Map_Clone &rArr; Map_CloneVector &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Clone
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_clone
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
</UL>

<P><STRONG><a name="[537]"></a>IoTHubMessage_CreateFromByteArray</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, iothub_message.o(i.IoTHubMessage_CreateFromByteArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = IoTHubMessage_CreateFromByteArray &rArr; BUFFER_create &rArr; BUFFER_safemalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Create
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_create
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSNSData
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send6DOrientationData
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[480]"></a>IoTHubMessage_Destroy</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, iothub_message.o(i.IoTHubMessage_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IoTHubMessage_Destroy &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Destroy
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Destroy
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSNSData
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send6DOrientationData
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SendMessageDisposition
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendComplete
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoTimeouts
</UL>

<P><STRONG><a name="[53a]"></a>IoTHubMessage_GetByteArray</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, iothub_message.o(i.IoTHubMessage_GetByteArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IoTHubMessage_GetByteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveMessageCallback
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveMessagePayload
</UL>

<P><STRONG><a name="[723]"></a>IoTHubMessage_GetContentType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iothub_message.o(i.IoTHubMessage_GetContentType))
<BR><BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveMessagePayload
</UL>

<P><STRONG><a name="[790]"></a>IoTHubMessage_GetCorrelationId</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iothub_message.o(i.IoTHubMessage_GetCorrelationId))
<BR><BR>[Called By]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
</UL>

<P><STRONG><a name="[791]"></a>IoTHubMessage_GetMessageId</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iothub_message.o(i.IoTHubMessage_GetMessageId))
<BR><BR>[Called By]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
</UL>

<P><STRONG><a name="[53c]"></a>IoTHubMessage_GetString</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, iothub_message.o(i.IoTHubMessage_GetString))
<BR><BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveMessagePayload
</UL>

<P><STRONG><a name="[75a]"></a>IoTHubMessage_Properties</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iothub_message.o(i.IoTHubMessage_Properties))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSNSData
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send6DOrientationData
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
</UL>

<P><STRONG><a name="[53d]"></a>IoTHubMessage_SetCorrelationId</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, iothub_message.o(i.IoTHubMessage_SetCorrelationId))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IoTHubMessage_SetCorrelationId &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
</UL>

<P><STRONG><a name="[53e]"></a>IoTHubMessage_SetMessageId</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, iothub_message.o(i.IoTHubMessage_SetMessageId))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IoTHubMessage_SetMessageId &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
</UL>

<P><STRONG><a name="[53f]"></a>IoTHubTransport_MQTT_Common_Create</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = IoTHubTransport_MQTT_Common_Create &rArr; InitializeTransportHandleData &rArr; buildConfigForUsername &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Create
</UL>

<P><STRONG><a name="[540]"></a>IoTHubTransport_MQTT_Common_Destroy</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = IoTHubTransport_MQTT_Common_Destroy &rArr; DisconnectFromClient &rArr; mqtt_client_disconnect &rArr; sendPacketItem &rArr; logOutgoingingRawTrace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_destroy
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveHeadList
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_IsListEmpty
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_deinit
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMsgComplete
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_proxy_data
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectFromClient
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyRetryLogic
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_ReportedStateComplete
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Destroy
</UL>

<P><STRONG><a name="[541]"></a>IoTHubTransport_MQTT_Common_DeviceMethod_Response</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_DeviceMethod_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = IoTHubTransport_MQTT_Common_DeviceMethod_Response &rArr; publish_device_method_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_DeviceMethod_Response
</UL>

<P><STRONG><a name="[542]"></a>IoTHubTransport_MQTT_Common_DoWork</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_DoWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992<LI>Call Chain = IoTHubTransport_MQTT_Common_DoWork &rArr; InitializeConnection &rArr; SendMqttConnectMsg &rArr; IoTHubClient_Auth_Get_SasToken &rArr; SASToken_CreateString &rArr; construct_sas_token &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMsgComplete
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packet_id
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubscribeToMqttProtocol
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetrieveMessagePayload
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_DoWork
</UL>

<P><STRONG><a name="[543]"></a>IoTHubTransport_MQTT_Common_GetHostname</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_GetHostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IoTHubTransport_MQTT_Common_GetHostname &rArr; STRING_clone &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_GetHostname
</UL>

<P><STRONG><a name="[544]"></a>IoTHubTransport_MQTT_Common_GetSendStatus</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_GetSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IoTHubTransport_MQTT_Common_GetSendStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_IsListEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_GetSendStatus
</UL>

<P><STRONG><a name="[545]"></a>IoTHubTransport_MQTT_Common_ProcessItem</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_ProcessItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = IoTHubTransport_MQTT_Common_ProcessItem &rArr; publish_device_twin_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_ProcessItem
</UL>

<P><STRONG><a name="[546]"></a>IoTHubTransport_MQTT_Common_Register</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IoTHubTransport_MQTT_Common_Register &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_DeviceKey
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_Credential_Type
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Register
</UL>

<P><STRONG><a name="[547]"></a>IoTHubTransport_MQTT_Common_SendMessageDisposition</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_SendMessageDisposition))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IoTHubTransport_MQTT_Common_SendMessageDisposition &rArr; IoTHubMessage_Destroy &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_SendMessageDisposition
</UL>

<P><STRONG><a name="[548]"></a>IoTHubTransport_MQTT_Common_SetOption</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_SetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = IoTHubTransport_MQTT_Common_SetOption &rArr; DisconnectFromClient &rArr; mqtt_client_disconnect &rArr; sendPacketItem &rArr; logOutgoingingRawTrace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_setoption
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Set_x509_Type
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_Credential_Type
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_set_trace
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_proxy_data
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTransportProviderIfNecessary
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectFromClient
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_SetOption
</UL>

<P><STRONG><a name="[549]"></a>IoTHubTransport_MQTT_Common_SetRetryPolicy</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_SetRetryPolicy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IoTHubTransport_MQTT_Common_SetRetryPolicy &rArr; CreateRetryLogic &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyRetryLogic
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRetryLogic
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_SetRetryPolicy
</UL>

<P><STRONG><a name="[54a]"></a>IoTHubTransport_MQTT_Common_Subscribe</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = IoTHubTransport_MQTT_Common_Subscribe &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Subscribe
</UL>

<P><STRONG><a name="[54b]"></a>IoTHubTransport_MQTT_Common_Subscribe_DeviceMethod</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Subscribe_DeviceMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IoTHubTransport_MQTT_Common_Subscribe_DeviceMethod &rArr; STRING_construct &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Subscribe_DeviceMethod
</UL>

<P><STRONG><a name="[54c]"></a>IoTHubTransport_MQTT_Common_Subscribe_DeviceTwin</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Subscribe_DeviceTwin))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IoTHubTransport_MQTT_Common_Subscribe_DeviceTwin &rArr; STRING_construct &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Subscribe_DeviceTwin
</UL>

<P><STRONG><a name="[54d]"></a>IoTHubTransport_MQTT_Common_Unregister</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Unregister))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Unregister
</UL>

<P><STRONG><a name="[54e]"></a>IoTHubTransport_MQTT_Common_Unsubscribe</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Unsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = IoTHubTransport_MQTT_Common_Unsubscribe &rArr; mqtt_client_unsubscribe &rArr; mqtt_codec_unsubscribe &rArr; addListItemsToUnsubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Unsubscribe
</UL>

<P><STRONG><a name="[54f]"></a>IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod &rArr; mqtt_client_unsubscribe &rArr; mqtt_codec_unsubscribe &rArr; addListItemsToUnsubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Unsubscribe_DeviceMethod
</UL>

<P><STRONG><a name="[550]"></a>IoTHubTransport_MQTT_Common_Unsubscribe_DeviceTwin</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, iothubtransport_mqtt_common.o(i.IoTHubTransport_MQTT_Common_Unsubscribe_DeviceTwin))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IoTHubTransport_MQTT_Common_Unsubscribe_DeviceTwin &rArr; STRING_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransportMqtt_Unsubscribe_DeviceTwin
</UL>

<P><STRONG><a name="[407]"></a>JSONDecoder_JSON_To_MultiTree</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, jsondecoder.o(i.JSONDecoder_JSON_To_MultiTree))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = JSONDecoder_JSON_To_MultiTree &rArr; ParseJSON &rArr; ParseObjectOrArray &rArr; ParseObject &rArr; ParseNameValuePair &rArr; ParseValue &rArr;  ParseObject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Create
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseJSON
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallbackStatus
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteMethod
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
</UL>

<P><STRONG><a name="[33a]"></a>JSONEncoder_EncodeTree</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, jsonencoder.o(i.JSONEncoder_EncodeTree))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + In Cycle
<LI>Call Chain = JSONEncoder_EncodeTree &rArr;  JSONEncoder_EncodeTree (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetValue
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetName
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildCount
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChild
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[567]"></a>LIS3MDL_MAG_Get_Magnetic</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_Get_Magnetic))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LIS3MDL_MAG_Get_Magnetic &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_Axes_Raw
</UL>

<P><STRONG><a name="[569]"></a>LIS3MDL_MAG_R_FullScale</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_R_FullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LIS3MDL_MAG_R_FullScale &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_Sensitivity
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_FS
</UL>

<P><STRONG><a name="[568]"></a>LIS3MDL_MAG_R_NewXYZData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_R_NewXYZData))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LIS3MDL_MAG_R_NewXYZData &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_DRDY_Status
</UL>

<P><STRONG><a name="[56a]"></a>LIS3MDL_MAG_R_OutputDataRate</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_R_OutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LIS3MDL_MAG_R_OutputDataRate &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_ODR
</UL>

<P><STRONG><a name="[56b]"></a>LIS3MDL_MAG_R_WHO_AM_I_</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_R_WHO_AM_I_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LIS3MDL_MAG_R_WHO_AM_I_ &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_WhoAmI
</UL>

<P><STRONG><a name="[570]"></a>LIS3MDL_MAG_ReadReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Read_Reg
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_TemperatureSensor
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_SystemOperatingMode
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_OutputDataRate
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_OperatingModeXY
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_FullScale
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_BlockDataUpdate
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_WHO_AM_I_
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_OutputDataRate
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_NewXYZData
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_FullScale
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_Get_Magnetic
</UL>

<P><STRONG><a name="[56d]"></a>LIS3MDL_MAG_W_BlockDataUpdate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_W_BlockDataUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LIS3MDL_MAG_W_BlockDataUpdate &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_WriteReg
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Init
</UL>

<P><STRONG><a name="[572]"></a>LIS3MDL_MAG_W_FullScale</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_W_FullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LIS3MDL_MAG_W_FullScale &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_WriteReg
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Set_FS_Value
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Set_FS
</UL>

<P><STRONG><a name="[56e]"></a>LIS3MDL_MAG_W_OperatingModeXY</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_W_OperatingModeXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LIS3MDL_MAG_W_OperatingModeXY &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_WriteReg
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Init
</UL>

<P><STRONG><a name="[573]"></a>LIS3MDL_MAG_W_OutputDataRate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_W_OutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LIS3MDL_MAG_W_OutputDataRate &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_WriteReg
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Set_ODR_Value
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Set_ODR
</UL>

<P><STRONG><a name="[56c]"></a>LIS3MDL_MAG_W_SystemOperatingMode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_W_SystemOperatingMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LIS3MDL_MAG_W_SystemOperatingMode &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_WriteReg
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Sensor_Enable
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Sensor_Disable
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Init
</UL>

<P><STRONG><a name="[56f]"></a>LIS3MDL_MAG_W_TemperatureSensor</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_W_TemperatureSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LIS3MDL_MAG_W_TemperatureSensor &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_WriteReg
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Init
</UL>

<P><STRONG><a name="[571]"></a>LIS3MDL_MAG_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LIS3MDL_MAG_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Write_Reg
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_TemperatureSensor
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_SystemOperatingMode
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_OutputDataRate
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_OperatingModeXY
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_FullScale
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_BlockDataUpdate
</UL>

<P><STRONG><a name="[582]"></a>LPS22HB_Get_DataStatus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_DataStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_Get_DataStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_DRDY_Status
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_DRDY_Status
</UL>

<P><STRONG><a name="[584]"></a>LPS22HB_Get_DeviceID</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lps22hb_driver.o(i.LPS22HB_Get_DeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_WhoAmI
</UL>

<P><STRONG><a name="[579]"></a>LPS22HB_Get_FifoMode</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_FifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_Get_FifoMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Mode
</UL>

<P><STRONG><a name="[578]"></a>LPS22HB_Get_FifoStatus</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_FifoStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Ovr_Status
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Num_Of_Samples
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Full_Status
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Fth_Status
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Empty_Status
</UL>

<P><STRONG><a name="[57a]"></a>LPS22HB_Get_FifoWatermarkLevel</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lps22hb_driver.o(i.LPS22HB_Get_FifoWatermarkLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Get_FifoWatermarkLevel &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Watermark_Level
</UL>

<P><STRONG><a name="[586]"></a>LPS22HB_Get_Odr</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
</UL>

<P><STRONG><a name="[587]"></a>LPS22HB_Get_Pressure</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_Pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_Get_Pressure &rArr; LPS22HB_Get_RawPressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_RawPressure
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Press
</UL>

<P><STRONG><a name="[588]"></a>LPS22HB_Get_RawPressure</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_RawPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_Get_RawPressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Pressure
</UL>

<P><STRONG><a name="[589]"></a>LPS22HB_Get_RawTemperature</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_RawTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temperature
</UL>

<P><STRONG><a name="[58a]"></a>LPS22HB_Get_Temperature</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_Get_Temperature &rArr; LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_RawTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temp
</UL>

<P><STRONG><a name="[583]"></a>LPS22HB_ReadReg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lps22hb_driver.o(i.LPS22HB_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Read_Reg
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_PowerMode
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilterCutoff
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilter
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevel
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoModeUse
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoMode
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Bdu
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_AutomaticIncrementRegAddress
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_RawTemperature
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_RawPressure
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Odr
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoWatermarkLevel
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoMode
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DeviceID
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DataStatus
</UL>

<P><STRONG><a name="[3a4]"></a>LPS22HB_Sensor_IO_ITConfig_IKS01A1</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, x_nucleo_iks01a1.o(i.LPS22HB_Sensor_IO_ITConfig_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LPS22HB_Sensor_IO_ITConfig_IKS01A1 &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
</UL>

<P><STRONG><a name="[3a6]"></a>LPS22HB_Sensor_IO_ITConfig_IKS01A2</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, x_nucleo_iks01a2.o(i.LPS22HB_Sensor_IO_ITConfig_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LPS22HB_Sensor_IO_ITConfig_IKS01A2 &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
</UL>

<P><STRONG><a name="[591]"></a>LPS22HB_Set_AutomaticIncrementRegAddress</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_AutomaticIncrementRegAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_Set_AutomaticIncrementRegAddress &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[590]"></a>LPS22HB_Set_Bdu</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_Bdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_Set_Bdu &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[57b]"></a>LPS22HB_Set_FIFO_FTH_Interrupt</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FIFO_FTH_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_Set_FIFO_FTH_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Interrupt
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Reset_Interrupt
</UL>

<P><STRONG><a name="[57c]"></a>LPS22HB_Set_FIFO_FULL_Interrupt</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FIFO_FULL_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_Set_FIFO_FULL_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Interrupt
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Reset_Interrupt
</UL>

<P><STRONG><a name="[57d]"></a>LPS22HB_Set_FIFO_OVR_Interrupt</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FIFO_OVR_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_Set_FIFO_OVR_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Interrupt
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Reset_Interrupt
</UL>

<P><STRONG><a name="[57e]"></a>LPS22HB_Set_FifoMode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_Set_FifoMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Mode
</UL>

<P><STRONG><a name="[581]"></a>LPS22HB_Set_FifoModeUse</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoModeUse))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_Set_FifoModeUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Usage
</UL>

<P><STRONG><a name="[57f]"></a>LPS22HB_Set_FifoWatermarkLevel</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoWatermarkLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_Set_FifoWatermarkLevel &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Watermark_Level
</UL>

<P><STRONG><a name="[580]"></a>LPS22HB_Set_FifoWatermarkLevelUse</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoWatermarkLevelUse))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_Set_FifoWatermarkLevelUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Watermark_Usage
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Stop_On_Fth
</UL>

<P><STRONG><a name="[58e]"></a>LPS22HB_Set_LowPassFilter</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_LowPassFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_Set_LowPassFilter &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[58f]"></a>LPS22HB_Set_LowPassFilterCutoff</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_LowPassFilterCutoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_Set_LowPassFilterCutoff &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[58d]"></a>LPS22HB_Set_Odr</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Sensor_Disable
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Sensor_Disable
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[58c]"></a>LPS22HB_Set_PowerMode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_PowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_Set_PowerMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[598]"></a>LPS22HB_WriteReg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lps22hb_driver.o(i.LPS22HB_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Write_Reg
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_PowerMode
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilterCutoff
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilter
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevel
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoModeUse
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoMode
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Bdu
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_AutomaticIncrementRegAddress
</UL>

<P><STRONG><a name="[599]"></a>LPS25HB_Activate</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps25hb_driver.o(i.LPS25HB_Activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS25HB_Activate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_PowerDownMode
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Sensor_Enable
</UL>

<P><STRONG><a name="[59d]"></a>LPS25HB_DeActivate</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps25hb_driver.o(i.LPS25HB_DeActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS25HB_DeActivate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_PowerDownMode
</UL>
<BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Sensor_Disable
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[59e]"></a>LPS25HB_Get_DataStatus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Get_DataStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_Get_DataStatus &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Get_DRDY_Status
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Get_DRDY_Status
</UL>

<P><STRONG><a name="[5a0]"></a>LPS25HB_Get_DeviceID</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lps25hb_driver.o(i.LPS25HB_Get_DeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_WhoAmI
</UL>

<P><STRONG><a name="[5a2]"></a>LPS25HB_Get_Odr</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Get_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_Get_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_ODR
</UL>

<P><STRONG><a name="[5a4]"></a>LPS25HB_Get_Pressure</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Get_Pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS25HB_Get_Pressure &rArr; LPS25HB_Get_RawPressure &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_RawPressure
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Press
</UL>

<P><STRONG><a name="[5a5]"></a>LPS25HB_Get_RawPressure</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Get_RawPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_Get_RawPressure &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Pressure
</UL>

<P><STRONG><a name="[5a6]"></a>LPS25HB_Get_RawTemperature</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Get_RawTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_Get_RawTemperature &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Temperature
</UL>

<P><STRONG><a name="[5a8]"></a>LPS25HB_Get_Temperature</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Get_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS25HB_Get_Temperature &rArr; LPS25HB_Get_RawTemperature &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_RawTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Temp
</UL>

<P><STRONG><a name="[59f]"></a>LPS25HB_ReadReg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lps25hb_driver.o(i.LPS25HB_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_SpiInterface
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_PowerDownMode
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Odr
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_InterruptCircuitEnable
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Bdu
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Avg
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_RawTemperature
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_RawPressure
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Odr
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_DeviceID
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_DataStatus
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Read_Reg
</UL>

<P><STRONG><a name="[5ae]"></a>LPS25HB_Set_Avg</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lps25hb_driver.o(i.LPS25HB_Set_Avg))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS25HB_Set_Avg &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_assert_failed
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[5ac]"></a>LPS25HB_Set_Bdu</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Set_Bdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_Set_Bdu &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_assert_failed
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[5ab]"></a>LPS25HB_Set_InterruptCircuitEnable</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Set_InterruptCircuitEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_Set_InterruptCircuitEnable &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_assert_failed
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[5b6]"></a>LPS25HB_Set_Odr</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Set_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_Set_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_assert_failed
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR_Value
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR
</UL>

<P><STRONG><a name="[59a]"></a>LPS25HB_Set_PowerDownMode</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Set_PowerDownMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_assert_failed
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_DeActivate
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Activate
</UL>

<P><STRONG><a name="[5ad]"></a>LPS25HB_Set_SpiInterface</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Set_SpiInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_Set_SpiInterface &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_assert_failed
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[5b5]"></a>LPS25HB_WriteReg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lps25hb_driver.o(i.LPS25HB_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_SpiInterface
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_PowerDownMode
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Odr
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_InterruptCircuitEnable
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Bdu
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Avg
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Write_Reg
</UL>

<P><STRONG><a name="[5b4]"></a>LPS25HB_assert_failed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lps25hb_driver.o(i.LPS25HB_assert_failed))
<BR><BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_assert_failed
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_SpiInterface
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_PowerDownMode
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Odr
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_InterruptCircuitEnable
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Bdu
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Avg
</UL>

<P><STRONG><a name="[5b7]"></a>LSM303AGR_ACC_Get_Acceleration</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_Get_Acceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LSM303AGR_ACC_Get_Acceleration &rArr; LSM303AGR_ACC_R_HiRes &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_HiRes
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_FullScale
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Raw_Acceleration
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_LOWPWR_EN
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes
</UL>

<P><STRONG><a name="[5bb]"></a>LSM303AGR_ACC_Get_Raw_Acceleration</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_Get_Raw_Acceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_ACC_Get_Raw_Acceleration &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Acceleration
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes_Raw
</UL>

<P><STRONG><a name="[5ba]"></a>LSM303AGR_ACC_R_FullScale</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_FullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_ACC_R_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Acceleration
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity_Normal_Mode
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity_LP_Mode
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity_HR_Mode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_FS
</UL>

<P><STRONG><a name="[5b8]"></a>LSM303AGR_ACC_R_HiRes</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_HiRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_ACC_R_HiRes &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Acceleration
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes_Raw
</UL>

<P><STRONG><a name="[5b9]"></a>LSM303AGR_ACC_R_LOWPWR_EN</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_LOWPWR_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_ACC_R_LOWPWR_EN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Acceleration
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes_Raw
</UL>

<P><STRONG><a name="[5bd]"></a>LSM303AGR_ACC_R_ODR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_ACC_R_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_ODR
</UL>

<P><STRONG><a name="[5be]"></a>LSM303AGR_ACC_R_WHO_AM_I</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_WHO_AM_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_ACC_R_WHO_AM_I &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_WhoAmI
</UL>

<P><STRONG><a name="[5bf]"></a>LSM303AGR_ACC_R_XDataAvail</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_XDataAvail))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_ACC_R_XDataAvail &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_DRDY_Status
</UL>

<P><STRONG><a name="[5c0]"></a>LSM303AGR_ACC_R_XEN</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_XEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_ACC_R_XEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[5c1]"></a>LSM303AGR_ACC_R_YEN</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_YEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_ACC_R_YEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[5c2]"></a>LSM303AGR_ACC_R_ZEN</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_ZEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_ACC_R_ZEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[5bc]"></a>LSM303AGR_ACC_ReadReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_HiRes
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_FullScale
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Raw_Acceleration
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Read_Reg
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ZEN
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_YEN
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_XEN
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FullScale
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FifoMode
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_BlockDataUpdate
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_ZEN
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_YEN
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_XEN
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_XDataAvail
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_WHO_AM_I
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_ODR
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_LOWPWR_EN
</UL>

<P><STRONG><a name="[5c3]"></a>LSM303AGR_ACC_W_BlockDataUpdate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_BlockDataUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_ACC_W_BlockDataUpdate &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
</UL>

<P><STRONG><a name="[5c5]"></a>LSM303AGR_ACC_W_FifoMode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_FifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_ACC_W_FifoMode &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
</UL>

<P><STRONG><a name="[5c6]"></a>LSM303AGR_ACC_W_FullScale</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_FullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_ACC_W_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_FS_Value
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_FS
</UL>

<P><STRONG><a name="[5c7]"></a>LSM303AGR_ACC_W_ODR</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_ACC_W_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_When_Enabled
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_Value_When_Enabled
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Sensor_Disable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
</UL>

<P><STRONG><a name="[5c8]"></a>LSM303AGR_ACC_W_XEN</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_XEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_ACC_W_XEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_Axes_Status
</UL>

<P><STRONG><a name="[5c9]"></a>LSM303AGR_ACC_W_YEN</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_YEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_ACC_W_YEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_Axes_Status
</UL>

<P><STRONG><a name="[5ca]"></a>LSM303AGR_ACC_W_ZEN</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_ZEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_ACC_W_ZEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_Axes_Status
</UL>

<P><STRONG><a name="[5c4]"></a>LSM303AGR_ACC_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM303AGR_ACC_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Write_Reg
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ZEN
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_YEN
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_XEN
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FullScale
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FifoMode
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_BlockDataUpdate
</UL>

<P><STRONG><a name="[5cb]"></a>LSM303AGR_MAG_Get_Raw_Magnetic</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_Get_Raw_Magnetic))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_MAG_Get_Raw_Magnetic &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_Axes_Raw
</UL>

<P><STRONG><a name="[5cd]"></a>LSM303AGR_MAG_R_ODR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_R_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_MAG_R_ODR &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_ODR
</UL>

<P><STRONG><a name="[5ce]"></a>LSM303AGR_MAG_R_WHO_AM_I</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_R_WHO_AM_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_MAG_R_WHO_AM_I &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_WhoAmI
</UL>

<P><STRONG><a name="[5cf]"></a>LSM303AGR_MAG_R_ZYXDA</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_R_ZYXDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_MAG_R_ZYXDA &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_DRDY_Status
</UL>

<P><STRONG><a name="[5cc]"></a>LSM303AGR_MAG_ReadReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Read_Reg
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ST
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ODR
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_MD
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_BDU
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_R_ZYXDA
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_R_WHO_AM_I
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_R_ODR
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_Get_Raw_Magnetic
</UL>

<P><STRONG><a name="[5d0]"></a>LSM303AGR_MAG_W_BDU</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_W_BDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_MAG_W_BDU &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_WriteReg
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Init
</UL>

<P><STRONG><a name="[5d2]"></a>LSM303AGR_MAG_W_MD</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_W_MD))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_MAG_W_MD &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_WriteReg
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Sensor_Enable
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Sensor_Disable
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Init
</UL>

<P><STRONG><a name="[5d3]"></a>LSM303AGR_MAG_W_ODR</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_W_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_MAG_W_ODR &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_WriteReg
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Set_ODR_Value
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Set_ODR
</UL>

<P><STRONG><a name="[5d4]"></a>LSM303AGR_MAG_W_ST</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_W_ST))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_MAG_W_ST &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_WriteReg
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Init
</UL>

<P><STRONG><a name="[5d1]"></a>LSM303AGR_MAG_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM303AGR_MAG_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Write_Reg
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ST
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ODR
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_MD
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_BDU
</UL>

<P><STRONG><a name="[5de]"></a>LSM6DS0_ACC_GYRO_Get_Acceleration</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_Get_Acceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS0_ACC_GYRO_Get_Acceleration &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Axes_Raw
</UL>

<P><STRONG><a name="[5e0]"></a>LSM6DS0_ACC_GYRO_Get_AngularRate</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_Get_AngularRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS0_ACC_GYRO_Get_AngularRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Axes_Raw
</UL>

<P><STRONG><a name="[5e1]"></a>LSM6DS0_ACC_GYRO_R_AccelerometerAxisX</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_AccelerometerAxisX))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_R_AccelerometerAxisX &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[5e2]"></a>LSM6DS0_ACC_GYRO_R_AccelerometerAxisY</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_AccelerometerAxisY))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_R_AccelerometerAxisY &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[5e3]"></a>LSM6DS0_ACC_GYRO_R_AccelerometerAxisZ</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_AccelerometerAxisZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_R_AccelerometerAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[5e4]"></a>LSM6DS0_ACC_GYRO_R_AccelerometerDataRate</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_AccelerometerDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_R_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_ODR
</UL>

<P><STRONG><a name="[5e5]"></a>LSM6DS0_ACC_GYRO_R_AccelerometerDataReadyFlag</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_AccelerometerDataReadyFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_R_AccelerometerDataReadyFlag &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_DRDY_Status
</UL>

<P><STRONG><a name="[5e6]"></a>LSM6DS0_ACC_GYRO_R_AccelerometerFullScale</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_AccelerometerFullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_R_AccelerometerFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Sensitivity
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_FS
</UL>

<P><STRONG><a name="[5e7]"></a>LSM6DS0_ACC_GYRO_R_GyroAxisX</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_GyroAxisX))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_R_GyroAxisX &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Axes_Status
</UL>

<P><STRONG><a name="[5e8]"></a>LSM6DS0_ACC_GYRO_R_GyroAxisY</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_GyroAxisY))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_R_GyroAxisY &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Axes_Status
</UL>

<P><STRONG><a name="[5e9]"></a>LSM6DS0_ACC_GYRO_R_GyroAxisZ</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_GyroAxisZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_R_GyroAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Axes_Status
</UL>

<P><STRONG><a name="[5ea]"></a>LSM6DS0_ACC_GYRO_R_GyroDataRate</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_GyroDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_ODR
</UL>

<P><STRONG><a name="[5eb]"></a>LSM6DS0_ACC_GYRO_R_GyroDataReadyFlag</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_GyroDataReadyFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_R_GyroDataReadyFlag &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_DRDY_Status
</UL>

<P><STRONG><a name="[5ec]"></a>LSM6DS0_ACC_GYRO_R_GyroFullScale</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_GyroFullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_R_GyroFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Sensitivity
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_FS
</UL>

<P><STRONG><a name="[5ed]"></a>LSM6DS0_ACC_GYRO_R_WHO_AM_I_</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_WHO_AM_I_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_R_WHO_AM_I_ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Get_WhoAmI
</UL>

<P><STRONG><a name="[5df]"></a>LSM6DS0_ACC_GYRO_ReadReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Read_Reg
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroFullScale
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroDataRate
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisZ
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisY
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisX
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_BlockDataUpdate
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerFullScale
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerDataRate
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisY
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisX
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_WHO_AM_I_
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroFullScale
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroDataReadyFlag
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroDataRate
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroAxisZ
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroAxisY
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroAxisX
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerFullScale
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerDataReadyFlag
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerDataRate
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerAxisZ
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerAxisY
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerAxisX
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_Get_AngularRate
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_Get_Acceleration
</UL>

<P><STRONG><a name="[5ee]"></a>LSM6DS0_ACC_GYRO_W_AccelerometerAxisX</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_AccelerometerAxisX))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_ACC_GYRO_W_AccelerometerAxisX &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_Axes_Status
</UL>

<P><STRONG><a name="[5f0]"></a>LSM6DS0_ACC_GYRO_W_AccelerometerAxisY</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_AccelerometerAxisY))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_ACC_GYRO_W_AccelerometerAxisY &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_Axes_Status
</UL>

<P><STRONG><a name="[5f1]"></a>LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_Axes_Status
</UL>

<P><STRONG><a name="[5f2]"></a>LSM6DS0_ACC_GYRO_W_AccelerometerDataRate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_AccelerometerDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_ACC_GYRO_W_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_ODR_When_Enabled
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_ODR_Value_When_Enabled
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Sensor_Disable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Init
</UL>

<P><STRONG><a name="[5f3]"></a>LSM6DS0_ACC_GYRO_W_AccelerometerFullScale</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_AccelerometerFullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_ACC_GYRO_W_AccelerometerFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_FS_Value
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_FS
</UL>

<P><STRONG><a name="[5f4]"></a>LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Init
</UL>

<P><STRONG><a name="[5f5]"></a>LSM6DS0_ACC_GYRO_W_BlockDataUpdate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_BlockDataUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_ACC_GYRO_W_BlockDataUpdate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Init
</UL>

<P><STRONG><a name="[5f6]"></a>LSM6DS0_ACC_GYRO_W_GyroAxisX</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_GyroAxisX))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_ACC_GYRO_W_GyroAxisX &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_Axes_Status
</UL>

<P><STRONG><a name="[5f7]"></a>LSM6DS0_ACC_GYRO_W_GyroAxisY</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_GyroAxisY))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_ACC_GYRO_W_GyroAxisY &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_Axes_Status
</UL>

<P><STRONG><a name="[5f8]"></a>LSM6DS0_ACC_GYRO_W_GyroAxisZ</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_GyroAxisZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_ACC_GYRO_W_GyroAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_Axes_Status
</UL>

<P><STRONG><a name="[5f9]"></a>LSM6DS0_ACC_GYRO_W_GyroDataRate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_GyroDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_ACC_GYRO_W_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_When_Enabled
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_Value_When_Enabled
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Sensor_Disable
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Init
</UL>

<P><STRONG><a name="[5fa]"></a>LSM6DS0_ACC_GYRO_W_GyroFullScale</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_GyroFullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_ACC_GYRO_W_GyroFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_FS_Value
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_FS
</UL>

<P><STRONG><a name="[5ef]"></a>LSM6DS0_ACC_GYRO_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS0_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Write_Reg
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroFullScale
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroDataRate
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisZ
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisY
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisX
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_BlockDataUpdate
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerFullScale
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerDataRate
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisY
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisX
</UL>

<P><STRONG><a name="[3ac]"></a>LSM6DS0_Sensor_IO_ITConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_iks01a1.o(i.LSM6DS0_Sensor_IO_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS0_ACCELERO_Init
</UL>

<P><STRONG><a name="[609]"></a>LSM6DS3_ACC_GYRO_GetRawAccData</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_GetRawAccData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_ACC_GYRO_GetRawAccData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Axes_Raw
</UL>

<P><STRONG><a name="[60b]"></a>LSM6DS3_ACC_GYRO_GetRawGyroData</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_GetRawGyroData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_ACC_GYRO_GetRawGyroData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Axes_Raw
</UL>

<P><STRONG><a name="[60c]"></a>LSM6DS3_ACC_GYRO_Get_GetFIFOData</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_Get_GetFIFOData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Get_Data
</UL>

<P><STRONG><a name="[60d]"></a>LSM6DS3_ACC_GYRO_Get_GetStepCounter</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_Get_GetStepCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_ACC_GYRO_Get_GetStepCounter &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Step_Count
</UL>

<P><STRONG><a name="[60e]"></a>LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_6D_Orientation_Status
</UL>

<P><STRONG><a name="[60f]"></a>LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Double_Tap_Detection_Status
</UL>

<P><STRONG><a name="[610]"></a>LSM6DS3_ACC_GYRO_R_DSD_XH</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_DSD_XH))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_DSD_XH &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_6D_Orientation_XH
</UL>

<P><STRONG><a name="[611]"></a>LSM6DS3_ACC_GYRO_R_DSD_XL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_DSD_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_DSD_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_6D_Orientation_XL
</UL>

<P><STRONG><a name="[612]"></a>LSM6DS3_ACC_GYRO_R_DSD_YH</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_DSD_YH))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_DSD_YH &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_6D_Orientation_YH
</UL>

<P><STRONG><a name="[613]"></a>LSM6DS3_ACC_GYRO_R_DSD_YL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_DSD_YL))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_DSD_YL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_6D_Orientation_YL
</UL>

<P><STRONG><a name="[614]"></a>LSM6DS3_ACC_GYRO_R_DSD_ZH</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_DSD_ZH))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_DSD_ZH &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_6D_Orientation_ZH
</UL>

<P><STRONG><a name="[615]"></a>LSM6DS3_ACC_GYRO_R_DSD_ZL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_DSD_ZL))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_DSD_ZL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_6D_Orientation_ZL
</UL>

<P><STRONG><a name="[616]"></a>LSM6DS3_ACC_GYRO_R_FF_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_FF_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_FF_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Free_Fall_Detection_Status
</UL>

<P><STRONG><a name="[617]"></a>LSM6DS3_ACC_GYRO_R_FIFOEmpty</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_FIFOEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_FIFOEmpty &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Get_Empty_Status
</UL>

<P><STRONG><a name="[618]"></a>LSM6DS3_ACC_GYRO_R_FIFOFull</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_FIFOFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_FIFOFull &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Get_Full_Status
</UL>

<P><STRONG><a name="[619]"></a>LSM6DS3_ACC_GYRO_R_FIFONumOfEntries</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_FIFONumOfEntries))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_ACC_GYRO_R_FIFONumOfEntries &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Get_Num_Of_Samples
</UL>

<P><STRONG><a name="[61a]"></a>LSM6DS3_ACC_GYRO_R_FIFOPattern</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_FIFOPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_ACC_GYRO_R_FIFOPattern &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Get_Pattern
</UL>

<P><STRONG><a name="[61b]"></a>LSM6DS3_ACC_GYRO_R_FS_125</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_FS_125))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_FS_125 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Sensitivity
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_FS
</UL>

<P><STRONG><a name="[61c]"></a>LSM6DS3_ACC_GYRO_R_FS_G</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_FS_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_FS_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Sensitivity
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_FS
</UL>

<P><STRONG><a name="[61d]"></a>LSM6DS3_ACC_GYRO_R_FS_XL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_FS_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_FS_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Sensitivity
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_FS
</UL>

<P><STRONG><a name="[61e]"></a>LSM6DS3_ACC_GYRO_R_GDA</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_GDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_GDA &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_DRDY_Status
</UL>

<P><STRONG><a name="[61f]"></a>LSM6DS3_ACC_GYRO_R_ODR_G</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_ODR_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_ODR
</UL>

<P><STRONG><a name="[620]"></a>LSM6DS3_ACC_GYRO_R_ODR_XL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_ODR_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_ODR
</UL>

<P><STRONG><a name="[621]"></a>LSM6DS3_ACC_GYRO_R_OVERRUN</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_OVERRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_OVERRUN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Get_Overrun_Status
</UL>

<P><STRONG><a name="[622]"></a>LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Pedometer_Status
</UL>

<P><STRONG><a name="[623]"></a>LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Single_Tap_Detection_Status
</UL>

<P><STRONG><a name="[624]"></a>LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Tilt_Detection_Status
</UL>

<P><STRONG><a name="[625]"></a>LSM6DS3_ACC_GYRO_R_WHO_AM_I</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_WHO_AM_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Get_WhoAmI
</UL>

<P><STRONG><a name="[626]"></a>LSM6DS3_ACC_GYRO_R_WU_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_WU_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_WU_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Wake_Up_Detection_Status
</UL>

<P><STRONG><a name="[627]"></a>LSM6DS3_ACC_GYRO_R_XEN_G</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_XEN_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_XEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Axes_Status
</UL>

<P><STRONG><a name="[628]"></a>LSM6DS3_ACC_GYRO_R_XEN_XL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_XEN_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_XEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[629]"></a>LSM6DS3_ACC_GYRO_R_XLDA</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_XLDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_XLDA &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_DRDY_Status
</UL>

<P><STRONG><a name="[62a]"></a>LSM6DS3_ACC_GYRO_R_YEN_G</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_YEN_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_YEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Axes_Status
</UL>

<P><STRONG><a name="[62b]"></a>LSM6DS3_ACC_GYRO_R_YEN_XL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_YEN_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_YEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[62c]"></a>LSM6DS3_ACC_GYRO_R_ZEN_G</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_ZEN_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_ZEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Axes_Status
</UL>

<P><STRONG><a name="[62d]"></a>LSM6DS3_ACC_GYRO_R_ZEN_XL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_ZEN_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_R_ZEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[60a]"></a>LSM6DS3_ACC_GYRO_ReadReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FUNC_EN
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_G
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_125
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FSS5_on_INT1
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FIFO_Watermark
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_THS
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_Duration
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FFEvOnInt2
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FFEvOnInt1
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_EmbeddedAccess
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DUR
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DEC_FIFO_G
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_BDU
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_6DEvOnInt2
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_6DEvOnInt1
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_ZEN_XL
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_ZEN_G
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_YEN_XL
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_YEN_G
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_XLDA
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_XEN_XL
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_XEN_G
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_WU_EV_STATUS
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_WHO_AM_I
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_OVERRUN
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_ODR_XL
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_ODR_G
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_GDA
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_XL
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_G
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_125
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FIFOPattern
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FIFONumOfEntries
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FIFOFull
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FIFOEmpty
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FF_EV_STATUS
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_ZL
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_ZH
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_YL
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_YH
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_XL
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_XH
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_Get_GetStepCounter
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_Get_GetFIFOData
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_GetRawGyroData
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_GetRawAccData
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Read_Reg
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ZEN_XL
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ZEN_G
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_YEN_XL
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_YEN_G
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_XEN_XL
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_XEN_G
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WUEvOnInt2
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WK_THS
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TiltEvOnInt2
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TapEvOnInt2
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TIMER_HR
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TILT_EN
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_THS
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SingleTapOnInt2
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SingleTapOnInt1
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SelfTest_XL
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SelfTest_G
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_STOP_ON_FTH
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SLEEP_DUR
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SIXD_THS
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SHOCK_Duration
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_QUIET_Duration
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoThreshold
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoStepReset
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_EN
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_XL
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_G
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_FIFO
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_LIR
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_IF_Addr_Incr
</UL>

<P><STRONG><a name="[62e]"></a>LSM6DS3_ACC_GYRO_W_6DEvOnInt1</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_6DEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_6DEvOnInt1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_6D_Orientation
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_6D_Orientation
</UL>

<P><STRONG><a name="[630]"></a>LSM6DS3_ACC_GYRO_W_6DEvOnInt2</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_6DEvOnInt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_6DEvOnInt2 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_6D_Orientation
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_6D_Orientation
</UL>

<P><STRONG><a name="[631]"></a>LSM6DS3_ACC_GYRO_W_BDU</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_BDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_BDU &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
</UL>

<P><STRONG><a name="[632]"></a>LSM6DS3_ACC_GYRO_W_DEC_FIFO_G</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_DEC_FIFO_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_DEC_FIFO_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_G_Set_Decimation
</UL>

<P><STRONG><a name="[633]"></a>LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_X_Set_Decimation
</UL>

<P><STRONG><a name="[634]"></a>LSM6DS3_ACC_GYRO_W_DUR</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_DUR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_DUR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Duration_Time
</UL>

<P><STRONG><a name="[635]"></a>LSM6DS3_ACC_GYRO_W_EmbeddedAccess</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_EmbeddedAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoThreshold
</UL>

<P><STRONG><a name="[636]"></a>LSM6DS3_ACC_GYRO_W_FFEvOnInt1</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FFEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FFEvOnInt1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[637]"></a>LSM6DS3_ACC_GYRO_W_FFEvOnInt2</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FFEvOnInt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FFEvOnInt2 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[638]"></a>LSM6DS3_ACC_GYRO_W_FF_Duration</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FF_Duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FF_Duration &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[639]"></a>LSM6DS3_ACC_GYRO_W_FF_THS</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FF_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FF_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Free_Fall_Threshold
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[63a]"></a>LSM6DS3_ACC_GYRO_W_FIFO_MODE</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FIFO_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FIFO_MODE &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Set_Mode
</UL>

<P><STRONG><a name="[63b]"></a>LSM6DS3_ACC_GYRO_W_FIFO_Watermark</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FIFO_Watermark))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FIFO_Watermark &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Set_Watermark_Level
</UL>

<P><STRONG><a name="[63c]"></a>LSM6DS3_ACC_GYRO_W_FSS5_on_INT1</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FSS5_on_INT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FSS5_on_INT1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Set_INT1_FIFO_Full
</UL>

<P><STRONG><a name="[63d]"></a>LSM6DS3_ACC_GYRO_W_FS_125</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FS_125))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FS_125 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_FS_Value
</UL>

<P><STRONG><a name="[63e]"></a>LSM6DS3_ACC_GYRO_W_FS_G</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FS_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FS_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_FS_Value
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_FS
</UL>

<P><STRONG><a name="[63f]"></a>LSM6DS3_ACC_GYRO_W_FS_XL</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FS_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FS_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_FS_Value
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_FS
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Wake_Up_Detection
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Tilt_Detection
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Pedometer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_6D_Orientation
</UL>

<P><STRONG><a name="[640]"></a>LSM6DS3_ACC_GYRO_W_FUNC_EN</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FUNC_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FUNC_EN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Tilt_Detection
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Pedometer
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Tilt_Detection
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Pedometer
</UL>

<P><STRONG><a name="[641]"></a>LSM6DS3_ACC_GYRO_W_IF_Addr_Incr</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_IF_Addr_Incr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_IF_Addr_Incr &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
</UL>

<P><STRONG><a name="[642]"></a>LSM6DS3_ACC_GYRO_W_LIR</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_LIR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_LIR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Set_Interrupt_Latch
</UL>

<P><STRONG><a name="[643]"></a>LSM6DS3_ACC_GYRO_W_ODR_FIFO</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_ODR_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_ODR_FIFO &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Set_ODR_Value
</UL>

<P><STRONG><a name="[644]"></a>LSM6DS3_ACC_GYRO_W_ODR_G</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_ODR_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR_When_Enabled
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR_Value_When_Enabled
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Sensor_Disable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
</UL>

<P><STRONG><a name="[645]"></a>LSM6DS3_ACC_GYRO_W_ODR_XL</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_ODR_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_When_Enabled
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value_When_Enabled
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Sensor_Disable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
</UL>

<P><STRONG><a name="[646]"></a>LSM6DS3_ACC_GYRO_W_PEDO_EN</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_PEDO_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_PEDO_EN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Pedometer
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Pedometer
</UL>

<P><STRONG><a name="[647]"></a>LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Pedometer
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Pedometer
</UL>

<P><STRONG><a name="[648]"></a>LSM6DS3_ACC_GYRO_W_PedoStepReset</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_PedoStepReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_PedoStepReset &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Step_Counter_Reset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Step_Counter_Reset
</UL>

<P><STRONG><a name="[649]"></a>LSM6DS3_ACC_GYRO_W_PedoThreshold</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_PedoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_ACC_GYRO_W_PedoThreshold &rArr; LSM6DS3_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_EmbeddedAccess
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Pedometer_Threshold
</UL>

<P><STRONG><a name="[64a]"></a>LSM6DS3_ACC_GYRO_W_QUIET_Duration</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_QUIET_Duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_QUIET_Duration &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Quiet_Time
</UL>

<P><STRONG><a name="[64b]"></a>LSM6DS3_ACC_GYRO_W_SHOCK_Duration</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_SHOCK_Duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_SHOCK_Duration &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Shock_Time
</UL>

<P><STRONG><a name="[64c]"></a>LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[64d]"></a>LSM6DS3_ACC_GYRO_W_SIXD_THS</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_SIXD_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_SIXD_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_6D_Orientation
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_6D_Orientation
</UL>

<P><STRONG><a name="[64e]"></a>LSM6DS3_ACC_GYRO_W_SLEEP_DUR</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_SLEEP_DUR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_SLEEP_DUR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[64f]"></a>LSM6DS3_ACC_GYRO_W_STOP_ON_FTH</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_STOP_ON_FTH))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_STOP_ON_FTH &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Set_Stop_On_Fth
</UL>

<P><STRONG><a name="[650]"></a>LSM6DS3_ACC_GYRO_W_SelfTest_G</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_SelfTest_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_SelfTest_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_SelfTest
</UL>

<P><STRONG><a name="[651]"></a>LSM6DS3_ACC_GYRO_W_SelfTest_XL</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_SelfTest_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_SelfTest_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_SelfTest
</UL>

<P><STRONG><a name="[652]"></a>LSM6DS3_ACC_GYRO_W_SingleTapOnInt1</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_SingleTapOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_SingleTapOnInt1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
</UL>

<P><STRONG><a name="[653]"></a>LSM6DS3_ACC_GYRO_W_SingleTapOnInt2</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_SingleTapOnInt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_SingleTapOnInt2 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
</UL>

<P><STRONG><a name="[654]"></a>LSM6DS3_ACC_GYRO_W_TAP_THS</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TAP_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TAP_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Threshold
</UL>

<P><STRONG><a name="[655]"></a>LSM6DS3_ACC_GYRO_W_TAP_X_EN</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TAP_X_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TAP_X_EN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[656]"></a>LSM6DS3_ACC_GYRO_W_TAP_Y_EN</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TAP_Y_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TAP_Y_EN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[657]"></a>LSM6DS3_ACC_GYRO_W_TAP_Z_EN</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TAP_Z_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TAP_Z_EN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[658]"></a>LSM6DS3_ACC_GYRO_W_TILT_EN</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TILT_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TILT_EN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Tilt_Detection
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Tilt_Detection
</UL>

<P><STRONG><a name="[659]"></a>LSM6DS3_ACC_GYRO_W_TIMER_HR</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TIMER_HR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TIMER_HR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[65a]"></a>LSM6DS3_ACC_GYRO_W_TapEvOnInt1</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TapEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TapEvOnInt1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[65b]"></a>LSM6DS3_ACC_GYRO_W_TapEvOnInt2</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TapEvOnInt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TapEvOnInt2 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[65c]"></a>LSM6DS3_ACC_GYRO_W_TiltEvOnInt1</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TiltEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TiltEvOnInt1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Tilt_Detection
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Tilt_Detection
</UL>

<P><STRONG><a name="[65d]"></a>LSM6DS3_ACC_GYRO_W_TiltEvOnInt2</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TiltEvOnInt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TiltEvOnInt2 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Tilt_Detection
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Tilt_Detection
</UL>

<P><STRONG><a name="[65e]"></a>LSM6DS3_ACC_GYRO_W_WAKE_DUR</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_WAKE_DUR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_WAKE_DUR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Wake_Up_Detection
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[65f]"></a>LSM6DS3_ACC_GYRO_W_WK_THS</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_WK_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_WK_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Wake_Up_Threshold
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Wake_Up_Detection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[660]"></a>LSM6DS3_ACC_GYRO_W_WUEvOnInt1</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_WUEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_WUEvOnInt1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Wake_Up_Detection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[661]"></a>LSM6DS3_ACC_GYRO_W_WUEvOnInt2</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_WUEvOnInt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_WUEvOnInt2 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Wake_Up_Detection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[662]"></a>LSM6DS3_ACC_GYRO_W_XEN_G</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_XEN_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_XEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_Axes_Status
</UL>

<P><STRONG><a name="[663]"></a>LSM6DS3_ACC_GYRO_W_XEN_XL</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_XEN_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_XEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Axes_Status
</UL>

<P><STRONG><a name="[664]"></a>LSM6DS3_ACC_GYRO_W_YEN_G</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_YEN_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_YEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_Axes_Status
</UL>

<P><STRONG><a name="[665]"></a>LSM6DS3_ACC_GYRO_W_YEN_XL</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_YEN_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_YEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Axes_Status
</UL>

<P><STRONG><a name="[666]"></a>LSM6DS3_ACC_GYRO_W_ZEN_G</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_ZEN_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_ZEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_Axes_Status
</UL>

<P><STRONG><a name="[667]"></a>LSM6DS3_ACC_GYRO_W_ZEN_XL</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_ZEN_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_ZEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Axes_Status
</UL>

<P><STRONG><a name="[62f]"></a>LSM6DS3_ACC_GYRO_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FUNC_EN
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_G
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_125
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FSS5_on_INT1
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FIFO_Watermark
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_THS
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_Duration
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FFEvOnInt2
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FFEvOnInt1
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_EmbeddedAccess
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DUR
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DEC_FIFO_G
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_BDU
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_6DEvOnInt2
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_6DEvOnInt1
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Write_Reg
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ZEN_XL
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ZEN_G
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_YEN_XL
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_YEN_G
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_XEN_XL
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_XEN_G
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WUEvOnInt2
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WK_THS
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TiltEvOnInt2
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TapEvOnInt2
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TIMER_HR
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TILT_EN
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_THS
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SingleTapOnInt2
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SingleTapOnInt1
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SelfTest_XL
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SelfTest_G
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_STOP_ON_FTH
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SLEEP_DUR
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SIXD_THS
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SHOCK_Duration
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_QUIET_Duration
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoThreshold
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoStepReset
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_EN
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_XL
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_G
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_FIFO
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_LIR
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_IF_Addr_Incr
</UL>

<P><STRONG><a name="[3ad]"></a>LSM6DS3_Sensor_IO_ITConfig</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, x_nucleo_iks01a1.o(i.LSM6DS3_Sensor_IO_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LSM6DS3_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS3_ACCELERO_Init
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS3_GYRO_Init
</UL>

<P><STRONG><a name="[677]"></a>LSM6DSL_ACC_GYRO_GetRawAccData</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_GetRawAccData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_ACC_GYRO_GetRawAccData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Axes_Raw
</UL>

<P><STRONG><a name="[679]"></a>LSM6DSL_ACC_GYRO_GetRawGyroData</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_GetRawGyroData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_ACC_GYRO_GetRawGyroData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Axes_Raw
</UL>

<P><STRONG><a name="[67a]"></a>LSM6DSL_ACC_GYRO_Get_GetFIFOData</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_Get_GetFIFOData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Data
</UL>

<P><STRONG><a name="[67b]"></a>LSM6DSL_ACC_GYRO_Get_GetStepCounter</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_Get_GetStepCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_ACC_GYRO_Get_GetStepCounter &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Step_Count
</UL>

<P><STRONG><a name="[67c]"></a>LSM6DSL_ACC_GYRO_R_D6D_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_D6D_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_R_D6D_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_Status
</UL>

<P><STRONG><a name="[67d]"></a>LSM6DSL_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Double_Tap_Detection_Status
</UL>

<P><STRONG><a name="[67e]"></a>LSM6DSL_ACC_GYRO_R_DSD_XH</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DSD_XH))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DSD_XH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_XH
</UL>

<P><STRONG><a name="[67f]"></a>LSM6DSL_ACC_GYRO_R_DSD_XL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DSD_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DSD_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_XL
</UL>

<P><STRONG><a name="[680]"></a>LSM6DSL_ACC_GYRO_R_DSD_YH</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DSD_YH))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DSD_YH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_YH
</UL>

<P><STRONG><a name="[681]"></a>LSM6DSL_ACC_GYRO_R_DSD_YL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DSD_YL))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DSD_YL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_YL
</UL>

<P><STRONG><a name="[682]"></a>LSM6DSL_ACC_GYRO_R_DSD_ZH</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DSD_ZH))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DSD_ZH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_ZH
</UL>

<P><STRONG><a name="[683]"></a>LSM6DSL_ACC_GYRO_R_DSD_ZL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DSD_ZL))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DSD_ZL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_ZL
</UL>

<P><STRONG><a name="[684]"></a>LSM6DSL_ACC_GYRO_R_FF_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FF_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FF_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Free_Fall_Detection_Status
</UL>

<P><STRONG><a name="[685]"></a>LSM6DSL_ACC_GYRO_R_FIFOEmpty</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FIFOEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FIFOEmpty &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Empty_Status
</UL>

<P><STRONG><a name="[686]"></a>LSM6DSL_ACC_GYRO_R_FIFOFull</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FIFOFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FIFOFull &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Full_Status
</UL>

<P><STRONG><a name="[687]"></a>LSM6DSL_ACC_GYRO_R_FIFONumOfEntries</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FIFONumOfEntries))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FIFONumOfEntries &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Num_Of_Samples
</UL>

<P><STRONG><a name="[688]"></a>LSM6DSL_ACC_GYRO_R_FIFOPattern</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FIFOPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FIFOPattern &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Pattern
</UL>

<P><STRONG><a name="[689]"></a>LSM6DSL_ACC_GYRO_R_FS_125</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FS_125))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FS_125 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Sensitivity
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_FS
</UL>

<P><STRONG><a name="[68a]"></a>LSM6DSL_ACC_GYRO_R_FS_G</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FS_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FS_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Sensitivity
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_FS
</UL>

<P><STRONG><a name="[68b]"></a>LSM6DSL_ACC_GYRO_R_FS_XL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FS_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FS_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Sensitivity
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_FS
</UL>

<P><STRONG><a name="[68c]"></a>LSM6DSL_ACC_GYRO_R_GDA</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_GDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_R_GDA &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_DRDY_Status
</UL>

<P><STRONG><a name="[68d]"></a>LSM6DSL_ACC_GYRO_R_ODR_G</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_ODR_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_R_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_ODR
</UL>

<P><STRONG><a name="[68e]"></a>LSM6DSL_ACC_GYRO_R_ODR_XL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_ODR_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_R_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_ODR
</UL>

<P><STRONG><a name="[68f]"></a>LSM6DSL_ACC_GYRO_R_OVERRUN</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_OVERRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_R_OVERRUN &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Overrun_Status
</UL>

<P><STRONG><a name="[690]"></a>LSM6DSL_ACC_GYRO_R_PEDO_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_PEDO_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_R_PEDO_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Pedometer_Status
</UL>

<P><STRONG><a name="[691]"></a>LSM6DSL_ACC_GYRO_R_SINGLE_TAP_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_SINGLE_TAP_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_R_SINGLE_TAP_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Single_Tap_Detection_Status
</UL>

<P><STRONG><a name="[692]"></a>LSM6DSL_ACC_GYRO_R_TILT_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_TILT_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_R_TILT_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Tilt_Detection_Status
</UL>

<P><STRONG><a name="[693]"></a>LSM6DSL_ACC_GYRO_R_WHO_AM_I</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_WHO_AM_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Get_WhoAmI
</UL>

<P><STRONG><a name="[694]"></a>LSM6DSL_ACC_GYRO_R_WU_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_WU_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_R_WU_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Wake_Up_Detection_Status
</UL>

<P><STRONG><a name="[695]"></a>LSM6DSL_ACC_GYRO_R_XLDA</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_XLDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_R_XLDA &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_DRDY_Status
</UL>

<P><STRONG><a name="[678]"></a>LSM6DSL_ACC_GYRO_ReadReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt2
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt1
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_XLDA
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_WU_EV_STATUS
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_WHO_AM_I
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_TILT_EV_STATUS
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_SINGLE_TAP_EV_STATUS
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_PEDO_EV_STATUS
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_OVERRUN
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_ODR_XL
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_ODR_G
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_GDA
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_XL
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_G
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_125
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFOPattern
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFONumOfEntries
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFOFull
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFOEmpty
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FF_EV_STATUS
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_ZL
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_ZH
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_YL
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_YH
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_XL
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_XH
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_D6D_EV_STATUS
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_Get_GetStepCounter
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_Get_GetFIFOData
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_GetRawGyroData
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_GetRawAccData
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Read_Reg
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt2
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WK_THS
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt2
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TapEvOnInt2
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TIMER_HR
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TILT
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_THS
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SingleTapOnInt2
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SingleTapOnInt1
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SelfTest_XL
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SelfTest_G
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STOP_ON_FTH
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SLEEP_DUR
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SIXD_THS
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SHOCK_Duration
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_QUIET_Duration
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoThreshold
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoStepReset
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PEDO
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_FIFO
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_LIR
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_IF_Addr_Incr
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_G
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_125
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_Watermark
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_THS
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_Duration
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt2
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt1
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_EmbeddedAccess
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DUR
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DEC_FIFO_G
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BDU
</UL>

<P><STRONG><a name="[696]"></a>LSM6DSL_ACC_GYRO_W_6DEvOnInt1</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_6DEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_6DEvOnInt1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_6D_Orientation
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_6D_Orientation
</UL>

<P><STRONG><a name="[698]"></a>LSM6DSL_ACC_GYRO_W_6DEvOnInt2</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_6DEvOnInt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_6DEvOnInt2 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_6D_Orientation
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_6D_Orientation
</UL>

<P><STRONG><a name="[699]"></a>LSM6DSL_ACC_GYRO_W_BASIC_INT</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_BASIC_INT))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_BASIC_INT &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_6D_Orientation
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Wake_Up_Detection
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Free_Fall_Detection
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_6D_Orientation
</UL>

<P><STRONG><a name="[69a]"></a>LSM6DSL_ACC_GYRO_W_BDU</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_BDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_BDU &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Init
</UL>

<P><STRONG><a name="[69b]"></a>LSM6DSL_ACC_GYRO_W_DEC_FIFO_G</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_DEC_FIFO_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_DEC_FIFO_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_G_Set_Decimation
</UL>

<P><STRONG><a name="[69c]"></a>LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_X_Set_Decimation
</UL>

<P><STRONG><a name="[69d]"></a>LSM6DSL_ACC_GYRO_W_DUR</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_DUR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_DUR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Duration_Time
</UL>

<P><STRONG><a name="[69e]"></a>LSM6DSL_ACC_GYRO_W_EmbeddedAccess</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_EmbeddedAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoThreshold
</UL>

<P><STRONG><a name="[69f]"></a>LSM6DSL_ACC_GYRO_W_FFEvOnInt1</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FFEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FFEvOnInt1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[6a0]"></a>LSM6DSL_ACC_GYRO_W_FFEvOnInt2</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FFEvOnInt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FFEvOnInt2 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[6a1]"></a>LSM6DSL_ACC_GYRO_W_FF_Duration</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FF_Duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FF_Duration &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[6a2]"></a>LSM6DSL_ACC_GYRO_W_FF_THS</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FF_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FF_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Free_Fall_Threshold
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[6a3]"></a>LSM6DSL_ACC_GYRO_W_FIFO_MODE</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FIFO_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FIFO_MODE &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Set_Mode
</UL>

<P><STRONG><a name="[6a4]"></a>LSM6DSL_ACC_GYRO_W_FIFO_Watermark</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FIFO_Watermark))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FIFO_Watermark &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Set_Watermark_Level
</UL>

<P><STRONG><a name="[6a5]"></a>LSM6DSL_ACC_GYRO_W_FS_125</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FS_125))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FS_125 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_FS_Value
</UL>

<P><STRONG><a name="[6a6]"></a>LSM6DSL_ACC_GYRO_W_FS_G</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FS_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FS_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_FS_Value
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_FS
</UL>

<P><STRONG><a name="[6a7]"></a>LSM6DSL_ACC_GYRO_W_FS_XL</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FS_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FS_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_FS_Value
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_FS
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Tilt_Detection
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Pedometer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_6D_Orientation
</UL>

<P><STRONG><a name="[6a8]"></a>LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Set_INT1_FIFO_Full
</UL>

<P><STRONG><a name="[6a9]"></a>LSM6DSL_ACC_GYRO_W_FUNC_EN</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FUNC_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FUNC_EN &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Tilt_Detection
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Pedometer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Tilt_Detection
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Pedometer
</UL>

<P><STRONG><a name="[6aa]"></a>LSM6DSL_ACC_GYRO_W_IF_Addr_Incr</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_IF_Addr_Incr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_IF_Addr_Incr &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Init
</UL>

<P><STRONG><a name="[6ab]"></a>LSM6DSL_ACC_GYRO_W_LIR</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_LIR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_LIR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Set_Interrupt_Latch
</UL>

<P><STRONG><a name="[6ac]"></a>LSM6DSL_ACC_GYRO_W_ODR_FIFO</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_ODR_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_ODR_FIFO &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Set_ODR_Value
</UL>

<P><STRONG><a name="[6ad]"></a>LSM6DSL_ACC_GYRO_W_ODR_G</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_ODR_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_When_Enabled
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_Value_When_Enabled
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Sensor_Disable
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Init
</UL>

<P><STRONG><a name="[6ae]"></a>LSM6DSL_ACC_GYRO_W_ODR_XL</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_ODR_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_When_Enabled
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value_When_Enabled
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Sensor_Disable
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Init
</UL>

<P><STRONG><a name="[6af]"></a>LSM6DSL_ACC_GYRO_W_PEDO</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_PEDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_PEDO &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Pedometer
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Pedometer
</UL>

<P><STRONG><a name="[6b0]"></a>LSM6DSL_ACC_GYRO_W_PedoStepReset</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_PedoStepReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_PedoStepReset &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Step_Counter_Reset
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Step_Counter_Reset
</UL>

<P><STRONG><a name="[6b1]"></a>LSM6DSL_ACC_GYRO_W_PedoThreshold</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_PedoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_ACC_GYRO_W_PedoThreshold &rArr; LSM6DSL_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_EmbeddedAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Pedometer_Threshold
</UL>

<P><STRONG><a name="[6b2]"></a>LSM6DSL_ACC_GYRO_W_QUIET_Duration</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_QUIET_Duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_QUIET_Duration &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Quiet_Time
</UL>

<P><STRONG><a name="[6b3]"></a>LSM6DSL_ACC_GYRO_W_SHOCK_Duration</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SHOCK_Duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SHOCK_Duration &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Shock_Time
</UL>

<P><STRONG><a name="[6b4]"></a>LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[6b5]"></a>LSM6DSL_ACC_GYRO_W_SIXD_THS</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SIXD_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SIXD_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_6D_Orientation
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_6D_Orientation
</UL>

<P><STRONG><a name="[6b6]"></a>LSM6DSL_ACC_GYRO_W_SLEEP_DUR</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SLEEP_DUR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SLEEP_DUR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[6b7]"></a>LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Pedometer
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Pedometer
</UL>

<P><STRONG><a name="[6b8]"></a>LSM6DSL_ACC_GYRO_W_STOP_ON_FTH</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_STOP_ON_FTH))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_STOP_ON_FTH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Set_Stop_On_Fth
</UL>

<P><STRONG><a name="[6b9]"></a>LSM6DSL_ACC_GYRO_W_SelfTest_G</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SelfTest_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SelfTest_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_SelfTest
</UL>

<P><STRONG><a name="[6ba]"></a>LSM6DSL_ACC_GYRO_W_SelfTest_XL</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SelfTest_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SelfTest_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_SelfTest
</UL>

<P><STRONG><a name="[6bb]"></a>LSM6DSL_ACC_GYRO_W_SingleTapOnInt1</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SingleTapOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SingleTapOnInt1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
</UL>

<P><STRONG><a name="[6bc]"></a>LSM6DSL_ACC_GYRO_W_SingleTapOnInt2</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SingleTapOnInt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SingleTapOnInt2 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
</UL>

<P><STRONG><a name="[6bd]"></a>LSM6DSL_ACC_GYRO_W_TAP_THS</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TAP_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TAP_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Threshold
</UL>

<P><STRONG><a name="[6be]"></a>LSM6DSL_ACC_GYRO_W_TAP_X_EN</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TAP_X_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TAP_X_EN &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[6bf]"></a>LSM6DSL_ACC_GYRO_W_TAP_Y_EN</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TAP_Y_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TAP_Y_EN &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[6c0]"></a>LSM6DSL_ACC_GYRO_W_TAP_Z_EN</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TAP_Z_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TAP_Z_EN &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[6c1]"></a>LSM6DSL_ACC_GYRO_W_TILT</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TILT))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TILT &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Tilt_Detection
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Tilt_Detection
</UL>

<P><STRONG><a name="[6c2]"></a>LSM6DSL_ACC_GYRO_W_TIMER_HR</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TIMER_HR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TIMER_HR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[6c3]"></a>LSM6DSL_ACC_GYRO_W_TapEvOnInt1</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TapEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TapEvOnInt1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[6c4]"></a>LSM6DSL_ACC_GYRO_W_TapEvOnInt2</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TapEvOnInt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TapEvOnInt2 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[6c5]"></a>LSM6DSL_ACC_GYRO_W_TiltEvOnInt1</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TiltEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TiltEvOnInt1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Tilt_Detection
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Tilt_Detection
</UL>

<P><STRONG><a name="[6c6]"></a>LSM6DSL_ACC_GYRO_W_TiltEvOnInt2</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TiltEvOnInt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TiltEvOnInt2 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Tilt_Detection
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Tilt_Detection
</UL>

<P><STRONG><a name="[6c7]"></a>LSM6DSL_ACC_GYRO_W_WAKE_DUR</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_WAKE_DUR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_WAKE_DUR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[6c8]"></a>LSM6DSL_ACC_GYRO_W_WK_THS</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_WK_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_WK_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Wake_Up_Threshold
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[6c9]"></a>LSM6DSL_ACC_GYRO_W_WUEvOnInt1</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_WUEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_WUEvOnInt1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[6ca]"></a>LSM6DSL_ACC_GYRO_W_WUEvOnInt2</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_WUEvOnInt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_WUEvOnInt2 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[697]"></a>LSM6DSL_ACC_GYRO_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt2
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt1
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Write_Reg
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt2
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WK_THS
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt2
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TapEvOnInt2
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TIMER_HR
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TILT
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_THS
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SingleTapOnInt2
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SingleTapOnInt1
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SelfTest_XL
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SelfTest_G
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STOP_ON_FTH
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SLEEP_DUR
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SIXD_THS
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SHOCK_Duration
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_QUIET_Duration
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoThreshold
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoStepReset
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PEDO
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_FIFO
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_LIR
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_IF_Addr_Incr
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_G
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_125
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_Watermark
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_THS
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_Duration
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt2
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt1
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_EmbeddedAccess
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DUR
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DEC_FIFO_G
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BDU
</UL>

<P><STRONG><a name="[3ae]"></a>LSM6DSL_Sensor_IO_ITConfig</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, x_nucleo_iks01a2.o(i.LSM6DSL_Sensor_IO_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LSM6DSL_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_GYRO_Init
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_ACCELERO_Init
</UL>

<P><STRONG><a name="[6da]"></a>LedBlink</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, azureclient_mqtt_tm.o(i.LedBlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LedBlink &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBlinkWRAPPER
</UL>

<P><STRONG><a name="[6db]"></a>LedOff</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, azureclient_mqtt_tm.o(i.LedOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LedOff &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOffWRAPPER
</UL>

<P><STRONG><a name="[6dc]"></a>LedOn</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, azureclient_mqtt_tm.o(i.LedOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LedOn &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOnWRAPPER
</UL>

<P><STRONG><a name="[9e5]"></a>LocalBufferGetSizeBuffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tlocalbuffer.o(i.LocalBufferGetSizeBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_receive
</UL>

<P><STRONG><a name="[9a7]"></a>LocalBufferInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tlocalbuffer.o(i.LocalBufferInit))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[6dd]"></a>LocalBufferPopBuffer</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tlocalbuffer.o(i.LocalBufferPopBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LocalBufferPopBuffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_receive
</UL>

<P><STRONG><a name="[6de]"></a>LocalBufferPushBuffer</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tlocalbuffer.o(i.LocalBufferPushBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LocalBufferPushBuffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_bg96_socket_data_received
</UL>

<P><STRONG><a name="[6e1]"></a>M24SR_CloseNDEFSession</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lib_m24sr.o(i.M24SR_CloseNDEFSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = M24SR_CloseNDEFSession &rArr; M24SR_Deselect &rArr; M24SR_ReceiveI2Cresponse &rArr; HAL_I2C_Master_Receive &rArr; I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_ReadTextToken
</UL>

<P><STRONG><a name="[6e2]"></a>M24SR_Deselect</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, m24sr.o(i.M24SR_Deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = M24SR_Deselect &rArr; M24SR_ReceiveI2Cresponse &rArr; HAL_I2C_Master_Receive &rArr; I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cresponse
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsAnswerReady
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Initialization
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_CloseNDEFSession
</UL>

<P><STRONG><a name="[6e7]"></a>M24SR_GPOInit</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, platform_stm32cube_nucleof401re.o(i.M24SR_GPOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = M24SR_GPOInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Init
</UL>

<P><STRONG><a name="[6e8]"></a>M24SR_GPO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, platform_stm32cube_nucleof401re.o(i.M24SR_GPO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = M24SR_GPO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsAnswerReady
</UL>

<P><STRONG><a name="[6ea]"></a>M24SR_GetSession</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m24sr.o(i.M24SR_GetSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = M24SR_GetSession &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_OpenNDEFSession
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Initialization
</UL>

<P><STRONG><a name="[6ec]"></a>M24SR_GetTick</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, platform_stm32cube_nucleof401re.o(i.M24SR_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = M24SR_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
</UL>

<P><STRONG><a name="[6ed]"></a>M24SR_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, m24sr.o(i.M24SR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = M24SR_Init &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Init
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GPOInit
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_InitStructure
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_OpenNDEFSession
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Initialization
</UL>

<P><STRONG><a name="[6ef]"></a>M24SR_Initialization</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lib_m24sr.o(i.M24SR_Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = M24SR_Initialization &rArr; M24SR_ReadData &rArr; M24SR_ReadBinary &rArr; M24SR_ReceiveI2Cresponse &rArr; HAL_I2C_Master_Receive &rArr; I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectCCfile
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Init
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GetSession
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Deselect
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_Init
</UL>

<P><STRONG><a name="[6e5]"></a>M24SR_IsAnswerReady</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, drv_i2c_m24sr.o(i.M24SR_IsAnswerReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = M24SR_IsAnswerReady &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_WaitMs
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GPO_ReadPin
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectNDEFfile
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectCCfile
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Deselect
</UL>

<P><STRONG><a name="[6f5]"></a>M24SR_KillSession</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, m24sr.o(i.M24SR_KillSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = M24SR_KillSession &rArr; M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_OpenNDEFSession
</UL>

<P><STRONG><a name="[6f6]"></a>M24SR_OpenNDEFSession</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lib_m24sr.o(i.M24SR_OpenNDEFSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = M24SR_OpenNDEFSession &rArr; M24SR_SelectApplication &rArr; M24SR_ReceiveI2Cresponse &rArr; HAL_I2C_Master_Receive &rArr; I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectNDEFfile
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_KillSession
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Init
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GetSession
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_ReadTextToken
</UL>

<P><STRONG><a name="[6eb]"></a>M24SR_PollI2C</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drv_i2c_m24sr.o(i.M24SR_PollI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GetTick
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cresponse
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsAnswerReady
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_KillSession
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GetSession
</UL>

<P><STRONG><a name="[6f8]"></a>M24SR_ReadBinary</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, m24sr.o(i.M24SR_ReadBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = M24SR_ReadBinary &rArr; M24SR_ReceiveI2Cresponse &rArr; HAL_I2C_Master_Receive &rArr; I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cresponse
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsAnswerReady
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsCorrectCRC16Residue
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadData
</UL>

<P><STRONG><a name="[6f2]"></a>M24SR_ReadData</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lib_m24sr.o(i.M24SR_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = M24SR_ReadData &rArr; M24SR_ReadBinary &rArr; M24SR_ReceiveI2Cresponse &rArr; HAL_I2C_Master_Receive &rArr; I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Initialization
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IdentifyNDEF
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IsNDEFPresent
</UL>

<P><STRONG><a name="[6e6]"></a>M24SR_ReceiveI2Cresponse</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, drv_i2c_m24sr.o(i.M24SR_ReceiveI2Cresponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = M24SR_ReceiveI2Cresponse &rArr; HAL_I2C_Master_Receive &rArr; I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectNDEFfile
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectCCfile
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Deselect
</UL>

<P><STRONG><a name="[6f0]"></a>M24SR_SelectApplication</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, m24sr.o(i.M24SR_SelectApplication))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = M24SR_SelectApplication &rArr; M24SR_ReceiveI2Cresponse &rArr; HAL_I2C_Master_Receive &rArr; I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cresponse
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsAnswerReady
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsCorrectCRC16Residue
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_OpenNDEFSession
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Initialization
</UL>

<P><STRONG><a name="[6f1]"></a>M24SR_SelectCCfile</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, m24sr.o(i.M24SR_SelectCCfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = M24SR_SelectCCfile &rArr; M24SR_ReceiveI2Cresponse &rArr; HAL_I2C_Master_Receive &rArr; I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cresponse
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsAnswerReady
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsCorrectCRC16Residue
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Initialization
</UL>

<P><STRONG><a name="[6f7]"></a>M24SR_SelectNDEFfile</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, m24sr.o(i.M24SR_SelectNDEFfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = M24SR_SelectNDEFfile &rArr; M24SR_ReceiveI2Cresponse &rArr; HAL_I2C_Master_Receive &rArr; I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cresponse
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsAnswerReady
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsCorrectCRC16Residue
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_OpenNDEFSession
</UL>

<P><STRONG><a name="[6e4]"></a>M24SR_SendI2Ccommand</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, drv_i2c_m24sr.o(i.M24SR_SendI2Ccommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = M24SR_SendI2Ccommand &rArr; M24SR_PollI2C &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectNDEFfile
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectCCfile
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_KillSession
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GetSession
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Deselect
</UL>

<P><STRONG><a name="[6f3]"></a>M24SR_WaitMs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, platform_stm32cube_nucleof401re.o(i.M24SR_WaitMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M24SR_WaitMs &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsAnswerReady
</UL>

<P><STRONG><a name="[6f9]"></a>MDM_ReCallGMD</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, metadatamanager.o(i.MDM_ReCallGMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MDM_ReCallGMD &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[6fa]"></a>MDM_SaveGMD</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, metadatamanager.o(i.MDM_SaveGMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MDM_SaveGMD &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[354]"></a>MEMSCallback</STRONG> (Thumb, 344 bytes, Stack size 120 bytes, platform_stm32cube_nucleof401re.o(i.MEMSCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MEMSCallback &rArr; RTC_CalendarShow &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalendarShow
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStepHWPedometer
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHWOrientation6D
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
</UL>

<P><STRONG><a name="[1e5]"></a>MQTT_Protocol</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.MQTT_Protocol))
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(i.AzureClient_mqtt_TM)
</UL>
<P><STRONG><a name="[6fc]"></a>Map_AddOrUpdate</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, map.o(i.Map_AddOrUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Map_AddOrUpdate &rArr; insertNewKeyValue &rArr; Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertNewKeyValue
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findKey
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSNSData
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send6DOrientationData
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
</UL>

<P><STRONG><a name="[536]"></a>Map_Clone</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, map.o(i.Map_Clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Map_Clone &rArr; Map_CloneVector &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CloneVector
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
</UL>

<P><STRONG><a name="[538]"></a>Map_Create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, map.o(i.Map_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Map_Create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
</UL>

<P><STRONG><a name="[539]"></a>Map_Destroy</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, map.o(i.Map_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
</UL>

<P><STRONG><a name="[78f]"></a>Map_GetInternals</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, map.o(i.Map_GetInternals))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Map_GetInternals
</UL>
<BR>[Called By]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
</UL>

<P><STRONG><a name="[19b]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[702]"></a>MethodReturn_Create</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, methodreturn.o(i.MethodReturn_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = MethodReturn_Create &rArr; json_parse_string &rArr; parse_value &rArr; parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_string
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reboot
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quit
</UL>

<P><STRONG><a name="[703]"></a>MethodReturn_Destroy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, methodreturn.o(i.MethodReturn_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MethodReturn_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceMethodCallback
</UL>

<P><STRONG><a name="[7be]"></a>MethodReturn_GetReturn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, methodreturn.o(i.MethodReturn_GetReturn))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceMethodCallback
</UL>

<P><STRONG><a name="[704]"></a>MultiTree_AddChild</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, multitree.o(i.MultiTree_AddChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MultiTree_AddChild &rArr; createLeaf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNameValuePair
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseArray
</UL>

<P><STRONG><a name="[339]"></a>MultiTree_AddLeaf</STRONG> (Thumb, 190 bytes, Stack size 152 bytes, multitree.o(i.MultiTree_AddLeaf))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + In Cycle
<LI>Call Chain = MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy_s
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChildByName
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[338]"></a>MultiTree_Create</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, multitree.o(i.MultiTree_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MultiTree_Create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONDecoder_JSON_To_MultiTree
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[33b]"></a>MultiTree_Destroy</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, multitree.o(i.MultiTree_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + In Cycle
<LI>Call Chain = MultiTree_Destroy &rArr;  MultiTree_Destroy (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONDecoder_JSON_To_MultiTree
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallbackStatus
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteMethod
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[564]"></a>MultiTree_GetChild</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, multitree.o(i.MultiTree_GetChild))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
</UL>

<P><STRONG><a name="[450]"></a>MultiTree_GetChildByName</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, multitree.o(i.MultiTree_GetChildByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MultiTree_GetChildByName &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallbackStatus
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCommand
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
</UL>

<P><STRONG><a name="[563]"></a>MultiTree_GetChildCount</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, multitree.o(i.MultiTree_GetChildCount))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
</UL>

<P><STRONG><a name="[565]"></a>MultiTree_GetName</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, multitree.o(i.MultiTree_GetName))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MultiTree_GetName &rArr; STRING_concat &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
</UL>

<P><STRONG><a name="[45e]"></a>MultiTree_GetValue</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, multitree.o(i.MultiTree_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallbackStatus
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCommand
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
</UL>

<P><STRONG><a name="[716]"></a>MultiTree_SetValue</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, multitree.o(i.MultiTree_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MultiTree_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNameValuePair
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseArray
</UL>

<P><STRONG><a name="[707]"></a>NDEF_IdentifyNDEF</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, lib_ndef.o(i.NDEF_IdentifyNDEF))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = NDEF_IdentifyNDEF &rArr; NDEF_IsNDEFPresent &rArr; M24SR_ReadData &rArr; M24SR_ReadBinary &rArr; M24SR_ReceiveI2Cresponse &rArr; HAL_I2C_Master_Receive &rArr; I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadData
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseRecordHeader
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IsNDEFPresent
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_ReadTextToken
</UL>

<P><STRONG><a name="[710]"></a>NDEF_ReadText</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lib_ndef_text.o(i.NDEF_ReadText))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NDEF_ReadText &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_ReadTextToken
</UL>

<P><STRONG><a name="[199]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[711]"></a>OptionHandler_Create</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, optionhandler.o(i.OptionHandler_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OptionHandler_Create &rArr; CreateInternal &rArr; VECTOR_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_retrieveoptions
</UL>

<P><STRONG><a name="[712]"></a>OptionHandler_FeedOptions</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, optionhandler.o(i.OptionHandler_FeedOptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OptionHandler_FeedOptions
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_setoption
</UL>

<P><STRONG><a name="[71e]"></a>Pause</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, azureclient_mqtt_tm.o(i.Pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Pause &rArr; StopTimer1 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopTimer1
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PauseWRAPPER
</UL>

<P><STRONG><a name="[1a0]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[71f]"></a>Play</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, azureclient_mqtt_tm.o(i.Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Play &rArr; StartTimer1 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer1
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayWRAPPER
</UL>

<P><STRONG><a name="[9aa]"></a>QOS_VALUEStrings</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mqtt_client.o(i.QOS_VALUEStrings))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[720]"></a>Quit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, azureclient_mqtt_tm.o(i.Quit))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Quit &rArr; MethodReturn_Create &rArr; json_parse_string &rArr; parse_value &rArr; parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Create
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuitWRAPPER
</UL>

<P><STRONG><a name="[4bd]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[4c3]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[6fb]"></a>RTC_CalendarShow</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, stm32cubertcinterface.o(i.RTC_CalendarShow))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RTC_CalendarShow &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMSCallback
</UL>

<P><STRONG><a name="[4c1]"></a>RTC_EnterInitMode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[721]"></a>Reboot</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, azureclient_mqtt_tm.o(i.Reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Reboot &rArr; MethodReturn_Create &rArr; json_parse_string &rArr; parse_value &rArr; parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Create
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RebootWRAPPER
</UL>

<P><STRONG><a name="[353]"></a>ReportState</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, azureclient_mqtt_tm.o(i.ReportState))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = ReportState &rArr; CodeFirst_SendAsyncReported &rArr; Device_CommitTransaction_ReportedProperties &rArr; DataPublisher_CommitTransaction_ReportedProperties &rArr; DataMarshaller_SendData_ReportedProperties &rArr; json_serialize_to_string_pretty &rArr; json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendReportedState
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_UPDATE_STATUSStrings
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeTelemetryInterval
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeHWMode
</UL>

<P><STRONG><a name="[506]"></a>ReseMetaDataManager</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, metadatamanager.o(i.ReseMetaDataManager))
<BR><BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMetaDataManager
</UL>

<P><STRONG><a name="[520]"></a>SASToken_CreateString</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sastoken.o(i.SASToken_CreateString))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = SASToken_CreateString &rArr; construct_sas_token &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken
</UL>

<P><STRONG><a name="[522]"></a>SASToken_Validate</STRONG> (Thumb, 578 bytes, Stack size 48 bytes, sastoken.o(i.SASToken_Validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SASToken_Validate &rArr; getExpiryValue &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_difftime
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_length
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExpiryValue
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Is_SasToken_Valid
</UL>

<P><STRONG><a name="[728]"></a>SHA1Input</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, azure_sha1.o(i.SHA1Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = SHA1Input &rArr; SHA1ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
</UL>

<P><STRONG><a name="[771]"></a>SHA1Reset</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, azure_sha1.o(i.SHA1Reset))
<BR><BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
</UL>

<P><STRONG><a name="[72a]"></a>SHA1Result</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, azure_sha1.o(i.SHA1Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = SHA1Result &rArr; SHA1Finalize &rArr; SHA1PadMessage &rArr; SHA1ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Finalize
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
</UL>

<P><STRONG><a name="[72b]"></a>SHA224Input</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sha224.o(i.SHA224Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SHA224Input &rArr; SHA256Input &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Input
</UL>
<BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
</UL>

<P><STRONG><a name="[72d]"></a>SHA224Reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha224.o(i.SHA224Reset))
<BR><BR>[Calls]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
</UL>

<P><STRONG><a name="[72f]"></a>SHA224Result</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha224.o(i.SHA224Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SHA224Result &rArr; SHA224_256ResultN &rArr; SHA224_256Finalize &rArr; SHA224_256PadMessage &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256ResultN
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
</UL>

<P><STRONG><a name="[72c]"></a>SHA256Input</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sha224.o(i.SHA256Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SHA256Input &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224Input
</UL>

<P><STRONG><a name="[734]"></a>SHA256Reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha224.o(i.SHA256Reset))
<BR><BR>[Calls]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
</UL>

<P><STRONG><a name="[735]"></a>SHA256Result</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha224.o(i.SHA256Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SHA256Result &rArr; SHA224_256ResultN &rArr; SHA224_256Finalize &rArr; SHA224_256PadMessage &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256ResultN
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
</UL>

<P><STRONG><a name="[736]"></a>SHA384Input</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sha384-512.o(i.SHA384Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = SHA384Input &rArr; SHA512Input &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Input
</UL>
<BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
</UL>

<P><STRONG><a name="[738]"></a>SHA384Reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha384-512.o(i.SHA384Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHA384Reset &rArr; SHA384_512Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
</UL>

<P><STRONG><a name="[73a]"></a>SHA384Result</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha384-512.o(i.SHA384Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = SHA384Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512ResultN
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
</UL>

<P><STRONG><a name="[737]"></a>SHA512Input</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, sha384-512.o(i.SHA512Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = SHA512Input &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384Input
</UL>

<P><STRONG><a name="[73f]"></a>SHA512Reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha384-512.o(i.SHA512Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHA512Reset &rArr; SHA384_512Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
</UL>

<P><STRONG><a name="[740]"></a>SHA512Result</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha384-512.o(i.SHA512Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512ResultN
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
</UL>

<P><STRONG><a name="[523]"></a>STRING_TOKENIZER_create</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, string_tokenizer.o(i.STRING_TOKENIZER_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = STRING_TOKENIZER_create &rArr; STRING_TOKENIZER_create_from_char &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
</UL>

<P><STRONG><a name="[741]"></a>STRING_TOKENIZER_create_from_char</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, string_tokenizer.o(i.STRING_TOKENIZER_create_from_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = STRING_TOKENIZER_create_from_char &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
</UL>

<P><STRONG><a name="[525]"></a>STRING_TOKENIZER_destroy</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, string_tokenizer.o(i.STRING_TOKENIZER_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = STRING_TOKENIZER_destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
</UL>

<P><STRONG><a name="[524]"></a>STRING_TOKENIZER_get_next_token</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, string_tokenizer.o(i.STRING_TOKENIZER_get_next_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = STRING_TOKENIZER_get_next_token &rArr; STRING_copy_n &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy_n
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
</UL>

<P><STRONG><a name="[3f8]"></a>STRING_c_str</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, strings.o(i.STRING_c_str))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Register
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubscribeToMqttProtocol
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTransportProviderIfNecessary
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetString
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_product_info
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
</UL>

<P><STRONG><a name="[42a]"></a>STRING_clone</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strings.o(i.STRING_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = STRING_clone &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_GetHostname
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
</UL>

<P><STRONG><a name="[332]"></a>STRING_concat</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, strings.o(i.STRING_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = STRING_concat &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetName
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindValue
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindReportedProperty
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
</UL>

<P><STRONG><a name="[334]"></a>STRING_concat_with_STRING</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, strings.o(i.STRING_concat_with_STRING))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = STRING_concat_with_STRING &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
</UL>

<P><STRONG><a name="[514]"></a>STRING_construct</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, strings.o(i.STRING_construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = STRING_construct &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_platform_info
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Is_SasToken_Valid
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe_DeviceTwin
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe_DeviceMethod
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
</UL>

<P><STRONG><a name="[41b]"></a>STRING_construct_n</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, strings.o(i.STRING_construct_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = STRING_construct_n &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[515]"></a>STRING_construct_sprintf</STRONG> (Thumb, 134 bytes, Stack size 552 bytes, strings.o(i.STRING_construct_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildConfigForUsername
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_product_info
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[744]"></a>STRING_copy</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, strings.o(i.STRING_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STRING_copy &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
</UL>

<P><STRONG><a name="[742]"></a>STRING_copy_n</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, strings.o(i.STRING_copy_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = STRING_copy_n &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
</UL>

<P><STRONG><a name="[3f7]"></a>STRING_delete</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, strings.o(i.STRING_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = STRING_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetOption
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Destroy
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Is_SasToken_Valid
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceTwin
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DeviceMethod_Response
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_product_info
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
</UL>

<P><STRONG><a name="[435]"></a>STRING_length</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, strings.o(i.STRING_length))
<BR><BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
</UL>

<P><STRONG><a name="[3f5]"></a>STRING_new</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, strings.o(i.STRING_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONEncoder_EncodeTree
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_trace_log_handle
</UL>

<P><STRONG><a name="[3c1]"></a>STRING_new_with_memory</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, strings.o(i.STRING_new_with_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STRING_new_with_memory &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
</UL>

<P><STRONG><a name="[746]"></a>STRING_sprintf</STRONG> (Thumb, 140 bytes, Stack size 560 bytes, strings.o(i.STRING_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishVariableHeader
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnectVariableHeader
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToUnsubscribePacket
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToSubscribePacket
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[19e]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[507]"></a>SaveMetaDataManager</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, metadatamanager.o(i.SaveMetaDataManager))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SaveMetaDataManager &rArr; UserFunctionForSavingFlash &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFunctionForSavingFlash
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMetaDataManager
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[3dc]"></a>Schema_AddDeviceRef</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, schema.o(i.Schema_AddDeviceRef))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
</UL>

<P><STRONG><a name="[749]"></a>Schema_AddModelActionArgument</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, schema.o(i.Schema_AddModelActionArgument))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Schema_AddModelActionArgument &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[74a]"></a>Schema_AddModelDesiredProperty</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, schema.o(i.Schema_AddModelDesiredProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Schema_AddModelDesiredProperty &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[74b]"></a>Schema_AddModelMethodArgument</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, schema.o(i.Schema_AddModelMethodArgument))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Schema_AddModelMethodArgument &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[74c]"></a>Schema_AddModelModel</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, schema.o(i.Schema_AddModelModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Schema_AddModelModel &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[74d]"></a>Schema_AddModelProperty</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, schema.o(i.Schema_AddModelProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Schema_AddModelProperty &rArr; AddModelProperty &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddModelProperty
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[74e]"></a>Schema_AddModelReportedProperty</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, schema.o(i.Schema_AddModelReportedProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Schema_AddModelReportedProperty &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[74f]"></a>Schema_AddStructTypeProperty</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, schema.o(i.Schema_AddStructTypeProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Schema_AddStructTypeProperty &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildStructTypes
</UL>

<P><STRONG><a name="[3ee]"></a>Schema_Create</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, schema.o(i.Schema_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Schema_Create &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_create
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_RegisterSchema
</UL>

<P><STRONG><a name="[750]"></a>Schema_CreateModelAction</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, schema.o(i.Schema_CreateModelAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Schema_CreateModelAction &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[751]"></a>Schema_CreateModelMethod</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, schema.o(i.Schema_CreateModelMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Schema_CreateModelMethod &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_create
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[752]"></a>Schema_CreateModelType</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, schema.o(i.Schema_CreateModelType))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Schema_CreateModelType &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_create
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModelTypes
</UL>

<P><STRONG><a name="[753]"></a>Schema_CreateStructType</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, schema.o(i.Schema_CreateStructType))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Schema_CreateStructType &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildStructTypes
</UL>

<P><STRONG><a name="[3f1]"></a>Schema_Destroy</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, schema.o(i.Schema_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Schema_Destroy &rArr; VECTOR_erase &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_erase
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyStruct
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_RegisterSchema
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_DestroyIfUnused
</UL>

<P><STRONG><a name="[3e2]"></a>Schema_DestroyIfUnused</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, schema.o(i.Schema_DestroyIfUnused))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Schema_DestroyIfUnused &rArr; Schema_Destroy &rArr; VECTOR_erase &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetSchemaForModelType
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_DestroyDevice
</UL>

<P><STRONG><a name="[454]"></a>Schema_GetActionArgumentName</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, schema.o(i.Schema_GetActionArgumentName))
<BR><BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
</UL>

<P><STRONG><a name="[455]"></a>Schema_GetActionArgumentType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, schema.o(i.Schema_GetActionArgumentType))
<BR><BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
</UL>

<P><STRONG><a name="[45b]"></a>Schema_GetMethodArgumentName</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, schema.o(i.Schema_GetMethodArgumentName))
<BR><BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
</UL>

<P><STRONG><a name="[45c]"></a>Schema_GetMethodArgumentType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, schema.o(i.Schema_GetMethodArgumentType))
<BR><BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
</UL>

<P><STRONG><a name="[453]"></a>Schema_GetModelActionArgumentByIndex</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, schema.o(i.Schema_GetModelActionArgumentByIndex))
<BR><BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
</UL>

<P><STRONG><a name="[452]"></a>Schema_GetModelActionArgumentCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, schema.o(i.Schema_GetModelActionArgumentCount))
<BR><BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
</UL>

<P><STRONG><a name="[451]"></a>Schema_GetModelActionByName</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, schema.o(i.Schema_GetModelActionByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetModelActionByName &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
</UL>

<P><STRONG><a name="[349]"></a>Schema_GetModelByName</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, schema.o(i.Schema_GetModelByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetModelByName &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>

<P><STRONG><a name="[755]"></a>Schema_GetModelDesiredPropertyByIndex</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, schema.o(i.Schema_GetModelDesiredPropertyByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Schema_GetModelDesiredPropertyByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinitializeDesiredProperties
</UL>

<P><STRONG><a name="[756]"></a>Schema_GetModelDesiredPropertyCount</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, schema.o(i.Schema_GetModelDesiredPropertyCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Schema_GetModelDesiredPropertyCount
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinitializeDesiredProperties
</UL>

<P><STRONG><a name="[7bc]"></a>Schema_GetModelDesiredProperty_offset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, schema.o(i.Schema_GetModelDesiredProperty_offset))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinitializeDesiredProperties
</UL>

<P><STRONG><a name="[7bb]"></a>Schema_GetModelDesiredProperty_pfDesiredPropertyDeinitialize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, schema.o(i.Schema_GetModelDesiredProperty_pfDesiredPropertyDeinitialize))
<BR><BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinitializeDesiredProperties
</UL>

<P><STRONG><a name="[80d]"></a>Schema_GetModelDesiredProperty_pfDesiredPropertyInitialize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, schema.o(i.Schema_GetModelDesiredProperty_pfDesiredPropertyInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
</UL>

<P><STRONG><a name="[45a]"></a>Schema_GetModelMethodArgumentByIndex</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, schema.o(i.Schema_GetModelMethodArgumentByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Schema_GetModelMethodArgumentByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
</UL>

<P><STRONG><a name="[459]"></a>Schema_GetModelMethodArgumentCount</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, schema.o(i.Schema_GetModelMethodArgumentCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Schema_GetModelMethodArgumentCount
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
</UL>

<P><STRONG><a name="[458]"></a>Schema_GetModelMethodByName</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, schema.o(i.Schema_GetModelMethodByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Schema_GetModelMethodByName &rArr; VECTOR_find_if
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
</UL>

<P><STRONG><a name="[757]"></a>Schema_GetModelModelByIndex_Offset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, schema.o(i.Schema_GetModelModelByIndex_Offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Schema_GetModelModelByIndex_Offset
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinitializeDesiredProperties
</UL>

<P><STRONG><a name="[748]"></a>Schema_GetModelModelByName</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, schema.o(i.Schema_GetModelModelByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Schema_GetModelModelByName &rArr; VECTOR_find_if
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMethodPathAndExecuteMethod
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanActionPathAndExecuteAction
</UL>

<P><STRONG><a name="[758]"></a>Schema_GetModelModelCount</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, schema.o(i.Schema_GetModelModelCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Schema_GetModelModelCount
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinitializeDesiredProperties
</UL>

<P><STRONG><a name="[759]"></a>Schema_GetModelModelyByIndex</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, schema.o(i.Schema_GetModelModelyByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Schema_GetModelModelyByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinitializeDesiredProperties
</UL>

<P><STRONG><a name="[3ea]"></a>Schema_GetModelName</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, schema.o(i.Schema_GetModelName))
<BR><BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeMethod
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeAction
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceReportedProperties
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAllDeviceProperties
</UL>

<P><STRONG><a name="[464]"></a>Schema_GetPropertyName</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, schema.o(i.Schema_GetPropertyName))
<BR><BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
</UL>

<P><STRONG><a name="[465]"></a>Schema_GetPropertyType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, schema.o(i.Schema_GetPropertyType))
<BR><BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
</UL>

<P><STRONG><a name="[3ed]"></a>Schema_GetSchemaByNamespace</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, schema.o(i.Schema_GetSchemaByNamespace))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Schema_GetSchemaByNamespace &rArr; VECTOR_find_if
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_RegisterSchema
</UL>

<P><STRONG><a name="[45d]"></a>Schema_GetSchemaForModelType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, schema.o(i.Schema_GetSchemaForModelType))
<BR><BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeMethod
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCommand
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_DestroyIfUnused
</UL>

<P><STRONG><a name="[461]"></a>Schema_GetStructTypeByName</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, schema.o(i.Schema_GetStructTypeByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Schema_GetStructTypeByName &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
</UL>

<P><STRONG><a name="[463]"></a>Schema_GetStructTypePropertyByIndex</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, schema.o(i.Schema_GetStructTypePropertyByIndex))
<BR><BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
</UL>

<P><STRONG><a name="[462]"></a>Schema_GetStructTypePropertyCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, schema.o(i.Schema_GetStructTypePropertyCount))
<BR><BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
</UL>

<P><STRONG><a name="[448]"></a>Schema_ModelPropertyByPathExists</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, schema.o(i.Schema_ModelPropertyByPathExists))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Schema_ModelPropertyByPathExists &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
</UL>

<P><STRONG><a name="[44a]"></a>Schema_ModelReportedPropertyByPathExists</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, schema.o(i.Schema_ModelReportedPropertyByPathExists))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Schema_ModelReportedPropertyByPathExists &rArr; VECTOR_find_if
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_find_if
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
</UL>

<P><STRONG><a name="[3e1]"></a>Schema_ReleaseDeviceRef</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, schema.o(i.Schema_ReleaseDeviceRef))
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_DestroyDevice
</UL>

<P><STRONG><a name="[39b]"></a>Sensor_IO_Init_IKS01A1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, x_nucleo_iks01a1.o(i.Sensor_IO_Init_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS3_ACCELERO_Init
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS0_ACCELERO_Init
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS25HB_PRESSURE_Init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LIS3MDL_MAGNETO_Init
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS25HB_TEMPERATURE_Init
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_TEMPERATURE_Init
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_HUMIDITY_Init
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS3_GYRO_Init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS0_GYRO_Init
</UL>

<P><STRONG><a name="[39d]"></a>Sensor_IO_Init_IKS01A2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, x_nucleo_iks01a2.o(i.Sensor_IO_Init_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Sensor_IO_Init_IKS01A2 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_HUMIDITY_Init
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_GYRO_Init
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_ACCELERO_Init
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM303AGR_ACCELERO_Init
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_TEMPERATURE_Init
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM303AGR_MAGNETO_Init
</UL>

<P><STRONG><a name="[4f9]"></a>Sensor_IO_Read</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, x_nucleo_iks01a2.o(i.Sensor_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>

<P><STRONG><a name="[4fc]"></a>Sensor_IO_Write</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, x_nucleo_iks01a2.o(i.Sensor_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_WriteReg
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_WriteReg
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>

<P><STRONG><a name="[714]"></a>SkipWhiteSpaces</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, jsondecoder.o(i.SkipWhiteSpaces))
<BR><BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseValue
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseOpenCurly
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseObjectOrArray
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseObject
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNameValuePair
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseColon
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseArray
</UL>

<P><STRONG><a name="[352]"></a>StartTimer1</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, platform_stm32cube_nucleof401re.o(i.StartTimer1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = StartTimer1 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_IT
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Error_Handler
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play
</UL>

<P><STRONG><a name="[35b]"></a>StopTimer1</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, platform_stm32cube_nucleof401re.o(i.StopTimer1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = StopTimer1 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_IT
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Error_Handler
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pause
</UL>

<P><STRONG><a name="[80c]"></a>SynchronizationAgentConvertNTPTime2EpochTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32cubertcinterface.o(i.SynchronizationAgentConvertNTPTime2EpochTime))
<BR><BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_bg96_socket_data_received
</UL>

<P><STRONG><a name="[1a1]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1db]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[1b9]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM1_CC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1bb]"></a>TIM3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = TIM3_IRQHandler &rArr; BG96_timers_callback &rArr; BG96_socket_recv &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_timers_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4c7]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[4d9]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_IT
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_IT
</UL>

<P><STRONG><a name="[4d2]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[762]"></a>TT4_Init</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lib_tagtype4.o(i.TT4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = TT4_Init &rArr; M24SR_Initialization &rArr; M24SR_ReadData &rArr; M24SR_ReadBinary &rArr; M24SR_ReceiveI2Cresponse &rArr; HAL_I2C_Master_Receive &rArr; I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Initialization
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[763]"></a>TT4_ReadTextToken</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lib_tagtype4.o(i.TT4_ReadTextToken))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = TT4_ReadTextToken &rArr; NDEF_IdentifyNDEF &rArr; NDEF_IsNDEFPresent &rArr; M24SR_ReadData &rArr; M24SR_ReadBinary &rArr; M24SR_ReceiveI2Cresponse &rArr; HAL_I2C_Master_Receive &rArr; I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_OpenNDEFSession
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_CloseNDEFSession
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadText
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IdentifyNDEF
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[764]"></a>ThreadAPI_Sleep</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, platform_stm32cube_nucleof401re.o(i.ThreadAPI_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ThreadAPI_Sleep &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_connection
</UL>

<P><STRONG><a name="[48d]"></a>TimingSystemGetSystemTime</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, stm32cubertcinterface.o(i.TimingSystemGetSystemTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send6DOrientationData
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTheModelInstance
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>

<P><STRONG><a name="[765]"></a>TimingSystemSetSystemTime</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, stm32cubertcinterface.o(i.TimingSystemSetSystemTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TimingSystemSetSystemTime &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_bg96_socket_data_received
</UL>

<P><STRONG><a name="[769]"></a>UART_Global_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_uart.o(i.UART_Global_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART_Global_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[75d]"></a>URL_Encode</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, urlencode.o(i.URL_Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = URL_Encode &rArr; STRING_new_with_memory &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new_with_memory
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_PrintableCharSize
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_PrintableChar
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
</UL>

<P><STRONG><a name="[1c3]"></a>USART1_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USART1_IRQHandler &rArr; BG96_rx_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_rx_callback
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Error_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[80a]"></a>USHABlockSize</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usha.o(i.USHABlockSize))
<BR><BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacReset
</UL>

<P><STRONG><a name="[80b]"></a>USHAHashSize</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usha.o(i.USHAHashSize))
<BR><BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacReset
</UL>

<P><STRONG><a name="[76f]"></a>USHAInput</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usha.o(i.USHAInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = USHAInput &rArr; SHA512Input &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Input
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Input
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384Input
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Input
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224Input
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacResult
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacReset
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInput
</UL>

<P><STRONG><a name="[770]"></a>USHAReset</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, usha.o(i.USHAReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USHAReset &rArr; SHA512Reset &rArr; SHA384_512Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Reset
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Reset
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384Reset
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Reset
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacResult
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacReset
</UL>

<P><STRONG><a name="[772]"></a>USHAResult</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, usha.o(i.USHAResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Result
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Result
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384Result
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Result
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224Result
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacResult
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacReset
</UL>

<P><STRONG><a name="[19d]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[487]"></a>UserFunctionForErasingFlash</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, platform_stm32cube_nucleof401re.o(i.UserFunctionForErasingFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UserFunctionForErasingFlash &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseMetaDataManager
</UL>

<P><STRONG><a name="[747]"></a>UserFunctionForSavingFlash</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, platform_stm32cube_nucleof401re.o(i.UserFunctionForSavingFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UserFunctionForSavingFlash &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMetaDataManager
</UL>

<P><STRONG><a name="[46f]"></a>VECTOR_clear</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, vector.o(i.VECTOR_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VECTOR_clear &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
</UL>

<P><STRONG><a name="[422]"></a>VECTOR_create</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, vector.o(i.VECTOR_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VECTOR_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateInternal
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CreateTransaction_ReportedProperties
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Create
</UL>

<P><STRONG><a name="[445]"></a>VECTOR_destroy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, vector.o(i.VECTOR_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VECTOR_destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_DestroyTransaction_ReportedProperties
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMethods
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMethod
</UL>

<P><STRONG><a name="[43a]"></a>VECTOR_element</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, vector.o(i.VECTOR_element))
<BR><BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_FeedOptions
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelReportedPropertyByPathExists
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelPropertyByPathExists
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_DestroyTransaction_ReportedProperties
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodArgumentByIndex
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelyByIndex
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelByIndex_Offset
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredPropertyByIndex
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMethods
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMethod
</UL>

<P><STRONG><a name="[754]"></a>VECTOR_erase</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, vector.o(i.VECTOR_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = VECTOR_erase &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
</UL>

<P><STRONG><a name="[44b]"></a>VECTOR_find_if</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, vector.o(i.VECTOR_find_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VECTOR_find_if
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelReportedPropertyByPathExists
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelByName
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodByName
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetSchemaByNamespace
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelReportedProperty
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelMethodArgument
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelDesiredProperty
</UL>

<P><STRONG><a name="[44c]"></a>VECTOR_push_back</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, vector.o(i.VECTOR_push_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Create
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelReportedProperty
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelModel
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelMethodArgument
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelDesiredProperty
</UL>

<P><STRONG><a name="[439]"></a>VECTOR_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vector.o(i.VECTOR_size))
<BR><BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_FeedOptions
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelReportedPropertyByPathExists
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_ModelPropertyByPathExists
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_DestroyTransaction_ReportedProperties
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CommitTransaction_ReportedProperties
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodArgumentCount
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelyByIndex
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelCount
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredPropertyCount
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMethods
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMethod
</UL>

<P><STRONG><a name="[359]"></a>WaitAllTheMessages</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, azureclient_mqtt_tm.o(i.WaitAllTheMessages))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = WaitAllTheMessages &rArr; IoTHubClient_LL_DoWork &rArr; DoTimeouts &rArr; IoTHubMessage_Destroy &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_DoWork
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
</UL>

<P><STRONG><a name="[77a]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a0f]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[342]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMetaDataManager
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDM_SaveGMD
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDM_ReCallGMD
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMetaDataManager
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseMetaDataManager
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_bg96_socket_data_received
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_bg96_socket_client_remote_server_closed
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_bg96_connected
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MEM1_Sensors
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWTilt
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWSingleTap
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWPedometer
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWOrientation6D
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFreeFall
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWDoubleTap
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopTimer1
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer1
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMSCallback
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureExit
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hardware_poll
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportState
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reboot
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quit
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pause
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOn
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOff
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBlink
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeTelemetryInterval
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeHWMode
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSNSData
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConfirmationCallback
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send6DOrientationData
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveMessageCallback
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallbackStatus
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallback
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonCallback
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStepHWPedometer
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHWOrientation6D
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWWakeUp
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWTilt
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWSingleTap
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWPedometer
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWOrientation6D
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWFreeFall
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWDoubleTap
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWWakeUp
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReCallMetaDataManager
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOut_MDM_LicenseStatus
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOut_MDM_GMDStatus
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_init
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_send
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_power
</UL>

<P><STRONG><a name="[a10]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[a11]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[77c]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a12]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[381]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_key_usage
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_ext_key_usage
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_cert_type
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_serial_gets
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_key_size_helper
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket
</UL>

<P><STRONG><a name="[a13]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[a14]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[77d]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a15]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[34b]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMetaDataManager
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_BG96_mac
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalendarShow
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportState
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_string
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseArray
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_send
</UL>

<P><STRONG><a name="[a16]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[a17]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[77e]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a18]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[a19]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[a1a]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[743]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf_s
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
</UL>

<P><STRONG><a name="[30c]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf_s
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanfu
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanfllu
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanflf
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanff
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanfd
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number_value
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[a1b]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[184]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_destroy
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_destroy
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_remove
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_destroy
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_destroy
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_create
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_pending_io
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Destroy
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Create
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Destroy
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_DestroyDevice
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportState
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceMethodCallback
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSNSData
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConfirmationCallback
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send6DOrientationData
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveMessageCallback
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallbackStatus
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_destroy
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_create
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_destroy
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_create
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_entropy_poll
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_recv
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertNewKeyValue
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_IncreaseStorageKeysValues
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_DecreaseStorageKeysValues
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CloneVector
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Destroy
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Clone
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Destroy
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Create_Internal
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_prepend
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_create
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Destroy
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Create
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_erase
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_clear
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_n
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_destroy
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateInternal
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_destroy
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_deinit
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SendMessageDisposition
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_ProcessItem
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DeviceMethod_Response
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_operation_complete_callback
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_proxy_data
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyRetryLogic
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetMessageId
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetCorrelationId
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendComplete
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_DeviceMethodComplete
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_twin_data_destroy
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_twin_data_create
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoTimeouts
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_DestroyTransaction_ReportedProperties
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Destroy
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CreateTransaction_ReportedProperties
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Create
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CancelTransaction
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_Destroy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteMethod
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_Destroy
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMethodPathAndExecuteMethod
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanActionPathAndExecuteAction
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateStructType
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelAction
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Create
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddStructTypeProperty
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelReportedProperty
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelModel
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelMethodArgument
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelDesiredProperty
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelActionArgument
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Destroy
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Create
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Deinit
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyDevice
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyHalfBakedComplexType
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyStruct
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyProperty
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMethodArgument
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMethod
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyActionArgument
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyAction
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddModelProperty
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_destroy
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_mqtt_options
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> platform.o(.data)
<LI> parson.o(.data)
</UL>
<P><STRONG><a name="[77f]"></a>__hardfp___mathlib_tofloat</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, narrow.o(i.__hardfp___mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __hardfp___mathlib_tofloat &rArr; frexp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[75c]"></a>__hardfp_difftime</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, difftime.o(i.__hardfp_difftime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_difftime &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_difftime
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
</UL>

<P><STRONG><a name="[784]"></a>__hardfp_strtod</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, strtod.o(i.__hardfp_strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanflf
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number_value
</UL>

<P><STRONG><a name="[785]"></a>__hardfp_strtof</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, strtof.o(i.__hardfp_strtof))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtof_int
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanff
</UL>

<P><STRONG><a name="[197]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_create
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_create
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_create
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_add
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_create
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_pending_io
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Create
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceMethodCallback
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveMessageCallback
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTwinCallbackStatus
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_create
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_create
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_entropy_poll
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new_with_memory
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_pre_build
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Create
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CloneVector
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Clone
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REFCOUNT_CONSTBUFFER_HANDLE_DATA_Create
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Create_Internal
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_prepend
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_create
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_clone
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_safemalloc
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Create
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_n
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_clone
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_create
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateInternal
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_ProcessItem
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRetryLogic
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_twin_data_create
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_StartTransaction
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_CreateTransaction_ReportedProperties
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_Create
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_Create
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_Create
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMethodPathAndExecuteMethod
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanActionPathAndExecuteAction
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateStructType
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelAction
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Create
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddStructTypeProperty
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelReportedProperty
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelMethodArgument
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelDesiredProperty
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelActionArgument
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Create
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Create
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddModelProperty
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_create
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_readUTF
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> parson.o(.data)
</UL>
<P><STRONG><a name="[327]"></a>__mathlib_narrow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __mathlib_narrow &rArr; __hardfp___mathlib_tofloat &rArr; frexp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtof_int
</UL>

<P><STRONG><a name="[a1c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[a1d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[a1e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[783]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[32d]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[7ab]"></a>byteutil_writeByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mqtt_codec.o(i.byteutil_writeByte))
<BR><BR>[Called By]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnectVariableHeader
</UL>

<P><STRONG><a name="[7a2]"></a>byteutil_writeInt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mqtt_codec.o(i.byteutil_writeInt))
<BR><BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeUTF
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructSubscibeTypeVariableHeader
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishVariableHeader
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnectVariableHeader
</UL>

<P><STRONG><a name="[78c]"></a>byteutil_writeUTF</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mqtt_codec.o(i.byteutil_writeUTF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = byteutil_writeUTF &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishVariableHeader
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnectVariableHeader
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToUnsubscribePacket
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToSubscribePacket
</UL>

<P><STRONG><a name="[1e1]"></a>fgetc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, console.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fgetc &rArr; uartReceiveChar &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartReceiveChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char_file.o(.text)
</UL>
<P><STRONG><a name="[25b]"></a>fputc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, console.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fputc &rArr; uartSendChar &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[780]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = frexp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[801]"></a>get_ctime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, agenttime_stm32cube.o(i.get_ctime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = get_ctime &rArr; ctime &rArr; asctime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_bg96_socket_data_received
</UL>

<P><STRONG><a name="[3cd]"></a>get_difftime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, agenttime_stm32cube.o(i.get_difftime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = get_difftime &rArr; __hardfp_difftime &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_seconds_since_epoch
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRetry
</UL>

<P><STRONG><a name="[3cb]"></a>get_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, agenttime_stm32cube.o(i.get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_seconds_since_epoch
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRetryTimer
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRetry
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_MessageCallback
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLogTime
</UL>

<P><STRONG><a name="[491]"></a>gmtime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timingsystem.o(i.gmtime))
<BR><BR>[Called By]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemSetSystemTime
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDateTimeOffset
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_current_time
</UL>

<P><STRONG><a name="[a1f]"></a>gmtimeMDK</STRONG> (Thumb, 286 bytes, Stack size 20 bytes, timingsystem.o(i.gmtimeMDK), UNUSED)

<P><STRONG><a name="[806]"></a>gsm_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bg96_interface.o(i.gsm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = gsm_init &rArr; BG96_init &rArr; BG96_receive &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_power_on
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_init
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_check_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[4e2]"></a>hmac</STRONG> (Thumb, 56 bytes, Stack size 392 bytes, hmac.o(i.hmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacResult
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacReset
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInput
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMACSHA256_ComputeHash
</UL>

<P><STRONG><a name="[808]"></a>hmacInput</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hmac.o(i.hmacInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = hmacInput &rArr; USHAInput &rArr; SHA512Input &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac
</UL>

<P><STRONG><a name="[807]"></a>hmacReset</STRONG> (Thumb, 188 bytes, Stack size 456 bytes, hmac.o(i.hmacReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAHashSize
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHABlockSize
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac
</UL>

<P><STRONG><a name="[809]"></a>hmacResult</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, hmac.o(i.hmacResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = hmacResult &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAResult
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAReset
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USHAInput
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac
</UL>

<P><STRONG><a name="[371]"></a>ind_bg96_connected</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, platform_stm32cube_nucleof401re.o(i.ind_bg96_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ind_bg96_connected &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_init
</UL>

<P><STRONG><a name="[38b]"></a>ind_bg96_socket_client_remote_server_closed</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, platform_stm32cube_nucleof401re.o(i.ind_bg96_socket_client_remote_server_closed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ind_bg96_socket_client_remote_server_closed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_recv
</UL>

<P><STRONG><a name="[389]"></a>ind_bg96_socket_data_received</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, platform_stm32cube_nucleof401re.o(i.ind_bg96_socket_data_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ind_bg96_socket_data_received &rArr; get_ctime &rArr; ctime &rArr; asctime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalBufferPushBuffer
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemSetSystemTime
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynchronizationAgentConvertNTPTime2EpochTime
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ctime
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_recv
</UL>

<P><STRONG><a name="[818]"></a>json_array_get_count</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, parson.o(i.json_array_get_count))
<BR><BR>[Called By]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_get_value
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[817]"></a>json_array_get_value</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, parson.o(i.json_array_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = json_array_get_value
</UL>
<BR>[Calls]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_get_count
</UL>
<BR>[Called By]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[815]"></a>json_array_get_wrapping_value</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, parson.o(i.json_array_get_wrapping_value))
<BR><BR>[Called By]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_add
</UL>

<P><STRONG><a name="[830]"></a>json_free_serialized_string</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, parson.o(i.json_free_serialized_string))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_string_pretty
</UL>

<P><STRONG><a name="[438]"></a>json_object</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, parson.o(i.json_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = json_object &rArr; json_value_get_object
</UL>
<BR>[Calls]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_object
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
</UL>

<P><STRONG><a name="[43d]"></a>json_object_dotset_value</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, parson.o(i.json_object_dotset_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = json_object_dotset_value &rArr; json_object_set_value &rArr; json_object_add &rArr; json_object_get_value &rArr; json_object_nget_value &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_object
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_value
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_object
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parson_strndup
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_add
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
</UL>

<P><STRONG><a name="[824]"></a>json_object_get_count</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, parson.o(i.json_object_get_count))
<BR><BR>[Called By]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_value
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_name
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_nget_value
</UL>

<P><STRONG><a name="[823]"></a>json_object_get_name</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, parson.o(i.json_object_get_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = json_object_get_name
</UL>
<BR>[Calls]<UL><LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_count
</UL>
<BR>[Called By]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[820]"></a>json_object_get_object</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, parson.o(i.json_object_get_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = json_object_get_object &rArr; json_object_get_value &rArr; json_object_nget_value &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_object
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
</UL>

<P><STRONG><a name="[81b]"></a>json_object_get_value</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, parson.o(i.json_object_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = json_object_get_value &rArr; json_object_nget_value &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_nget_value
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_value
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_object
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_add
</UL>

<P><STRONG><a name="[81e]"></a>json_object_get_wrapping_value</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, parson.o(i.json_object_get_wrapping_value))
<BR><BR>[Called By]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_value
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_add
</UL>

<P><STRONG><a name="[821]"></a>json_object_set_value</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, parson.o(i.json_object_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = json_object_set_value &rArr; json_object_add &rArr; json_object_get_value &rArr; json_object_nget_value &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_wrapping_value
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_value
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_count
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_add
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
</UL>

<P><STRONG><a name="[43b]"></a>json_parse_string</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, parson.o(i.json_parse_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = json_parse_string &rArr; parse_value &rArr; parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>
<BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Create
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
</UL>

<P><STRONG><a name="[827]"></a>json_serialization_size_pretty</STRONG> (Thumb, 36 bytes, Stack size 1112 bytes, parson.o(i.json_serialization_size_pretty))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_string_pretty
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_pretty
</UL>

<P><STRONG><a name="[82a]"></a>json_serialize_to_buffer_pretty</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, parson.o(i.json_serialize_to_buffer_pretty))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialization_size_pretty
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_string_pretty
</UL>

<P><STRONG><a name="[43e]"></a>json_serialize_to_string_pretty</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, parson.o(i.json_serialize_to_string_pretty))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = json_serialize_to_string_pretty &rArr; json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_pretty
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialization_size_pretty
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_free_serialized_string
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
</UL>

<P><STRONG><a name="[43c]"></a>json_value_free</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, parson.o(i.json_value_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = json_value_free &rArr; json_object_free &rArr;  json_value_free (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_type
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_free
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_free
</UL>
<BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Create
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_value
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_free
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_free
</UL>

<P><STRONG><a name="[82c]"></a>json_value_get_array</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, parson.o(i.json_value_get_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = json_value_get_array
</UL>
<BR>[Calls]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[82e]"></a>json_value_get_boolean</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, parson.o(i.json_value_get_boolean))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = json_value_get_boolean
</UL>
<BR>[Calls]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[82f]"></a>json_value_get_number</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, parson.o(i.json_value_get_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = json_value_get_number
</UL>
<BR>[Calls]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[819]"></a>json_value_get_object</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, parson.o(i.json_value_get_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = json_value_get_object
</UL>
<BR>[Calls]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_object
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[82d]"></a>json_value_get_string</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, parson.o(i.json_value_get_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = json_value_get_string
</UL>
<BR>[Calls]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[82b]"></a>json_value_get_type</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, parson.o(i.json_value_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_string
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_object
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_number
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_boolean
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_array
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[831]"></a>json_value_init_array</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, parson.o(i.json_value_init_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = json_value_init_array &rArr; json_array_init
</UL>
<BR>[Calls]<UL><LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_init
</UL>
<BR>[Called By]<UL><LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
</UL>

<P><STRONG><a name="[997]"></a>json_value_init_boolean</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, parson.o(i.json_value_init_boolean))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = json_value_init_boolean
</UL>
<BR>[Called By]<UL><LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_boolean_value
</UL>

<P><STRONG><a name="[999]"></a>json_value_init_null</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, parson.o(i.json_value_init_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = json_value_init_null
</UL>
<BR>[Called By]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_null_value
</UL>

<P><STRONG><a name="[99b]"></a>json_value_init_number</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, parson.o(i.json_value_init_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = json_value_init_number
</UL>
<BR>[Called By]<UL><LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number_value
</UL>

<P><STRONG><a name="[437]"></a>json_value_init_object</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, parson.o(i.json_value_init_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = json_value_init_object &rArr; json_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
</UL>

<P><STRONG><a name="[1da]"></a>main</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = main &rArr; AzureClient_mqtt_TM &rArr; ReportState &rArr; CodeFirst_SendAsyncReported &rArr; Device_CommitTransaction_ReportedProperties &rArr; DataPublisher_CommitTransaction_ReportedProperties &rArr; DataMarshaller_SendData_ReportedProperties &rArr; json_serialize_to_string_pretty &rArr; json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[331]"></a>mallocAndStrcpy_s</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, crt_abstractions.o(i.mallocAndStrcpy_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy_s
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Create
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_charz_no_quotes
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_charz
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertNewKeyValue
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CloneVector
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Create
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetMessageId
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetCorrelationId
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Clone
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted_ReportedProperty
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMarshaller_SendData_ReportedProperties
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteMethod
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateStructType
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelAction
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Create
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddStructTypeProperty
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelReportedProperty
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelModel
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelMethodArgument
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelDesiredProperty
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelActionArgument
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddModelProperty
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloneMqttOptions
</UL>

<P><STRONG><a name="[794]"></a>mbedtls_aes_crypt_cbc</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, aes.o(i.mbedtls_aes_crypt_cbc))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_cbc_wrap
</UL>

<P><STRONG><a name="[795]"></a>mbedtls_aes_crypt_ecb</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, aes.o(i.mbedtls_aes_crypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_encrypt
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_ecb_wrap
</UL>

<P><STRONG><a name="[83a]"></a>mbedtls_aes_decrypt</STRONG> (Thumb, 976 bytes, Stack size 44 bytes, aes.o(i.mbedtls_aes_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[83b]"></a>mbedtls_aes_encrypt</STRONG> (Thumb, 976 bytes, Stack size 44 bytes, aes.o(i.mbedtls_aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[797]"></a>mbedtls_aes_free</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, aes.o(i.mbedtls_aes_free))
<BR><BR>[Calls]<UL><LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
</UL>

<P><STRONG><a name="[796]"></a>mbedtls_aes_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, aes.o(i.mbedtls_aes_init))
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
</UL>

<P><STRONG><a name="[798]"></a>mbedtls_aes_setkey_dec</STRONG> (Thumb, 200 bytes, Stack size 320 bytes, aes.o(i.mbedtls_aes_setkey_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_dec_wrap
</UL>

<P><STRONG><a name="[799]"></a>mbedtls_aes_setkey_enc</STRONG> (Thumb, 410 bytes, Stack size 20 bytes, aes.o(i.mbedtls_aes_setkey_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_aes_setkey_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_enc_wrap
</UL>

<P><STRONG><a name="[83d]"></a>mbedtls_asn1_get_alg</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, asn1parse.o(i.mbedtls_asn1_get_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg_null
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
</UL>

<P><STRONG><a name="[841]"></a>mbedtls_asn1_get_alg_null</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, asn1parse.o(i.mbedtls_asn1_get_alg_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg_null
</UL>

<P><STRONG><a name="[842]"></a>mbedtls_asn1_get_bitstring</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, asn1parse.o(i.mbedtls_asn1_get_bitstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ns_cert_type
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_key_usage
</UL>

<P><STRONG><a name="[843]"></a>mbedtls_asn1_get_bitstring_null</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, asn1parse.o(i.mbedtls_asn1_get_bitstring_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
</UL>

<P><STRONG><a name="[844]"></a>mbedtls_asn1_get_bool</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, asn1parse.o(i.mbedtls_asn1_get_bool))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_asn1_get_bool &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
</UL>

<P><STRONG><a name="[845]"></a>mbedtls_asn1_get_int</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, asn1parse.o(i.mbedtls_asn1_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_version
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>

<P><STRONG><a name="[840]"></a>mbedtls_asn1_get_len</STRONG> (Thumb, 192 bytes, Stack size 20 bytes, asn1parse.o(i.mbedtls_asn1_get_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
</UL>

<P><STRONG><a name="[846]"></a>mbedtls_asn1_get_mpi</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, asn1parse.o(i.mbedtls_asn1_get_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_asn1_get_mpi &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
</UL>

<P><STRONG><a name="[848]"></a>mbedtls_asn1_get_sequence_of</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, asn1parse.o(i.mbedtls_asn1_get_sequence_of))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_asn1_get_sequence_of &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ext_key_usage
</UL>

<P><STRONG><a name="[83e]"></a>mbedtls_asn1_get_tag</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, asn1parse.o(i.mbedtls_asn1_get_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_version
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_uid
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_dates
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_hash_alg
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
</UL>

<P><STRONG><a name="[8c1]"></a>mbedtls_base64_decode</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, base64.o(i.mbedtls_base64_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_base64_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[849]"></a>mbedtls_cipher_auth_decrypt</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, cipher.o(i.mbedtls_cipher_auth_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[84b]"></a>mbedtls_cipher_auth_encrypt</STRONG> (Thumb, 72 bytes, Stack size 64 bytes, cipher.o(i.mbedtls_cipher_auth_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
</UL>

<P><STRONG><a name="[84d]"></a>mbedtls_cipher_crypt</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, cipher.o(i.mbedtls_cipher_crypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_reset
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[850]"></a>mbedtls_cipher_finish</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, cipher.o(i.mbedtls_cipher_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_cipher_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_block_size
</UL>
<BR>[Called By]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[852]"></a>mbedtls_cipher_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cipher.o(i.mbedtls_cipher_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
</UL>

<P><STRONG><a name="[915]"></a>mbedtls_cipher_info_from_type</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[88f]"></a>mbedtls_cipher_info_from_values</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, cipher.o(i.mbedtls_cipher_info_from_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_cipher_info_from_values
</UL>
<BR>[Called By]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[854]"></a>mbedtls_cipher_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_init))
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
</UL>

<P><STRONG><a name="[84f]"></a>mbedtls_cipher_reset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_reset))
<BR><BR>[Called By]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[84e]"></a>mbedtls_cipher_set_iv</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, cipher.o(i.mbedtls_cipher_set_iv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_cipher_set_iv &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[856]"></a>mbedtls_cipher_set_padding_mode</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_set_padding_mode))
<BR><BR>[Called By]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[890]"></a>mbedtls_cipher_setkey</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, cipher.o(i.mbedtls_cipher_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[855]"></a>mbedtls_cipher_setup</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, cipher.o(i.mbedtls_cipher_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_padding_mode
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[7fd]"></a>mbedtls_cipher_update</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, cipher.o(i.mbedtls_cipher_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_block_size
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gen_table
</UL>

<P><STRONG><a name="[85b]"></a>mbedtls_ctr_drbg_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ctr_drbg_free
</UL>
<BR>[Calls]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_destroy
</UL>

<P><STRONG><a name="[85d]"></a>mbedtls_ctr_drbg_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_init))
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
</UL>

<P><STRONG><a name="[26e]"></a>mbedtls_ctr_drbg_random</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 1388<LI>Call Chain = mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls_stm32cube_nucleo.o(i.mbedtls_init)
</UL>
<P><STRONG><a name="[85e]"></a>mbedtls_ctr_drbg_random_with_add</STRONG> (Thumb, 186 bytes, Stack size 88 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_random_with_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 1380<LI>Call Chain = mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random
</UL>

<P><STRONG><a name="[85f]"></a>mbedtls_ctr_drbg_reseed</STRONG> (Thumb, 104 bytes, Stack size 408 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_reseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1292<LI>Call Chain = mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>

<P><STRONG><a name="[860]"></a>mbedtls_ctr_drbg_seed</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_seed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1380<LI>Call Chain = mbedtls_ctr_drbg_seed &rArr; mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
</UL>
<BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
</UL>

<P><STRONG><a name="[861]"></a>mbedtls_ctr_drbg_seed_entropy_len</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, ctr_drbg.o(i.mbedtls_ctr_drbg_seed_entropy_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 1356<LI>Call Chain = mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
</UL>

<P><STRONG><a name="[862]"></a>mbedtls_debug_print_buf</STRONG> (Thumb, 260 bytes, Stack size 592 bytes, debug.o(i.mbedtls_debug_print_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[863]"></a>mbedtls_debug_print_crt</STRONG> (Thumb, 158 bytes, Stack size 1576 bytes, debug.o(i.mbedtls_debug_print_crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2848<LI>Call Chain = mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_line_by_line
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[7b8]"></a>mbedtls_debug_print_ecp</STRONG> (Thumb, 114 bytes, Stack size 560 bytes, debug.o(i.mbedtls_debug_print_ecp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</UL>

<P><STRONG><a name="[7b7]"></a>mbedtls_debug_print_mpi</STRONG> (Thumb, 340 bytes, Stack size 568 bytes, debug.o(i.mbedtls_debug_print_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[865]"></a>mbedtls_debug_print_msg</STRONG> (Thumb, 92 bytes, Stack size 544 bytes, debug.o(i.mbedtls_debug_print_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_truncated_hmac_ext
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_point_formats_ext
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_elliptic_curves_ext
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_session_ticket_ext
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_renegotiation_ext
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_max_fragment_length_ext
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_extended_ms_ext
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypt_then_mac_ext
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_supported_point_formats_ext
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_generate_random
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_timer
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[866]"></a>mbedtls_debug_print_ret</STRONG> (Thumb, 88 bytes, Stack size 552 bytes, debug.o(i.mbedtls_debug_print_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = mbedtls_debug_print_ret &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[867]"></a>mbedtls_ecdh_calc_secret</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, ecdh.o(i.mbedtls_ecdh_calc_secret))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = mbedtls_ecdh_calc_secret &rArr; mbedtls_ecdh_compute_shared &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>
<BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[868]"></a>mbedtls_ecdh_compute_shared</STRONG> (Thumb, 92 bytes, Stack size 80 bytes, ecdh.o(i.mbedtls_ecdh_compute_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = mbedtls_ecdh_compute_shared &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
</UL>

<P><STRONG><a name="[86e]"></a>mbedtls_ecdh_free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ecdh.o(i.mbedtls_ecdh_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>

<P><STRONG><a name="[870]"></a>mbedtls_ecdh_gen_public</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, ecdh.o(i.mbedtls_ecdh_gen_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
</UL>

<P><STRONG><a name="[872]"></a>mbedtls_ecdh_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ecdh.o(i.mbedtls_ecdh_init))
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>

<P><STRONG><a name="[873]"></a>mbedtls_ecdh_make_public</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, ecdh.o(i.mbedtls_ecdh_make_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_gen_public
</UL>
<BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[875]"></a>mbedtls_ecdh_read_params</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ecdh.o(i.mbedtls_ecdh_read_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_ecdh_read_params &rArr; mbedtls_ecp_tls_read_point &rArr; mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
</UL>
<BR>[Called By]<UL><LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
</UL>

<P><STRONG><a name="[878]"></a>mbedtls_ecp_check_privkey</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_check_privkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_ecp_check_privkey &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</UL>

<P><STRONG><a name="[7c0]"></a>mbedtls_ecp_check_pub_priv</STRONG> (Thumb, 174 bytes, Stack size 200 bytes, ecp.o(i.mbedtls_ecp_check_pub_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = mbedtls_ecp_check_pub_priv &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_check_pair
</UL>

<P><STRONG><a name="[86b]"></a>mbedtls_ecp_check_pubkey</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_check_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
</UL>
<BR>[Called By]<UL><LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
</UL>

<P><STRONG><a name="[7c4]"></a>mbedtls_ecp_copy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_ecp_copy &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[87c]"></a>mbedtls_ecp_curve_info_from_grp_id</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, ecp.o(i.mbedtls_ecp_curve_info_from_grp_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mbedtls_ecp_curve_info_from_grp_id
</UL>
<BR>[Calls]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_list
</UL>
<BR>[Called By]<UL><LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_elliptic_curves_ext
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</UL>

<P><STRONG><a name="[87e]"></a>mbedtls_ecp_curve_info_from_tls_id</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, ecp.o(i.mbedtls_ecp_curve_info_from_tls_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mbedtls_ecp_curve_info_from_tls_id
</UL>
<BR>[Calls]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_list
</UL>
<BR>[Called By]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
</UL>

<P><STRONG><a name="[87d]"></a>mbedtls_ecp_curve_list</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ecp.o(i.mbedtls_ecp_curve_list))
<BR><BR>[Called By]<UL><LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_grp_id_list
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_tls_id
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
</UL>

<P><STRONG><a name="[871]"></a>mbedtls_ecp_gen_keypair</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_gen_keypair))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_gen_public
</UL>

<P><STRONG><a name="[87f]"></a>mbedtls_ecp_gen_keypair_base</STRONG> (Thumb, 144 bytes, Stack size 120 bytes, ecp.o(i.mbedtls_ecp_gen_keypair_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>

<P><STRONG><a name="[87b]"></a>mbedtls_ecp_group_copy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ecp.o(i.mbedtls_ecp_group_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_ecp_group_copy &rArr; mbedtls_ecp_group_load &rArr; ecp_group_load &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>
<BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
</UL>

<P><STRONG><a name="[86f]"></a>mbedtls_ecp_group_free</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_group_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
</UL>

<P><STRONG><a name="[87a]"></a>mbedtls_ecp_group_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ecp.o(i.mbedtls_ecp_group_init))
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
</UL>

<P><STRONG><a name="[880]"></a>mbedtls_ecp_group_load</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, ecp_curves.o(i.mbedtls_ecp_group_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_ecp_group_load &rArr; ecp_group_load &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
</UL>
<BR>[Called By]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>

<P><STRONG><a name="[882]"></a>mbedtls_ecp_grp_id_list</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, ecp.o(i.mbedtls_ecp_grp_id_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_ecp_grp_id_list
</UL>
<BR>[Calls]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_list
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[86d]"></a>mbedtls_ecp_is_zero</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_is_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ecp_is_zero &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[7c1]"></a>mbedtls_ecp_keypair_free</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_keypair_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_free_wrap
</UL>

<P><STRONG><a name="[7bf]"></a>mbedtls_ecp_keypair_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_keypair_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_alloc_wrap
</UL>

<P><STRONG><a name="[86c]"></a>mbedtls_ecp_mul</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, ecp.o(i.mbedtls_ecp_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[7e7]"></a>mbedtls_ecp_point_free</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_point_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[7e8]"></a>mbedtls_ecp_point_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_point_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[883]"></a>mbedtls_ecp_point_read_binary</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ecp.o(i.mbedtls_ecp_point_read_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
</UL>

<P><STRONG><a name="[884]"></a>mbedtls_ecp_point_write_binary</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, ecp.o(i.mbedtls_ecp_point_write_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
</UL>

<P><STRONG><a name="[7ca]"></a>mbedtls_ecp_set_zero</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_set_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ecp_set_zero &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[876]"></a>mbedtls_ecp_tls_read_group</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ecp.o(i.mbedtls_ecp_tls_read_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_ecp_tls_read_group &rArr; mbedtls_ecp_group_load &rArr; ecp_group_load &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_tls_id
</UL>
<BR>[Called By]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
</UL>

<P><STRONG><a name="[877]"></a>mbedtls_ecp_tls_read_point</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ecp.o(i.mbedtls_ecp_tls_read_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_ecp_tls_read_point &rArr; mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
</UL>

<P><STRONG><a name="[874]"></a>mbedtls_ecp_tls_write_point</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ecp.o(i.mbedtls_ecp_tls_write_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_ecp_tls_write_point &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
</UL>

<P><STRONG><a name="[88a]"></a>mbedtls_entropy_add_source</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, entropy.o(i.mbedtls_entropy_add_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_entropy_add_source
</UL>
<BR>[Called By]<UL><LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
</UL>

<P><STRONG><a name="[885]"></a>mbedtls_entropy_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, entropy.o(i.mbedtls_entropy_free))
<BR><BR>[Calls]<UL><LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_destroy
</UL>

<P><STRONG><a name="[26d]"></a>mbedtls_entropy_func</STRONG> (Thumb, 188 bytes, Stack size 96 bytes, entropy.o(i.mbedtls_entropy_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = mbedtls_entropy_func &rArr; entropy_gather_internal &rArr; entropy_update &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls_stm32cube_nucleo.o(i.mbedtls_init)
</UL>
<P><STRONG><a name="[889]"></a>mbedtls_entropy_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, entropy.o(i.mbedtls_entropy_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_entropy_init &rArr; mbedtls_entropy_add_source
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_add_source
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
</UL>

<P><STRONG><a name="[84a]"></a>mbedtls_gcm_auth_decrypt</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, gcm.o(i.mbedtls_gcm_auth_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_decrypt
</UL>

<P><STRONG><a name="[84c]"></a>mbedtls_gcm_crypt_and_tag</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, gcm.o(i.mbedtls_gcm_crypt_and_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_encrypt
</UL>

<P><STRONG><a name="[88d]"></a>mbedtls_gcm_finish</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, gcm.o(i.mbedtls_gcm_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_gcm_finish &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
</UL>

<P><STRONG><a name="[7fb]"></a>mbedtls_gcm_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gcm.o(i.mbedtls_gcm_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_gcm_free &rArr; mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_free
</UL>

<P><STRONG><a name="[7fa]"></a>mbedtls_gcm_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gcm.o(i.mbedtls_gcm_init))
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_alloc
</UL>

<P><STRONG><a name="[7f9]"></a>mbedtls_gcm_setkey</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, gcm.o(i.mbedtls_gcm_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = mbedtls_gcm_setkey &rArr; gcm_gen_table &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_values
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gen_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_aes_setkey_wrap
</UL>

<P><STRONG><a name="[88c]"></a>mbedtls_gcm_starts</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, gcm.o(i.mbedtls_gcm_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
</UL>

<P><STRONG><a name="[857]"></a>mbedtls_gcm_update</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, gcm.o(i.mbedtls_gcm_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + In Cycle
<LI>Call Chain = mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>

<P><STRONG><a name="[26b]"></a>mbedtls_hardware_poll</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, azureclient_mqtt_tm.o(i.mbedtls_hardware_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_hardware_poll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entropy.o(i.mbedtls_entropy_init)
</UL>
<P><STRONG><a name="[8ec]"></a>mbedtls_md</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, md.o(i.mbedtls_md))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md
</UL>
<BR>[Called By]<UL><LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[8f1]"></a>mbedtls_md_finish</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[89f]"></a>mbedtls_md_free</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_free
</UL>
<BR>[Calls]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[96e]"></a>mbedtls_md_get_name</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_get_name))
<BR><BR>[Called By]<UL><LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
</UL>

<P><STRONG><a name="[8e9]"></a>mbedtls_md_get_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[9c0]"></a>mbedtls_md_hmac_finish</STRONG> (Thumb, 90 bytes, Stack size 88 bytes, md.o(i.mbedtls_md_hmac_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_md_hmac_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[9c1]"></a>mbedtls_md_hmac_reset</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, md.o(i.mbedtls_md_hmac_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_hmac_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[8a1]"></a>mbedtls_md_hmac_starts</STRONG> (Thumb, 168 bytes, Stack size 88 bytes, md.o(i.mbedtls_md_hmac_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[9bf]"></a>mbedtls_md_hmac_update</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_hmac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_hmac_update
</UL>
<BR>[Called By]<UL><LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[8e8]"></a>mbedtls_md_info_from_type</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[8ea]"></a>mbedtls_md_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_init))
<BR><BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
</UL>

<P><STRONG><a name="[9c2]"></a>mbedtls_md_process</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_process
</UL>
<BR>[Called By]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[8eb]"></a>mbedtls_md_setup</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, md.o(i.mbedtls_md_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_md_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[8ef]"></a>mbedtls_md_starts</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[8f0]"></a>mbedtls_md_update</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_update
</UL>
<BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[7db]"></a>mbedtls_mpi_add_abs</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_add_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
</UL>

<P><STRONG><a name="[7c9]"></a>mbedtls_mpi_add_mpi</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_add_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[7d8]"></a>mbedtls_mpi_bitlen</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_bitlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[8a2]"></a>mbedtls_mpi_cmp_abs</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, bignum.o(i.mbedtls_mpi_cmp_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[7c3]"></a>mbedtls_mpi_cmp_int</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, bignum.o(i.mbedtls_mpi_cmp_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[7ce]"></a>mbedtls_mpi_cmp_mpi</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, bignum.o(i.mbedtls_mpi_cmp_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[7cf]"></a>mbedtls_mpi_copy</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[8a4]"></a>mbedtls_mpi_div_mpi</STRONG> (Thumb, 792 bytes, Stack size 120 bytes, bignum.o(i.mbedtls_mpi_div_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_int_div_int
</UL>
<BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[8a5]"></a>mbedtls_mpi_exp_mod</STRONG> (Thumb, 1146 bytes, Stack size 1648 bytes, bignum.o(i.mbedtls_mpi_exp_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montg_init
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[7ef]"></a>mbedtls_mpi_fill_random</STRONG> (Thumb, 52 bytes, Stack size 1040 bytes, bignum.o(i.mbedtls_mpi_fill_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[7d0]"></a>mbedtls_mpi_free</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>

<P><STRONG><a name="[8aa]"></a>mbedtls_mpi_gcd</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, bignum.o(i.mbedtls_mpi_gcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbedtls_mpi_gcd &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[7d4]"></a>mbedtls_mpi_get_bit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_mpi_get_bit))
<BR><BR>[Called By]<UL><LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_fixed
</UL>

<P><STRONG><a name="[7dc]"></a>mbedtls_mpi_grow</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
</UL>

<P><STRONG><a name="[7c5]"></a>mbedtls_mpi_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_mpi_init))
<BR><BR>[Called By]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[7ec]"></a>mbedtls_mpi_inv_mod</STRONG> (Thumb, 628 bytes, Stack size 128 bytes, bignum.o(i.mbedtls_mpi_inv_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[8ab]"></a>mbedtls_mpi_lsb</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_lsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_lsb
</UL>
<BR>[Called By]<UL><LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
</UL>

<P><STRONG><a name="[7ea]"></a>mbedtls_mpi_lset</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_lset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
</UL>

<P><STRONG><a name="[7e0]"></a>mbedtls_mpi_mod_mpi</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_mod_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[7cc]"></a>mbedtls_mpi_mul_int</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_mul_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[7c6]"></a>mbedtls_mpi_mul_mpi</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, bignum.o(i.mbedtls_mpi_mul_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[847]"></a>mbedtls_mpi_read_binary</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_read_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[7e3]"></a>mbedtls_mpi_safe_cond_assign</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_safe_cond_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_safe_cond_assign &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[7d5]"></a>mbedtls_mpi_shift_l</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_shift_l))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_shift_l &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
</UL>

<P><STRONG><a name="[7da]"></a>mbedtls_mpi_shift_r</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_shift_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_mpi_shift_r &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
</UL>

<P><STRONG><a name="[7ee]"></a>mbedtls_mpi_shrink</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_shrink))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_shrink &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
</UL>

<P><STRONG><a name="[869]"></a>mbedtls_mpi_size</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
</UL>

<P><STRONG><a name="[7cd]"></a>mbedtls_mpi_sub_abs</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_sub_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_negative
</UL>

<P><STRONG><a name="[7d2]"></a>mbedtls_mpi_sub_int</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_sub_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[7c8]"></a>mbedtls_mpi_sub_mpi</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_sub_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[86a]"></a>mbedtls_mpi_write_binary</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_write_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[8ae]"></a>mbedtls_oid_get_attr_short_name</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oid.o(i.mbedtls_oid_get_attr_short_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_oid_get_attr_short_name &rArr; oid_x520_attr_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x520_attr_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
</UL>

<P><STRONG><a name="[8b0]"></a>mbedtls_oid_get_ec_grp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oid.o(i.mbedtls_oid_get_ec_grp))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_oid_get_ec_grp &rArr; oid_grp_id_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_grp_id_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>

<P><STRONG><a name="[8b2]"></a>mbedtls_oid_get_extended_key_usage</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oid.o(i.mbedtls_oid_get_extended_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_oid_get_extended_key_usage &rArr; oid_ext_key_usage_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_ext_key_usage_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_ext_key_usage
</UL>

<P><STRONG><a name="[8b4]"></a>mbedtls_oid_get_md_alg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oid.o(i.mbedtls_oid_get_md_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_oid_get_md_alg &rArr; oid_md_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_md_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_hash_alg
</UL>

<P><STRONG><a name="[8ee]"></a>mbedtls_oid_get_oid_by_md</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, oid.o(i.mbedtls_oid_get_oid_by_md))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_oid_get_oid_by_md
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>

<P><STRONG><a name="[8b6]"></a>mbedtls_oid_get_pk_alg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oid.o(i.mbedtls_oid_get_pk_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_oid_get_pk_alg &rArr; oid_pk_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_pk_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
</UL>

<P><STRONG><a name="[8b8]"></a>mbedtls_oid_get_sig_alg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_sig_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_sig_alg &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
</UL>

<P><STRONG><a name="[8ba]"></a>mbedtls_oid_get_sig_alg_desc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oid.o(i.mbedtls_oid_get_sig_alg_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_oid_get_sig_alg_desc &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
</UL>

<P><STRONG><a name="[8bb]"></a>mbedtls_oid_get_x509_ext_type</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oid.o(i.mbedtls_oid_get_x509_ext_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_oid_get_x509_ext_type &rArr; oid_x509_ext_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x509_ext_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[8bd]"></a>mbedtls_pem_free</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pem.o(i.mbedtls_pem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
</UL>

<P><STRONG><a name="[957]"></a>mbedtls_pem_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pem.o(i.mbedtls_pem_init))
<BR><BR>[Called By]<UL><LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
</UL>

<P><STRONG><a name="[8bf]"></a>mbedtls_pem_read_buffer</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, pem.o(i.mbedtls_pem_read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_pem_read_buffer &rArr; mbedtls_base64_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_decode
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
</UL>

<P><STRONG><a name="[8d1]"></a>mbedtls_pk_can_do</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_can_do))
<BR><BR>[Called By]<UL><LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_from_pk
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
</UL>

<P><STRONG><a name="[7b6]"></a>mbedtls_pk_debug</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pk.o(i.mbedtls_pk_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_pk_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
</UL>

<P><STRONG><a name="[8c2]"></a>mbedtls_pk_free</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pk.o(i.mbedtls_pk_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_pk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[8c5]"></a>mbedtls_pk_get_bitlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_get_bitlen))
<BR><BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_len
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
</UL>

<P><STRONG><a name="[94e]"></a>mbedtls_pk_get_name</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_get_name))
<BR><BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[95b]"></a>mbedtls_pk_get_type</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[8c8]"></a>mbedtls_pk_info_from_type</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[8c6]"></a>mbedtls_pk_parse_subpubkey</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, pkparse.o(i.mbedtls_pk_parse_subpubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = mbedtls_pk_parse_subpubkey &rArr; pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[8c9]"></a>mbedtls_pk_setup</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pk.o(i.mbedtls_pk_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[8cd]"></a>mbedtls_pk_sign</STRONG> (Thumb, 72 bytes, Stack size 72 bytes, pk.o(i.mbedtls_pk_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_pk_sign &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[8cf]"></a>mbedtls_pk_verify</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, pk.o(i.mbedtls_pk_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
</UL>

<P><STRONG><a name="[8d0]"></a>mbedtls_pk_verify_ext</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, pk.o(i.mbedtls_pk_verify_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 3248<LI>Call Chain = mbedtls_pk_verify_ext &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_len
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[8d3]"></a>mbedtls_rsa_check_privkey</STRONG> (Thumb, 490 bytes, Stack size 192 bytes, rsa.o(i.mbedtls_rsa_check_privkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[8d5]"></a>mbedtls_rsa_check_pub_priv</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rsa.o(i.mbedtls_rsa_check_pub_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_pair_wrap
</UL>

<P><STRONG><a name="[8d4]"></a>mbedtls_rsa_check_pubkey</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rsa.o(i.mbedtls_rsa_check_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_rsa_check_pubkey &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[8d6]"></a>mbedtls_rsa_free</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, rsa.o(i.mbedtls_rsa_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_rsa_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free_wrap
</UL>

<P><STRONG><a name="[8d7]"></a>mbedtls_rsa_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rsa.o(i.mbedtls_rsa_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_rsa_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_set_padding
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alloc_wrap
</UL>

<P><STRONG><a name="[8d9]"></a>mbedtls_rsa_pkcs1_decrypt</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, rsa.o(i.mbedtls_rsa_pkcs1_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 3240<LI>Call Chain = mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt_wrap
</UL>

<P><STRONG><a name="[8dc]"></a>mbedtls_rsa_pkcs1_encrypt</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_pkcs1_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144<LI>Call Chain = mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_wrap
</UL>

<P><STRONG><a name="[8df]"></a>mbedtls_rsa_pkcs1_sign</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_pkcs1_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 2216<LI>Call Chain = mbedtls_rsa_pkcs1_sign &rArr; mbedtls_rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sign_wrap
</UL>

<P><STRONG><a name="[8e2]"></a>mbedtls_rsa_pkcs1_verify</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_pkcs1_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 3272<LI>Call Chain = mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_wrap
</UL>

<P><STRONG><a name="[8e5]"></a>mbedtls_rsa_private</STRONG> (Thumb, 342 bytes, Stack size 72 bytes, rsa.o(i.mbedtls_rsa_private))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032<LI>Call Chain = mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>
<BR>[Called By]<UL><LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[8e7]"></a>mbedtls_rsa_public</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[8db]"></a>mbedtls_rsa_rsaes_oaep_decrypt</STRONG> (Thumb, 376 bytes, Stack size 1160 bytes, rsa.o(i.mbedtls_rsa_rsaes_oaep_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 3192<LI>Call Chain = mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>

<P><STRONG><a name="[8de]"></a>mbedtls_rsa_rsaes_oaep_encrypt</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, rsa.o(i.mbedtls_rsa_rsaes_oaep_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[8da]"></a>mbedtls_rsa_rsaes_pkcs1_v15_decrypt</STRONG> (Thumb, 286 bytes, Stack size 1064 bytes, rsa.o(i.mbedtls_rsa_rsaes_pkcs1_v15_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 3096<LI>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>

<P><STRONG><a name="[8dd]"></a>mbedtls_rsa_rsaes_pkcs1_v15_encrypt</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, rsa.o(i.mbedtls_rsa_rsaes_pkcs1_v15_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088<LI>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[8e0]"></a>mbedtls_rsa_rsassa_pkcs1_v15_sign</STRONG> (Thumb, 406 bytes, Stack size 72 bytes, rsa.o(i.mbedtls_rsa_rsassa_pkcs1_v15_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_oid_by_md
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>

<P><STRONG><a name="[8e3]"></a>mbedtls_rsa_rsassa_pkcs1_v15_verify</STRONG> (Thumb, 464 bytes, Stack size 1080 bytes, rsa.o(i.mbedtls_rsa_rsassa_pkcs1_v15_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 3112<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>

<P><STRONG><a name="[8e1]"></a>mbedtls_rsa_rsassa_pss_sign</STRONG> (Thumb, 362 bytes, Stack size 144 bytes, rsa.o(i.mbedtls_rsa_rsassa_pss_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176<LI>Call Chain = mbedtls_rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>

<P><STRONG><a name="[8e4]"></a>mbedtls_rsa_rsassa_pss_verify</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, rsa.o(i.mbedtls_rsa_rsassa_pss_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 3232<LI>Call Chain = mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>

<P><STRONG><a name="[8d2]"></a>mbedtls_rsa_rsassa_pss_verify_ext</STRONG> (Thumb, 472 bytes, Stack size 1152 bytes, rsa.o(i.mbedtls_rsa_rsassa_pss_verify_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 3184<LI>Call Chain = mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
</UL>

<P><STRONG><a name="[8d8]"></a>mbedtls_rsa_set_padding</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rsa.o(i.mbedtls_rsa_set_padding))
<BR><BR>[Called By]<UL><LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
</UL>

<P><STRONG><a name="[2c8]"></a>mbedtls_sha1</STRONG> (Thumb, 50 bytes, Stack size 112 bytes, sha1.o(i.mbedtls_sha1))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = mbedtls_sha1 &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[8f7]"></a>mbedtls_sha1_clone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha1_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_clone_wrap
</UL>

<P><STRONG><a name="[8f5]"></a>mbedtls_sha1_finish</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, sha1.o(i.mbedtls_sha1_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_finish_wrap
</UL>

<P><STRONG><a name="[8f6]"></a>mbedtls_sha1_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_free))
<BR><BR>[Calls]<UL><LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_free
</UL>

<P><STRONG><a name="[8f2]"></a>mbedtls_sha1_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_init))
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_alloc
</UL>

<P><STRONG><a name="[8f9]"></a>mbedtls_sha1_process</STRONG> (Thumb, 4684 bytes, Stack size 108 bytes, sha1.o(i.mbedtls_sha1_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mbedtls_sha1_process
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_process_wrap
</UL>

<P><STRONG><a name="[8f3]"></a>mbedtls_sha1_starts</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_starts))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts_wrap
</UL>

<P><STRONG><a name="[8f4]"></a>mbedtls_sha1_update</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, sha1.o(i.mbedtls_sha1_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_process
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update_wrap
</UL>

<P><STRONG><a name="[8fa]"></a>mbedtls_sha256</STRONG> (Thumb, 54 bytes, Stack size 128 bytes, sha256.o(i.mbedtls_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_wrap
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_wrap
</UL>

<P><STRONG><a name="[900]"></a>mbedtls_sha256_clone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha256.o(i.mbedtls_sha256_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_clone_wrap
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[8fe]"></a>mbedtls_sha256_finish</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, sha256.o(i.mbedtls_sha256_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Called By]<UL><LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_finish_wrap
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[8ff]"></a>mbedtls_sha256_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sha256.o(i.mbedtls_sha256_free))
<BR><BR>[Calls]<UL><LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[8fb]"></a>mbedtls_sha256_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha256.o(i.mbedtls_sha256_init))
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[902]"></a>mbedtls_sha256_process</STRONG> (Thumb, 318 bytes, Stack size 316 bytes, sha256.o(i.mbedtls_sha256_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = mbedtls_sha256_process
</UL>
<BR>[Called By]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_process_wrap
</UL>

<P><STRONG><a name="[8fc]"></a>mbedtls_sha256_starts</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, sha256.o(i.mbedtls_sha256_starts))
<BR><BR>[Called By]<UL><LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_starts_wrap
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_starts_wrap
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>

<P><STRONG><a name="[8fd]"></a>mbedtls_sha256_update</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, sha256.o(i.mbedtls_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_process
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update_wrap
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_sha256
</UL>

<P><STRONG><a name="[7f2]"></a>mbedtls_sha512</STRONG> (Thumb, 54 bytes, Stack size 240 bytes, sha512.o(i.mbedtls_sha512))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_wrap
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_wrap
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
</UL>

<P><STRONG><a name="[905]"></a>mbedtls_sha512_clone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha512.o(i.mbedtls_sha512_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha512_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_clone_wrap
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
</UL>

<P><STRONG><a name="[887]"></a>mbedtls_sha512_finish</STRONG> (Thumb, 754 bytes, Stack size 40 bytes, sha512.o(i.mbedtls_sha512_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_finish_wrap
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
</UL>

<P><STRONG><a name="[904]"></a>mbedtls_sha512_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sha512.o(i.mbedtls_sha512_free))
<BR><BR>[Calls]<UL><LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_ctx_free
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
</UL>

<P><STRONG><a name="[903]"></a>mbedtls_sha512_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha512.o(i.mbedtls_sha512_init))
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_ctx_alloc
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha384
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
</UL>

<P><STRONG><a name="[907]"></a>mbedtls_sha512_process</STRONG> (Thumb, 3228 bytes, Stack size 880 bytes, sha512.o(i.mbedtls_sha512_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = mbedtls_sha512_process
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_process_wrap
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
</UL>

<P><STRONG><a name="[888]"></a>mbedtls_sha512_starts</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, sha512.o(i.mbedtls_sha512_starts))
<BR><BR>[Called By]<UL><LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_starts_wrap
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_starts_wrap
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>

<P><STRONG><a name="[7f3]"></a>mbedtls_sha512_update</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, sha512.o(i.mbedtls_sha512_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_process
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_update_wrap
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_sha384
</UL>

<P><STRONG><a name="[908]"></a>mbedtls_ssl_check_cert_usage</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_check_cert_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_ssl_check_cert_usage &rArr; mbedtls_x509_crt_check_extended_key_usage &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_extended_key_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[936]"></a>mbedtls_ssl_check_curve</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_check_curve))
<BR><BR>[Called By]<UL><LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</UL>

<P><STRONG><a name="[9d6]"></a>mbedtls_ssl_check_sig_hash</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_check_sig_hash))
<BR><BR>[Called By]<UL><LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
</UL>

<P><STRONG><a name="[91d]"></a>mbedtls_ssl_ciphersuite_from_id</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_ciphersuite_from_id))
<BR><BR>[Called By]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_list_ciphersuites
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_name
</UL>

<P><STRONG><a name="[90b]"></a>mbedtls_ssl_close_notify</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_close_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_destroy
</UL>

<P><STRONG><a name="[898]"></a>mbedtls_ssl_conf_authmode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_authmode))
<BR><BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
</UL>

<P><STRONG><a name="[9e8]"></a>mbedtls_ssl_conf_ca_chain</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_ca_chain))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_setoption
</UL>

<P><STRONG><a name="[90e]"></a>mbedtls_ssl_conf_endpoint</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_endpoint))
<BR><BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[899]"></a>mbedtls_ssl_conf_min_version</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_min_version))
<BR><BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
</UL>

<P><STRONG><a name="[897]"></a>mbedtls_ssl_conf_rng</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_rng))
<BR><BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
</UL>

<P><STRONG><a name="[90f]"></a>mbedtls_ssl_conf_transport</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_transport))
<BR><BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[896]"></a>mbedtls_ssl_config_defaults</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_config_defaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ssl_config_defaults &rArr; mbedtls_ssl_list_ciphersuites
</UL>
<BR>[Calls]<UL><LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_grp_id_list
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_list_ciphersuites
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_transport
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_endpoint
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
</UL>

<P><STRONG><a name="[911]"></a>mbedtls_ssl_config_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_config_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_config_free &rArr; ssl_key_cert_free
</UL>
<BR>[Calls]<UL><LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_key_cert_free
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_destroy
</UL>

<P><STRONG><a name="[894]"></a>mbedtls_ssl_config_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_config_init))
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
</UL>

<P><STRONG><a name="[914]"></a>mbedtls_ssl_derive_keys</STRONG> (Thumb, 1800 bytes, Stack size 440 bytes, ssl_tls.o(i.mbedtls_ssl_derive_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = mbedtls_ssl_derive_keys &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_padding_mode
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_name
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[917]"></a>mbedtls_ssl_fetch_input</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_fetch_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = mbedtls_ssl_fetch_input &rArr; mbedtls_debug_print_ret &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</UL>

<P><STRONG><a name="[90c]"></a>mbedtls_ssl_flush_output</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_flush_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = mbedtls_ssl_flush_output &rArr; mbedtls_debug_print_ret &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
</UL>

<P><STRONG><a name="[919]"></a>mbedtls_ssl_free</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = mbedtls_ssl_free &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_destroy
</UL>

<P><STRONG><a name="[916]"></a>mbedtls_ssl_get_ciphersuite_name</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_get_ciphersuite_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mbedtls_ssl_get_ciphersuite_name
</UL>
<BR>[Calls]<UL><LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[9d3]"></a>mbedtls_ssl_get_ciphersuite_sig_pk_alg</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_get_ciphersuite_sig_pk_alg))
<BR><BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[9e2]"></a>mbedtls_ssl_get_max_frag_len</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_get_max_frag_len))
<BR><BR>[Called By]<UL><LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
</UL>

<P><STRONG><a name="[91e]"></a>mbedtls_ssl_handle_message_type</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_handle_message_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = mbedtls_ssl_handle_message_type &rArr; mbedtls_ssl_prepare_handshake_record &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
</UL>
<BR>[Called By]<UL><LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[859]"></a>mbedtls_ssl_handshake</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_handshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 3816<LI>Call Chain = mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
</UL>
<BR>[Called By]<UL><LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_connect
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
</UL>

<P><STRONG><a name="[921]"></a>mbedtls_ssl_handshake_client_step</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, ssl_cli.o(i.mbedtls_ssl_handshake_client_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 3792<LI>Call Chain = mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
</UL>
<BR>[Called By]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
</UL>

<P><STRONG><a name="[91b]"></a>mbedtls_ssl_handshake_free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_handshake_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[920]"></a>mbedtls_ssl_handshake_step</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_handshake_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 3800<LI>Call Chain = mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>
<BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
</UL>

<P><STRONG><a name="[930]"></a>mbedtls_ssl_handshake_wrapup</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_handshake_wrapup))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = mbedtls_ssl_handshake_wrapup &rArr; ssl_handshake_wrapup_free_hs_transform &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[9e3]"></a>mbedtls_ssl_hash_from_md_alg</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_hash_from_md_alg))
<BR><BR>[Called By]<UL><LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
</UL>

<P><STRONG><a name="[892]"></a>mbedtls_ssl_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_init))
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
</UL>

<P><STRONG><a name="[910]"></a>mbedtls_ssl_list_ciphersuites</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_list_ciphersuites))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_list_ciphersuites
</UL>
<BR>[Calls]<UL><LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[9d4]"></a>mbedtls_ssl_md_alg_from_hash</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_md_alg_from_hash))
<BR><BR>[Called By]<UL><LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
</UL>

<P><STRONG><a name="[9cb]"></a>mbedtls_ssl_optimize_checksum</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_optimize_checksum))
<BR><BR>[Called By]<UL><LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[924]"></a>mbedtls_ssl_parse_certificate</STRONG> (Thumb, 802 bytes, Stack size 48 bytes, ssl_tls.o(i.mbedtls_ssl_parse_certificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 3768<LI>Call Chain = mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_curve
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[92e]"></a>mbedtls_ssl_parse_change_cipher_spec</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_parse_change_cipher_spec))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = mbedtls_ssl_parse_change_cipher_spec &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[92f]"></a>mbedtls_ssl_parse_finished</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, ssl_tls.o(i.mbedtls_ssl_parse_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = mbedtls_ssl_parse_finished &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[9d5]"></a>mbedtls_ssl_pk_alg_from_sig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_pk_alg_from_sig))
<BR><BR>[Called By]<UL><LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
</UL>

<P><STRONG><a name="[91f]"></a>mbedtls_ssl_prepare_handshake_record</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_prepare_handshake_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = mbedtls_ssl_prepare_handshake_record &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
</UL>

<P><STRONG><a name="[7ba]"></a>mbedtls_ssl_read</STRONG> (Thumb, 682 bytes, Stack size 48 bytes, ssl_tls.o(i.mbedtls_ssl_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 3928<LI>Call Chain = mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ssl_received_bytes
</UL>

<P><STRONG><a name="[932]"></a>mbedtls_ssl_read_record</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_read_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_update_handshake_status
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
</UL>

<P><STRONG><a name="[93b]"></a>mbedtls_ssl_read_record_layer</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_read_record_layer))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = mbedtls_ssl_read_record_layer &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[9c7]"></a>mbedtls_ssl_read_version</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_read_version))
<BR><BR>[Called By]<UL><LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
</UL>

<P><STRONG><a name="[93f]"></a>mbedtls_ssl_renegotiate</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_renegotiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 3864<LI>Call Chain = mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
</UL>

<P><STRONG><a name="[90d]"></a>mbedtls_ssl_send_alert_message</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_send_alert_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_fatal_handshake_failure
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
</UL>

<P><STRONG><a name="[941]"></a>mbedtls_ssl_send_fatal_handshake_failure</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_send_fatal_handshake_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = mbedtls_ssl_send_fatal_handshake_failure &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
</UL>

<P><STRONG><a name="[91c]"></a>mbedtls_ssl_session_free</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_session_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_ssl_session_free &rArr; mbedtls_x509_crt_free &rArr; mbedtls_pk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[893]"></a>mbedtls_ssl_session_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_session_init))
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[89a]"></a>mbedtls_ssl_set_bio</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_set_bio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_set_bio
</UL>
<BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
</UL>

<P><STRONG><a name="[89b]"></a>mbedtls_ssl_set_hostname</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_set_hostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ssl_set_hostname &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
</UL>

<P><STRONG><a name="[89c]"></a>mbedtls_ssl_set_session</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_set_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = mbedtls_ssl_set_session &rArr; ssl_session_copy &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
</UL>

<P><STRONG><a name="[89d]"></a>mbedtls_ssl_setup</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = mbedtls_ssl_setup &rArr; ssl_handshake_init &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>
<BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
</UL>

<P><STRONG><a name="[944]"></a>mbedtls_ssl_sig_from_pk</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_sig_from_pk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_sig_from_pk
</UL>
<BR>[Calls]<UL><LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[91a]"></a>mbedtls_ssl_transform_free</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_transform_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_transform_free &rArr; mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[93c]"></a>mbedtls_ssl_update_handshake_status</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_update_handshake_status))
<BR><BR>[Called By]<UL><LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[945]"></a>mbedtls_ssl_write</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 3912<LI>Call Chain = mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_ctr_renegotiate
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_send
</UL>

<P><STRONG><a name="[928]"></a>mbedtls_ssl_write_certificate</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_write_certificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 2880<LI>Call Chain = mbedtls_ssl_write_certificate &rArr; mbedtls_debug_print_crt &rArr; debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_own_cert
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[92b]"></a>mbedtls_ssl_write_change_cipher_spec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_write_change_cipher_spec))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = mbedtls_ssl_write_change_cipher_spec &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[92c]"></a>mbedtls_ssl_write_finished</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_write_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = mbedtls_ssl_write_finished &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[940]"></a>mbedtls_ssl_write_record</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_write_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
</UL>

<P><STRONG><a name="[948]"></a>mbedtls_ssl_write_version</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_write_version))
<BR><BR>[Called By]<UL><LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[90a]"></a>mbedtls_x509_crt_check_extended_key_usage</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, x509_crt.o(i.mbedtls_x509_crt_check_extended_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_x509_crt_check_extended_key_usage &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
</UL>

<P><STRONG><a name="[909]"></a>mbedtls_x509_crt_check_key_usage</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, x509_crt.o(i.mbedtls_x509_crt_check_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_x509_crt_check_key_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
</UL>

<P><STRONG><a name="[933]"></a>mbedtls_x509_crt_free</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, x509_crt.o(i.mbedtls_x509_crt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_x509_crt_free &rArr; mbedtls_pk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_destroy
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
</UL>

<P><STRONG><a name="[864]"></a>mbedtls_x509_crt_info</STRONG> (Thumb, 934 bytes, Stack size 80 bytes, x509_crt.o(i.mbedtls_x509_crt_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = mbedtls_x509_crt_info &rArr; mbedtls_x509_dn_gets &rArr; mbedtls_oid_get_attr_short_name &rArr; oid_x520_attr_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_name
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_subject_alt_name
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_key_usage
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_ext_key_usage
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_cert_type
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_serial_gets
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_key_size_helper
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
</UL>

<P><STRONG><a name="[895]"></a>mbedtls_x509_crt_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, x509_crt.o(i.mbedtls_x509_crt_init))
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
</UL>

<P><STRONG><a name="[954]"></a>mbedtls_x509_crt_is_revoked</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, x509_crt.o(i.mbedtls_x509_crt_is_revoked))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mbedtls_x509_crt_is_revoked &rArr; mbedtls_x509_time_is_past &rArr; x509_get_current_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
</UL>

<P><STRONG><a name="[956]"></a>mbedtls_x509_crt_parse</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, x509_crt.o(i.mbedtls_x509_crt_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = mbedtls_x509_crt_parse &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_setoption
</UL>

<P><STRONG><a name="[934]"></a>mbedtls_x509_crt_parse_der</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, x509_crt.o(i.mbedtls_x509_crt_parse_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>
<BR>[Called By]<UL><LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
</UL>

<P><STRONG><a name="[935]"></a>mbedtls_x509_crt_verify_with_profile</STRONG> (Thumb, 428 bytes, Stack size 80 bytes, x509_crt.o(i.mbedtls_x509_crt_verify_with_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 3720<LI>Call Chain = mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_type
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[94c]"></a>mbedtls_x509_dn_gets</STRONG> (Thumb, 238 bytes, Stack size 296 bytes, x509.o(i.mbedtls_x509_dn_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = mbedtls_x509_dn_gets &rArr; mbedtls_oid_get_attr_short_name &rArr; oid_x520_attr_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_attr_short_name
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[961]"></a>mbedtls_x509_get_alg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, x509.o(i.mbedtls_x509_get_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_x509_get_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>

<P><STRONG><a name="[962]"></a>mbedtls_x509_get_alg_null</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, x509.o(i.mbedtls_x509_get_alg_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mbedtls_x509_get_alg_null &rArr; mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg_null
</UL>
<BR>[Called By]<UL><LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>

<P><STRONG><a name="[963]"></a>mbedtls_x509_get_ext</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, x509.o(i.mbedtls_x509_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_x509_get_ext &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[964]"></a>mbedtls_x509_get_name</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, x509.o(i.mbedtls_x509_get_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mbedtls_x509_get_name &rArr; x509_get_attr_type_value &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
</UL>
<BR>[Called By]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[966]"></a>mbedtls_x509_get_rsassa_pss_params</STRONG> (Thumb, 402 bytes, Stack size 64 bytes, x509.o(i.mbedtls_x509_get_rsassa_pss_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = mbedtls_x509_get_rsassa_pss_params &rArr; mbedtls_x509_get_alg_null &rArr; mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg_null
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_hash_alg
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
</UL>

<P><STRONG><a name="[968]"></a>mbedtls_x509_get_serial</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, x509.o(i.mbedtls_x509_get_serial))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_x509_get_serial &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[969]"></a>mbedtls_x509_get_sig</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, x509.o(i.mbedtls_x509_get_sig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_x509_get_sig &rArr; mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
</UL>
<BR>[Called By]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[96a]"></a>mbedtls_x509_get_sig_alg</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, x509.o(i.mbedtls_x509_get_sig_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = mbedtls_x509_get_sig_alg &rArr; mbedtls_x509_get_rsassa_pss_params &rArr; mbedtls_x509_get_alg_null &rArr; mbedtls_asn1_get_alg_null &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>
<BR>[Called By]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[96b]"></a>mbedtls_x509_get_time</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, x509.o(i.mbedtls_x509_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_x509_get_time &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_int
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_date_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_dates
</UL>

<P><STRONG><a name="[94f]"></a>mbedtls_x509_key_size_helper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, x509.o(i.mbedtls_x509_key_size_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_x509_key_size_helper &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[94b]"></a>mbedtls_x509_serial_gets</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, x509.o(i.mbedtls_x509_serial_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_x509_serial_gets &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[94d]"></a>mbedtls_x509_sig_alg_gets</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, x509.o(i.mbedtls_x509_sig_alg_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_x509_sig_alg_gets &rArr; mbedtls_oid_get_sig_alg_desc &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg_desc
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_name
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[96f]"></a>mbedtls_x509_time_is_future</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, x509.o(i.mbedtls_x509_time_is_future))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_x509_time_is_future &rArr; x509_get_current_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_current_time
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_time
</UL>
<BR>[Called By]<UL><LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[955]"></a>mbedtls_x509_time_is_past</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, x509.o(i.mbedtls_x509_time_is_past))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_x509_time_is_past &rArr; x509_get_current_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_current_time
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_time
</UL>
<BR>[Called By]<UL><LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_is_revoked
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[75e]"></a>mqtt_client_connect</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, mqtt_client.o(i.mqtt_client_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mqtt_client_connect &rArr; cloneMqttOptions &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_open
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloneMqttOptions
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_mqtt_options
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
</UL>

<P><STRONG><a name="[51b]"></a>mqtt_client_deinit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mqtt_client.o(i.mqtt_client_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mqtt_client_deinit &rArr; mqtt_codec_destroy &rArr; BUFFER_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_destroy
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_destroy
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
</UL>

<P><STRONG><a name="[47b]"></a>mqtt_client_disconnect</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, mqtt_client.o(i.mqtt_client_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mqtt_client_disconnect &rArr; sendPacketItem &rArr; logOutgoingingRawTrace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_disconnect
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_mqtt_options
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_operation_complete_callback
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectFromClient
</UL>

<P><STRONG><a name="[55a]"></a>mqtt_client_dowork</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, mqtt_client.o(i.mqtt_client_dowork))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mqtt_client_dowork &rArr; sendPacketItem &rArr; logOutgoingingRawTrace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_dowork
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_ping
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_error_callback
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
</UL>

<P><STRONG><a name="[516]"></a>mqtt_client_init</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, mqtt_client.o(i.mqtt_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mqtt_client_init &rArr; mqtt_codec_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_destroy
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_create
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_create
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
</UL>

<P><STRONG><a name="[979]"></a>mqtt_client_publish</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, mqtt_client.o(i.mqtt_client_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getTopicName
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getApplicationMsg
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getQosType
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getPacketId
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getIsRetained
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getIsDuplicateMsg
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_trace_log_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
</UL>

<P><STRONG><a name="[55e]"></a>mqtt_client_set_trace</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqtt_client.o(i.mqtt_client_set_trace))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
</UL>

<P><STRONG><a name="[75f]"></a>mqtt_client_subscribe</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, mqtt_client.o(i.mqtt_client_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = mqtt_client_subscribe &rArr; mqtt_codec_subscribe &rArr; addListItemsToSubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_trace_log_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubscribeToMqttProtocol
</UL>

<P><STRONG><a name="[561]"></a>mqtt_client_unsubscribe</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, mqtt_client.o(i.mqtt_client_unsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = mqtt_client_unsubscribe &rArr; mqtt_codec_unsubscribe &rArr; addListItemsToUnsubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_trace_log_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe
</UL>

<P><STRONG><a name="[983]"></a>mqtt_codec_bytesReceived</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, mqtt_codec.o(i.mqtt_codec_bytesReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mqtt_codec_bytesReceived &rArr; prepareheaderDataInfo &rArr; BUFFER_pre_build &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processControlPacketType
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareheaderDataInfo
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completePacketData
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onBytesReceived
</UL>

<P><STRONG><a name="[986]"></a>mqtt_codec_connect</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, mqtt_codec.o(i.mqtt_codec_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = mqtt_codec_connect &rArr; constructConnPayload &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnectVariableHeader
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructConnPayload
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
</UL>

<P><STRONG><a name="[978]"></a>mqtt_codec_create</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mqtt_codec.o(i.mqtt_codec_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mqtt_codec_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
</UL>

<P><STRONG><a name="[973]"></a>mqtt_codec_destroy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mqtt_codec.o(i.mqtt_codec_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mqtt_codec_destroy &rArr; BUFFER_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_deinit
</UL>

<P><STRONG><a name="[974]"></a>mqtt_codec_disconnect</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mqtt_codec.o(i.mqtt_codec_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mqtt_codec_disconnect &rArr; BUFFER_enlarge &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
</UL>

<P><STRONG><a name="[977]"></a>mqtt_codec_ping</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mqtt_codec.o(i.mqtt_codec_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mqtt_codec_ping &rArr; BUFFER_enlarge &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
</UL>

<P><STRONG><a name="[980]"></a>mqtt_codec_publish</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, mqtt_codec.o(i.mqtt_codec_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_qos_value
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishVariableHeader
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
</UL>

<P><STRONG><a name="[988]"></a>mqtt_codec_publishAck</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mqtt_codec.o(i.mqtt_codec_publishAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mqtt_codec_publishAck &rArr; constructPublishReply &rArr; BUFFER_pre_build &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[989]"></a>mqtt_codec_publishComplete</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mqtt_codec.o(i.mqtt_codec_publishComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mqtt_codec_publishComplete &rArr; constructPublishReply &rArr; BUFFER_pre_build &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[98a]"></a>mqtt_codec_publishReceived</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mqtt_codec.o(i.mqtt_codec_publishReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mqtt_codec_publishReceived &rArr; constructPublishReply &rArr; BUFFER_pre_build &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[98b]"></a>mqtt_codec_publishRelease</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mqtt_codec.o(i.mqtt_codec_publishRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mqtt_codec_publishRelease &rArr; constructPublishReply &rArr; BUFFER_pre_build &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructPublishReply
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[981]"></a>mqtt_codec_subscribe</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, mqtt_codec.o(i.mqtt_codec_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = mqtt_codec_subscribe &rArr; addListItemsToSubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructSubscibeTypeVariableHeader
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToSubscribePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
</UL>

<P><STRONG><a name="[982]"></a>mqtt_codec_unsubscribe</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, mqtt_codec.o(i.mqtt_codec_unsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = mqtt_codec_unsubscribe &rArr; addListItemsToUnsubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructSubscibeTypeVariableHeader
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructFixedHeader
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addListItemsToUnsubscribePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
</UL>

<P><STRONG><a name="[990]"></a>mqttmessage_create</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, mqtt_message.o(i.mqttmessage_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mqttmessage_create &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[991]"></a>mqttmessage_destroy</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mqtt_message.o(i.mqttmessage_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mqttmessage_destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[97a]"></a>mqttmessage_getApplicationMsg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqtt_message.o(i.mqttmessage_getApplicationMsg))
<BR><BR>[Called By]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[97c]"></a>mqttmessage_getIsDuplicateMsg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqtt_message.o(i.mqttmessage_getIsDuplicateMsg))
<BR><BR>[Called By]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
</UL>

<P><STRONG><a name="[97d]"></a>mqttmessage_getIsRetained</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqtt_message.o(i.mqttmessage_getIsRetained))
<BR><BR>[Called By]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
</UL>

<P><STRONG><a name="[97e]"></a>mqttmessage_getPacketId</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqtt_message.o(i.mqttmessage_getPacketId))
<BR><BR>[Called By]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
</UL>

<P><STRONG><a name="[97b]"></a>mqttmessage_getQosType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqtt_message.o(i.mqttmessage_getQosType))
<BR><BR>[Called By]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
</UL>

<P><STRONG><a name="[97f]"></a>mqttmessage_getTopicName</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqtt_message.o(i.mqttmessage_getTopicName))
<BR><BR>[Called By]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[9ab]"></a>mqttmessage_setIsDuplicateMsg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mqtt_message.o(i.mqttmessage_setIsDuplicateMsg))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[9ac]"></a>mqttmessage_setIsRetained</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mqtt_message.o(i.mqttmessage_setIsRetained))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[35f]"></a>platform_deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, platform_stm32cube_nucleof401re.o(i.platform_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
</UL>

<P><STRONG><a name="[7fe]"></a>platform_get_default_tlsio</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, platform_stm32cube_nucleof401re.o(i.platform_get_default_tlsio))
<BR><BR>[Calls]<UL><LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_get_interface_description
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIoTransportProvider
</UL>

<P><STRONG><a name="[838]"></a>platform_get_platform_info</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, platform_stm32cube_nucleof401re.o(i.platform_get_platform_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = platform_get_platform_info &rArr; STRING_construct &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_product_info
</UL>

<P><STRONG><a name="[341]"></a>platform_init</STRONG> (Thumb, 2308 bytes, Stack size 536 bytes, platform_stm32cube_nucleof401re.o(i.platform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = platform_init &rArr; BG96_socket_client_open &rArr; BG96_socket_open &rArr; BG96_socket &rArr; BG96_receive &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gsm_init
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Global_Init
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_ReadTextToken
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_Init
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMetaDataManager
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDM_SaveGMD
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDM_ReCallGMD
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMetaDataManager
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Init
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetHalVersion
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_BG96_mac
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseMetaDataManager
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_Timer_Config
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_Configuration
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Error_Handler
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MEM1_Sensors
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimers
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRTC
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalBufferInit
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_client_open
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalendarShow
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureExit
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHWFeatures
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWFreeFall
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0scanf
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
</UL>

<P><STRONG><a name="[985]"></a>processControlPacketType</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mqtt_codec.o(i.processControlPacketType))
<BR><BR>[Called By]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_bytesReceived
</UL>

<P><STRONG><a name="[330]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_bytes_received
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_recv
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_IncreaseStorageKeysValues
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_DecreaseStorageKeysValues
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_erase
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy_n
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_push_back
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPublisher_PublishTransacted
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateStructType
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelAction
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddStructTypeProperty
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelActionArgument
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddModelProperty
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
</UL>

<P><STRONG><a name="[41f]"></a>scanbase64b16</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, agenttypesystem.o(i.scanbase64b16))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = scanbase64b16 &rArr; base64b16toValue &rArr; base64b16
</UL>
<BR>[Calls]<UL><LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64toValue
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64b16toValue
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[420]"></a>scanbase64b8</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, agenttypesystem.o(i.scanbase64b8))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = scanbase64b8 &rArr; base64b8toValue
</UL>
<BR>[Calls]<UL><LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64toValue
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64b8toValue
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[35e]"></a>serializer_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, schemalib.o(i.serializer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = serializer_deinit &rArr; CodeFirst_Deinit &rArr; DestroyDevice &rArr; Device_Destroy &rArr; DataPublisher_Destroy &rArr; DataMarshaller_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
</UL>

<P><STRONG><a name="[345]"></a>serializer_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, schemalib.o(i.serializer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = serializer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
</UL>

<P><STRONG><a name="[793]"></a>singlylinkedlist_add</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, singlylinkedlist.o(i.singlylinkedlist_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = singlylinkedlist_add &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_pending_io
</UL>

<P><STRONG><a name="[9af]"></a>singlylinkedlist_create</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, singlylinkedlist.o(i.singlylinkedlist_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = singlylinkedlist_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_create
</UL>

<P><STRONG><a name="[9b0]"></a>singlylinkedlist_destroy</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, singlylinkedlist.o(i.singlylinkedlist_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = singlylinkedlist_destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_destroy
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_create
</UL>

<P><STRONG><a name="[9b4]"></a>singlylinkedlist_get_head_item</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, singlylinkedlist.o(i.singlylinkedlist_get_head_item))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_send
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_destroy
</UL>

<P><STRONG><a name="[9b5]"></a>singlylinkedlist_item_get_value</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, singlylinkedlist.o(i.singlylinkedlist_item_get_value))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_destroy
</UL>

<P><STRONG><a name="[9b1]"></a>singlylinkedlist_remove</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, singlylinkedlist.o(i.singlylinkedlist_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = singlylinkedlist_remove &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_destroy
</UL>

<P><STRONG><a name="[7b0]"></a>size_tToString</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, crt_abstractions.o(i.size_tToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = size_tToString
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_sas_token
</UL>

<P><STRONG><a name="[2b1]"></a>socketio_close</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, socketio_stm32cube.o(i.socketio_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = socketio_close
</UL>
<BR>[Calls]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socketio_stm32cube.o(.constdata)
</UL>
<P><STRONG><a name="[2ae]"></a>socketio_create</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, socketio_stm32cube.o(i.socketio_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = socketio_create &rArr; singlylinkedlist_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_destroy
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_create
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socketio_stm32cube.o(.constdata)
</UL>
<P><STRONG><a name="[2af]"></a>socketio_destroy</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, socketio_stm32cube.o(i.socketio_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = socketio_destroy &rArr; singlylinkedlist_remove &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_destroy
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_remove
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_item_get_value
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_get_head_item
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_destroy
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socketio_stm32cube.o(.constdata)
</UL>
<P><STRONG><a name="[2b3]"></a>socketio_dowork</STRONG> (Thumb, 198 bytes, Stack size 152 bytes, socketio_stm32cube.o(i.socketio_dowork))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = socketio_dowork &rArr; tcpsocketconnection_send &rArr; BG96_socket_client_write &rArr; BG96_socket_write &rArr; BG96_socket_send &rArr; BG96_receive &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_send
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_receive
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_remove
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_item_get_value
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_get_head_item
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_error
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socketio_stm32cube.o(.constdata)
</UL>
<P><STRONG><a name="[9e7]"></a>socketio_get_interface_description</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, socketio_stm32cube.o(i.socketio_get_interface_description))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_create
</UL>

<P><STRONG><a name="[2b0]"></a>socketio_open</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, socketio_stm32cube.o(i.socketio_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = socketio_open &rArr; tcpsocketconnection_connect &rArr; BG96_socket_client_open &rArr; BG96_socket_open &rArr; BG96_socket &rArr; BG96_receive &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_set_blocking
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_destroy
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_create
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socketio_stm32cube.o(.constdata)
</UL>
<P><STRONG><a name="[2b2]"></a>socketio_send</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, socketio_stm32cube.o(i.socketio_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = socketio_send &rArr; tcpsocketconnection_send &rArr; BG96_socket_client_write &rArr; BG96_socket_write &rArr; BG96_socket_send &rArr; BG96_receive &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpsocketconnection_send
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_get_head_item
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_pending_io
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socketio_stm32cube.o(.constdata)
</UL>
<P><STRONG><a name="[280]"></a>socketio_setoption</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, socketio_stm32cube.o(i.socketio_setoption))
<BR>[Address Reference Count : 2]<UL><LI> socketio_stm32cube.o(.constdata)
<LI> socketio_stm32cube.o(i.socketio_retrieveoptions)
</UL>
<P><STRONG><a name="[333]"></a>sprintf_s</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, crt_abstractions.o(i.sprintf_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sprintf_s &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSNSData
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send6DOrientationData
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[839]"></a>strcpy_s</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, crt_abstractions.o(i.strcpy_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = strcpy_s &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
</UL>

<P><STRONG><a name="[41c]"></a>strncpy_s</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, crt_abstractions.o(i.strncpy_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strncpy_s &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[9b2]"></a>tcpsocketconnection_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcpsocketstm32cube.o(i.tcpsocketconnection_close))
<BR><BR>[Calls]<UL><LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_client_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_close
</UL>

<P><STRONG><a name="[9ba]"></a>tcpsocketconnection_connect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tcpsocketstm32cube.o(i.tcpsocketconnection_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = tcpsocketconnection_connect &rArr; BG96_socket_client_open &rArr; BG96_socket_open &rArr; BG96_socket &rArr; BG96_receive &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_client_open
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_open
</UL>

<P><STRONG><a name="[9b9]"></a>tcpsocketconnection_create</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcpsocketstm32cube.o(i.tcpsocketconnection_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tcpsocketconnection_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_open
</UL>

<P><STRONG><a name="[9b3]"></a>tcpsocketconnection_destroy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcpsocketstm32cube.o(i.tcpsocketconnection_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcpsocketconnection_destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_open
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_destroy
</UL>

<P><STRONG><a name="[9b8]"></a>tcpsocketconnection_receive</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tcpsocketstm32cube.o(i.tcpsocketconnection_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcpsocketconnection_receive &rArr; LocalBufferPopBuffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalBufferPopBuffer
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalBufferGetSizeBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
</UL>

<P><STRONG><a name="[9b6]"></a>tcpsocketconnection_send</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, tcpsocketstm32cube.o(i.tcpsocketconnection_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = tcpsocketconnection_send &rArr; BG96_socket_client_write &rArr; BG96_socket_write &rArr; BG96_socket_send &rArr; BG96_receive &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_client_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_send
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
</UL>

<P><STRONG><a name="[9bb]"></a>tcpsocketconnection_set_blocking</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcpsocketstm32cube.o(i.tcpsocketconnection_set_blocking))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_open
</UL>

<P><STRONG><a name="[513]"></a>tickcounter_create</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tickcounter_stm32cube.o(i.tickcounter_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tickcounter_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
</UL>

<P><STRONG><a name="[51a]"></a>tickcounter_destroy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tickcounter_stm32cube.o(i.tickcounter_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tickcounter_destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Destroy
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_deinit
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
</UL>

<P><STRONG><a name="[47e]"></a>tickcounter_get_current_ms</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tickcounter_stm32cube.o(i.tickcounter_get_current_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tickcounter_get_current_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_twin_data_create
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attach_ms_timesOutAfter
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoTimeouts
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
</UL>

<P><STRONG><a name="[805]"></a>time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timingsystem.o(i.time))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_entropy_poll
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_generate_random
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_current_time
</UL>

<P><STRONG><a name="[2b8]"></a>tlsio_mbedtls_close</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tlsio_mbedtls_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls_stm32cube_nucleo.o(.constdata)
</UL>
<P><STRONG><a name="[2b5]"></a>tlsio_mbedtls_create</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1460<LI>Call Chain = tlsio_mbedtls_create &rArr; mbedtls_init &rArr; mbedtls_ctr_drbg_seed &rArr; mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_get_interface_description
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_create
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls_stm32cube_nucleo.o(.constdata)
</UL>
<P><STRONG><a name="[2b6]"></a>tlsio_mbedtls_destroy</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = tlsio_mbedtls_destroy &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_destroy
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_close
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_free
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls_stm32cube_nucleo.o(.constdata)
</UL>
<P><STRONG><a name="[2ba]"></a>tlsio_mbedtls_dowork</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_dowork))
<BR><BR>[Stack]<UL><LI>Max Depth = 4024<LI>Call Chain = tlsio_mbedtls_dowork &rArr; decode_ssl_received_bytes &rArr; mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_dowork
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ssl_received_bytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls_stm32cube_nucleo.o(.constdata)
</UL>
<P><STRONG><a name="[9a2]"></a>tlsio_mbedtls_get_interface_description</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_get_interface_description))
<BR><BR>[Called By]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_default_tlsio
</UL>

<P><STRONG><a name="[2b7]"></a>tlsio_mbedtls_open</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tlsio_mbedtls_open &rArr; xio_open
</UL>
<BR>[Calls]<UL><LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls_stm32cube_nucleo.o(.constdata)
</UL>
<P><STRONG><a name="[2b4]"></a>tlsio_mbedtls_retrieveoptions</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_retrieveoptions))
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls_stm32cube_nucleo.o(.constdata)
</UL>
<P><STRONG><a name="[2b9]"></a>tlsio_mbedtls_send</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 3928<LI>Call Chain = tlsio_mbedtls_send &rArr; mbedtls_ssl_write &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls_stm32cube_nucleo.o(.constdata)
</UL>
<P><STRONG><a name="[2bb]"></a>tlsio_mbedtls_setoption</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_setoption))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = tlsio_mbedtls_setoption &rArr; mbedtls_x509_crt_parse &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_setoption
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_ca_chain
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls_stm32cube_nucleo.o(.constdata)
</UL>
<P><STRONG><a name="[7f6]"></a>uartReceiveChar</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, console.o(i.uartReceiveChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uartReceiveChar &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[7f8]"></a>uartSendChar</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, console.o(i.uartSendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uartSendChar &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[7a6]"></a>xio_close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, xio.o(i.xio_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xio_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_destroy
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_connection
</UL>

<P><STRONG><a name="[7ff]"></a>xio_create</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, xio.o(i.xio_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xio_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_create
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIoTransportProvider
</UL>

<P><STRONG><a name="[47c]"></a>xio_destroy</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, xio.o(i.xio_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = xio_destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_destroy
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectFromClient
</UL>

<P><STRONG><a name="[7a7]"></a>xio_dowork</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, xio.o(i.xio_dowork))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_dowork
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_recv
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_connection
</UL>

<P><STRONG><a name="[972]"></a>xio_open</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, xio.o(i.xio_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xio_open
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_open
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_connect
</UL>

<P><STRONG><a name="[993]"></a>xio_send</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, xio.o(i.xio_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xio_send
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_send
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
</UL>

<P><STRONG><a name="[560]"></a>xio_setoption</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, xio.o(i.xio_setoption))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xio_setoption &rArr; OptionHandler_FeedOptions
</UL>
<BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_FeedOptions
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_setoption
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[76d]"></a>UART_Error_Callback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UART_Error_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[356]"></a>ButtonCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, azureclient_mqtt_tm.o(i.ButtonCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ButtonCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
</UL>

<P><STRONG><a name="[2ab]"></a>Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tActiveHWMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tActiveHWMode))
<BR><BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[2ac]"></a>Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tAzureFwVersion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tAzureFwVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tAzureFwVersion &rArr; ToAGENT_DATA_TYPE_ascii_char_ptr &rArr; Create_AGENT_DATA_TYPE_from_charz &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_ascii_char_ptr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[2aa]"></a>Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tAzureStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tAzureStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tAzureStatus &rArr; ToAGENT_DATA_TYPE_ascii_char_ptr &rArr; Create_AGENT_DATA_TYPE_from_charz &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_ascii_char_ptr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[296]"></a>Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tHWCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tHWCounter))
<BR><BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[297]"></a>Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tHWOrientation</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tHWOrientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tHWOrientation &rArr; ToAGENT_DATA_TYPE_ascii_char_ptr &rArr; Create_AGENT_DATA_TYPE_from_charz &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_ascii_char_ptr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[28b]"></a>Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tHumidity</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tHumidity))
<BR><BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[28c]"></a>Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tPressure</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tPressure))
<BR><BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[2a7]"></a>Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tSupportedCommands</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tSupportedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tSupportedCommands &rArr; ToAGENT_DATA_TYPE_ascii_char_ptr_no_quotes &rArr; Create_AGENT_DATA_TYPE_from_charz_no_quotes &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_ascii_char_ptr_no_quotes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[2a8]"></a>Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tSupportedMethods</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tSupportedMethods))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tSupportedMethods &rArr; ToAGENT_DATA_TYPE_ascii_char_ptr_no_quotes &rArr; Create_AGENT_DATA_TYPE_from_charz_no_quotes &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_ascii_char_ptr_no_quotes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[2a9]"></a>Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tTelemetryInterval</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tTelemetryInterval))
<BR><BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[28a]"></a>Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tTemperature</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tTemperature))
<BR><BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[28d]"></a>Create_AGENT_DATA_TYPE_From_Ptr_Azure1_taccX</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_taccX))
<BR><BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[28e]"></a>Create_AGENT_DATA_TYPE_From_Ptr_Azure1_taccY</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_taccY))
<BR><BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[28f]"></a>Create_AGENT_DATA_TYPE_From_Ptr_Azure1_taccZ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_taccZ))
<BR><BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[288]"></a>Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tdeviceId</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tdeviceId))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tdeviceId &rArr; ToAGENT_DATA_TYPE_ascii_char_ptr &rArr; Create_AGENT_DATA_TYPE_from_charz &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_ascii_char_ptr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[290]"></a>Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tgyrX</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tgyrX))
<BR><BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[291]"></a>Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tgyrY</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tgyrY))
<BR><BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[292]"></a>Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tgyrZ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tgyrZ))
<BR><BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[293]"></a>Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tmagX</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tmagX))
<BR><BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[294]"></a>Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tmagY</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tmagY))
<BR><BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[295]"></a>Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tmagZ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tmagZ))
<BR><BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[289]"></a>Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tmessageId</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tmessageId))
<BR><BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[298]"></a>Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tts</STRONG> (Thumb, 32 bytes, Stack size 72 bytes, azureclient_mqtt_tm.o(i.Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tts))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tts &rArr; ToAGENT_DATA_TYPE_EDM_DATE_TIME_OFFSET &rArr; Create_AGENT_DATA_TYPE_from_EDM_DATE_TIME_OFFSET &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAGENT_DATA_TYPE_EDM_DATE_TIME_OFFSET
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[2a6]"></a>DesiredPropertyDeinitialize_Azure1_tDesiredHWMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.DesiredPropertyDeinitialize_Azure1_tDesiredHWMode))
<BR><BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalDeinitialize_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[2a2]"></a>DesiredPropertyDeinitialize_Azure1_tDesiredTelemetryInterval</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.DesiredPropertyDeinitialize_Azure1_tDesiredTelemetryInterval))
<BR><BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalDeinitialize_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[2a5]"></a>DesiredPropertyInitialize_Azure1_tDesiredHWMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.DesiredPropertyInitialize_Azure1_tDesiredHWMode))
<BR><BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalInitialize_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[2a1]"></a>DesiredPropertyInitialize_Azure1_tDesiredTelemetryInterval</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.DesiredPropertyInitialize_Azure1_tDesiredTelemetryInterval))
<BR><BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalInitialize_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[251]"></a>DeviceTwinCallback</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.DeviceTwinCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DeviceTwinCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(i.ReportState)
</UL>
<P><STRONG><a name="[1e8]"></a>DeviceTwinCallbackStatus</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, azureclient_mqtt_tm.o(i.DeviceTwinCallbackStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = DeviceTwinCallbackStatus &rArr; ChangeHWMode &rArr; ReportState &rArr; CodeFirst_SendAsyncReported &rArr; Device_CommitTransaction_ReportedProperties &rArr; DataPublisher_CommitTransaction_ReportedProperties &rArr; DataMarshaller_SendData_ReportedProperties &rArr; json_serialize_to_string_pretty &rArr; json_serialize_to_buffer_pretty &rArr; json_serialization_size_pretty &rArr; json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetValue
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildByName
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_Destroy
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONDecoder_JSON_To_MultiTree
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeTelemetryInterval
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeHWMode
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(i.AzureClient_mqtt_TM)
</UL>
<P><STRONG><a name="[48b]"></a>FillTheModelInstance</STRONG> (Thumb, 472 bytes, Stack size 136 bytes, azureclient_mqtt_tm.o(i.FillTheModelInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = FillTheModelInstance &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDateTimeOffset
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSNSData
</UL>

<P><STRONG><a name="[2a3]"></a>FromAGENT_DATA_TYPE_int</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.FromAGENT_DATA_TYPE_int))
<BR>[Address Reference Count : 2]<UL><LI> azureclient_mqtt_tm.o(.constdata)
<LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[48e]"></a>GetDateTimeOffset</STRONG> (Thumb, 60 bytes, Stack size 80 bytes, azureclient_mqtt_tm.o(i.GetDateTimeOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetDateTimeOffset &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send6DOrientationData
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTheModelInstance
</UL>

<P><STRONG><a name="[466]"></a>GlobalDeinitialize_int</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.GlobalDeinitialize_int))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DesiredPropertyDeinitialize_Azure1_tDesiredTelemetryInterval
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DesiredPropertyDeinitialize_Azure1_tDesiredHWMode
</UL>

<P><STRONG><a name="[467]"></a>GlobalInitialize_int</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.GlobalInitialize_int))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DesiredPropertyInitialize_Azure1_tDesiredTelemetryInterval
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DesiredPropertyInitialize_Azure1_tDesiredHWMode
</UL>

<P><STRONG><a name="[29f]"></a>LedBlinkWRAPPER</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.LedBlinkWRAPPER))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LedBlinkWRAPPER &rArr; LedBlink &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBlink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[29e]"></a>LedOffWRAPPER</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.LedOffWRAPPER))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LedOffWRAPPER &rArr; LedOff &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[29d]"></a>LedOnWRAPPER</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.LedOnWRAPPER))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LedOnWRAPPER &rArr; LedOn &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[29b]"></a>PauseWRAPPER</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.PauseWRAPPER))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PauseWRAPPER &rArr; Pause &rArr; StopTimer1 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pause
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[29c]"></a>PlayWRAPPER</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.PlayWRAPPER))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PlayWRAPPER &rArr; Play &rArr; StartTimer1 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[29a]"></a>QuitWRAPPER</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.QuitWRAPPER))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = QuitWRAPPER &rArr; Quit &rArr; MethodReturn_Create &rArr; json_parse_string &rArr; parse_value &rArr; parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[299]"></a>RebootWRAPPER</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.RebootWRAPPER))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = RebootWRAPPER &rArr; Reboot &rArr; MethodReturn_Create &rArr; json_parse_string &rArr; parse_value &rArr; parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reboot
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(.constdata)
</UL>
<P><STRONG><a name="[1e6]"></a>ReceiveMessageCallback</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, azureclient_mqtt_tm.o(i.ReceiveMessageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = ReceiveMessageCallback &rArr; CodeFirst_ExecuteCommand &rArr; Device_ExecuteCommand &rArr; CommandDecoder_ExecuteCommand &rArr; DecodeCommand &rArr; ScanActionPathAndExecuteAction &rArr; DecodeAndExecuteModelAction &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetByteArray
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_ExecuteCommand
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(i.AzureClient_mqtt_TM)
</UL>
<P><STRONG><a name="[355]"></a>Send6DOrientationData</STRONG> (Thumb, 212 bytes, Stack size 88 bytes, azureclient_mqtt_tm.o(i.Send6DOrientationData))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = Send6DOrientationData &rArr; CodeFirst_SendAsync &rArr; Device_EndTransaction &rArr; DataPublisher_EndTransaction &rArr; DataMarshaller_SendData &rArr; MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf_s
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingSystemGetSystemTime
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Properties
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDateTimeOffset
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
</UL>

<P><STRONG><a name="[25a]"></a>SendConfirmationCallback</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, azureclient_mqtt_tm.o(i.SendConfirmationCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SendConfirmationCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTHUB_CLIENT_CONFIRMATION_RESULTStrings
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> azureclient_mqtt_tm.o(i.Send6DOrientationData)
<LI> azureclient_mqtt_tm.o(i.SendSNSData)
</UL>
<P><STRONG><a name="[358]"></a>SendSNSData</STRONG> (Thumb, 254 bytes, Stack size 88 bytes, azureclient_mqtt_tm.o(i.SendSNSData))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = SendSNSData &rArr; CodeFirst_SendAsync &rArr; Device_EndTransaction &rArr; DataPublisher_EndTransaction &rArr; DataMarshaller_SendData &rArr; MultiTree_AddLeaf &rArr;  MultiTree_AddLeaf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf_s
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Properties
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTheModelInstance
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AzureClient_mqtt_TM
</UL>

<P><STRONG><a name="[428]"></a>ToAGENT_DATA_TYPE_EDM_DATE_TIME_OFFSET</STRONG> (Thumb, 36 bytes, Stack size 80 bytes, azureclient_mqtt_tm.o(i.ToAGENT_DATA_TYPE_EDM_DATE_TIME_OFFSET))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ToAGENT_DATA_TYPE_EDM_DATE_TIME_OFFSET &rArr; Create_AGENT_DATA_TYPE_from_EDM_DATE_TIME_OFFSET &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_EDM_DATE_TIME_OFFSET
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tts
</UL>

<P><STRONG><a name="[425]"></a>ToAGENT_DATA_TYPE_ascii_char_ptr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.ToAGENT_DATA_TYPE_ascii_char_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ToAGENT_DATA_TYPE_ascii_char_ptr &rArr; Create_AGENT_DATA_TYPE_from_charz &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_charz
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tdeviceId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tHWOrientation
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tAzureStatus
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tAzureFwVersion
</UL>

<P><STRONG><a name="[427]"></a>ToAGENT_DATA_TYPE_ascii_char_ptr_no_quotes</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.ToAGENT_DATA_TYPE_ascii_char_ptr_no_quotes))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ToAGENT_DATA_TYPE_ascii_char_ptr_no_quotes &rArr; Create_AGENT_DATA_TYPE_from_charz_no_quotes &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_charz_no_quotes
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tSupportedMethods
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tSupportedCommands
</UL>

<P><STRONG><a name="[426]"></a>ToAGENT_DATA_TYPE_float</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.ToAGENT_DATA_TYPE_float))
<BR><BR>[Calls]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_FLOAT
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tTemperature
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tPressure
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tHumidity
</UL>

<P><STRONG><a name="[424]"></a>ToAGENT_DATA_TYPE_int</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, azureclient_mqtt_tm.o(i.ToAGENT_DATA_TYPE_int))
<BR><BR>[Calls]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_SINT32
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tmessageId
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tmagZ
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tmagY
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tmagX
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tgyrZ
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tgyrY
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tgyrX
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_Azure1_taccZ
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_Azure1_taccY
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_Azure1_taccX
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tTelemetryInterval
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tHWCounter
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_From_Ptr_Azure1_tActiveHWMode
</UL>

<P><STRONG><a name="[1e7]"></a>deviceMethodCallback</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, azureclient_mqtt_tm.o(i.deviceMethodCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = deviceMethodCallback &rArr; CodeFirst_ExecuteMethod &rArr; Device_ExecuteMethod &rArr; CommandDecoder_ExecuteMethod &rArr; DecodeMethod &rArr; ScanMethodPathAndExecuteMethod &rArr; DecodeAndExecuteModelMethod &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_GetReturn
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MethodReturn_Destroy
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_ExecuteMethod
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azureclient_mqtt_tm.o(i.AzureClient_mqtt_TM)
</UL>
<P><STRONG><a name="[792]"></a>add_pending_io</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, socketio_stm32cube.o(i.add_pending_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = add_pending_io &rArr; singlylinkedlist_add &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlylinkedlist_add
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_send
</UL>

<P><STRONG><a name="[9b7]"></a>indicate_error</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, socketio_stm32cube.o(i.indicate_error))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketio_dowork
</UL>

<P><STRONG><a name="[282]"></a>socketio_CloneOption</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, socketio_stm32cube.o(i.socketio_CloneOption))
<BR>[Address Reference Count : 1]<UL><LI> socketio_stm32cube.o(i.socketio_retrieveoptions)
</UL>
<P><STRONG><a name="[281]"></a>socketio_DestroyOption</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, socketio_stm32cube.o(i.socketio_DestroyOption))
<BR>[Address Reference Count : 1]<UL><LI> socketio_stm32cube.o(i.socketio_retrieveoptions)
</UL>
<P><STRONG><a name="[2ad]"></a>socketio_retrieveoptions</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, socketio_stm32cube.o(i.socketio_retrieveoptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = socketio_retrieveoptions &rArr; OptionHandler_Create &rArr; CreateInternal &rArr; VECTOR_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socketio_stm32cube.o(.constdata)
</UL>
<P><STRONG><a name="[50a]"></a>InitRTC</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, platform_stm32cube_nucleof401re.o(i.InitRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = InitRTC &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[50c]"></a>InitTimers</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, platform_stm32cube_nucleof401re.o(i.InitTimers))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitTimers &rArr; HAL_TIM_OC_Init &rArr; HAL_TIM_OC_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[50d]"></a>Init_MEM1_Sensors</STRONG> (Thumb, 580 bytes, Stack size 32 bytes, platform_stm32cube_nucleof401re.o(i.Init_MEM1_Sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Init_MEM1_Sensors &rArr; BSP_ACCELERO_Init_IKS01A2 &rArr; BSP_LSM6DSL_ACCELERO_Init &rArr; LSM6DSL_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Init_IKS01A2
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Init_IKS01A1
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Get_WhoAmI_IKS01A1
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[50b]"></a>STM32_Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, platform_stm32cube_nucleof401re.o(i.STM32_Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFunctionForSavingFlash
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFunctionForErasingFlash
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Error_Handler
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimers
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRTC
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopTimer1
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer1
</UL>

<P><STRONG><a name="[761]"></a>SystemClock_Config</STRONG> (Thumb, 126 bytes, Stack size 88 bytes, platform_stm32cube_nucleof401re.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Error_Handler
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[3bd]"></a>Base64_Encode_Internal</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, azure_base64.o(i.Base64_Encode_Internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Base64_Encode_Internal &rArr; STRING_new_with_memory &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64char
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64b8
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64b16
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new_with_memory
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encoder
</UL>

<P><STRONG><a name="[3bc]"></a>Base64decode</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, azure_base64.o(i.Base64decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Base64decode &rArr; numberOfBase64Characters
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numberOfBase64Characters
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64toValue
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decoder
</UL>

<P><STRONG><a name="[3ba]"></a>Base64decode_len</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, azure_base64.o(i.Base64decode_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Base64decode_len
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decoder
</UL>

<P><STRONG><a name="[3bf]"></a>base64b16</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, azure_base64.o(i.base64b16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = base64b16
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
</UL>

<P><STRONG><a name="[3c0]"></a>base64b8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, azure_base64.o(i.base64b8))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
</UL>

<P><STRONG><a name="[3be]"></a>base64char</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, azure_base64.o(i.base64char))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_Internal
</UL>

<P><STRONG><a name="[3c6]"></a>base64toValue</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, azure_base64.o(i.base64toValue))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numberOfBase64Characters
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64decode
</UL>

<P><STRONG><a name="[3c5]"></a>numberOfBase64Characters</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, azure_base64.o(i.numberOfBase64Characters))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = numberOfBase64Characters
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64toValue
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64decode
</UL>

<P><STRONG><a name="[726]"></a>SHA1Finalize</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, azure_sha1.o(i.SHA1Finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = SHA1Finalize &rArr; SHA1PadMessage &rArr; SHA1ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1PadMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Result
</UL>

<P><STRONG><a name="[727]"></a>SHA1PadMessage</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, azure_sha1.o(i.SHA1PadMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = SHA1PadMessage &rArr; SHA1ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Finalize
</UL>

<P><STRONG><a name="[729]"></a>SHA1ProcessMessageBlock</STRONG> (Thumb, 368 bytes, Stack size 380 bytes, azure_sha1.o(i.SHA1ProcessMessageBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = SHA1ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Input
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1PadMessage
</UL>

<P><STRONG><a name="[7b9]"></a>decode_ssl_received_bytes</STRONG> (Thumb, 50 bytes, Stack size 88 bytes, tlsio_mbedtls_stm32cube_nucleo.o(i.decode_ssl_received_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 4016<LI>Call Chain = decode_ssl_received_bytes &rArr; mbedtls_ssl_read &rArr; ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_dowork
</UL>

<P><STRONG><a name="[994]"></a>indicate_error</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tlsio_mbedtls_stm32cube_nucleo.o(i.indicate_error))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_error
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_bytes_received
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_io_send
</UL>

<P><STRONG><a name="[992]"></a>indicate_open_complete</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tlsio_mbedtls_stm32cube_nucleo.o(i.indicate_open_complete))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_open_complete
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_error
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_handshake_done
</UL>

<P><STRONG><a name="[858]"></a>mbedtls_connect</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, tlsio_mbedtls_stm32cube_nucleo.o(i.mbedtls_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 3840<LI>Call Chain = mbedtls_connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_handshake_done
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_underlying_io_open_complete
</UL>

<P><STRONG><a name="[891]"></a>mbedtls_init</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, tlsio_mbedtls_stm32cube_nucleo.o(i.mbedtls_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1428<LI>Call Chain = mbedtls_init &rArr; mbedtls_ctr_drbg_seed &rArr; mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_session
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_bio
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_rng
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_min_version
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_authmode
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_add_source
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsio_mbedtls_create
</UL>

<P><STRONG><a name="[85a]"></a>on_handshake_done</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tlsio_mbedtls_stm32cube_nucleo.o(i.on_handshake_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_handshake_done
</UL>
<BR>[Calls]<UL><LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_open_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_connect
</UL>

<P><STRONG><a name="[26f]"></a>on_io_recv</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, tlsio_mbedtls_stm32cube_nucleo.o(i.on_io_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = on_io_recv &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_dowork
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls_stm32cube_nucleo.o(i.mbedtls_init)
</UL>
<P><STRONG><a name="[270]"></a>on_io_send</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tlsio_mbedtls_stm32cube_nucleo.o(i.on_io_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_io_send &rArr; xio_send
</UL>
<BR>[Calls]<UL><LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_send
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls_stm32cube_nucleo.o(i.mbedtls_init)
</UL>
<P><STRONG><a name="[286]"></a>on_underlying_io_bytes_received</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tlsio_mbedtls_stm32cube_nucleo.o(i.on_underlying_io_bytes_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = on_underlying_io_bytes_received &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_error
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_open)
</UL>
<P><STRONG><a name="[284]"></a>on_underlying_io_close_complete</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tlsio_mbedtls_stm32cube_nucleo.o(i.on_underlying_io_close_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_underlying_io_close_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_destroy)
</UL>
<P><STRONG><a name="[285]"></a>on_underlying_io_error</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tlsio_mbedtls_stm32cube_nucleo.o(i.on_underlying_io_error))
<BR><BR>[Calls]<UL><LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_open_complete
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_open)
</UL>
<P><STRONG><a name="[287]"></a>on_underlying_io_open_complete</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tlsio_mbedtls_stm32cube_nucleo.o(i.on_underlying_io_open_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 3848<LI>Call Chain = on_underlying_io_open_complete &rArr; mbedtls_connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_connect
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_open_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_mbedtls_open)
</UL>
<P><STRONG><a name="[26c]"></a>tlsio_entropy_poll</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tlsio_mbedtls_stm32cube_nucleo.o(i.tlsio_entropy_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tlsio_entropy_poll &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlsio_mbedtls_stm32cube_nucleo.o(i.mbedtls_init)
</UL>
<P><STRONG><a name="[4e6]"></a>HTS221_Check_WhoAmI</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Check_WhoAmI
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Check_WhoAmI
</UL>

<P><STRONG><a name="[4eb]"></a>HTS221_Get_Hum</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_Get_Hum))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HTS221_Get_Hum &rArr; HTS221_Get_Humidity &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Humidity
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_Hum
</UL>

<P><STRONG><a name="[4ed]"></a>HTS221_Get_ODR</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HTS221_Get_ODR &rArr; HTS221_Get_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_ODR
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_ODR
</UL>

<P><STRONG><a name="[4ef]"></a>HTS221_Get_Temp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HTS221_Get_Temp &rArr; HTS221_Get_Temperature &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_Temp
</UL>

<P><STRONG><a name="[4e7]"></a>HTS221_Get_WhoAmI</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_WhoAmI
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_WhoAmI
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Check_WhoAmI
</UL>

<P><STRONG><a name="[d]"></a>HTS221_H_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_H_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HTS221_H_Check_WhoAmI &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>HTS221_H_DeInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HTS221_H_DeInit &rArr; HTS221_H_Sensor_Disable &rArr; HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>HTS221_H_Get_DRDY_Status</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_H_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HTS221_H_Get_DRDY_Status &rArr; HTS221_Get_DataStatus &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>HTS221_H_Get_Hum</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_H_Get_Hum))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HTS221_H_Get_Hum &rArr; HTS221_Get_Hum &rArr; HTS221_Get_Humidity &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Hum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>HTS221_H_Get_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_H_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HTS221_H_Get_ODR &rArr; HTS221_Get_ODR &rArr; HTS221_Get_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>HTS221_H_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_H_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_H_Get_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>HTS221_H_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HTS221_H_Init &rArr; HTS221_Init &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>HTS221_H_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_H_Read_Reg &rArr; HTS221_Read_Reg &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>HTS221_H_Sensor_Disable</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HTS221_H_Sensor_Disable &rArr; HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>HTS221_H_Sensor_Enable</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HTS221_H_Sensor_Enable &rArr; HTS221_Sensor_Enable &rArr; HTS221_Activate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>HTS221_H_Set_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_H_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HTS221_H_Set_ODR &rArr; HTS221_Set_ODR &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>HTS221_H_Set_ODR_Value</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_H_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HTS221_H_Set_ODR_Value &rArr; HTS221_Set_ODR_Value &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>HTS221_H_Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_H_Write_Reg &rArr; HTS221_Write_Reg &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4f1]"></a>HTS221_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HTS221_Init &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Check_WhoAmI
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_BduMode
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Init
</UL>

<P><STRONG><a name="[4f2]"></a>HTS221_Read_Reg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_Read_Reg &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Read_Reg
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Read_Reg
</UL>

<P><STRONG><a name="[4f3]"></a>HTS221_Sensor_Disable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Sensor_Disable
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Sensor_Disable
</UL>

<P><STRONG><a name="[4f4]"></a>HTS221_Sensor_Enable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HTS221_Sensor_Enable &rArr; HTS221_Activate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Sensor_Enable
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Sensor_Enable
</UL>

<P><STRONG><a name="[4f5]"></a>HTS221_Set_ODR</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HTS221_Set_ODR &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Set_ODR
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Set_ODR
</UL>

<P><STRONG><a name="[4f6]"></a>HTS221_Set_ODR_Value</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HTS221_Set_ODR_Value &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Set_ODR_Value
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Set_ODR_Value
</UL>

<P><STRONG><a name="[1a]"></a>HTS221_T_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_T_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HTS221_T_Check_WhoAmI &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>HTS221_T_DeInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HTS221_T_DeInit &rArr; HTS221_T_Sensor_Disable &rArr; HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>HTS221_T_Get_DRDY_Status</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_T_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HTS221_T_Get_DRDY_Status &rArr; HTS221_Get_DataStatus &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>HTS221_T_Get_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_T_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HTS221_T_Get_ODR &rArr; HTS221_Get_ODR &rArr; HTS221_Get_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>HTS221_T_Get_Temp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_T_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HTS221_T_Get_Temp &rArr; HTS221_Get_Temp &rArr; HTS221_Get_Temperature &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Temp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>HTS221_T_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_T_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_T_Get_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>HTS221_T_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HTS221_T_Init &rArr; HTS221_Init &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>HTS221_T_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_T_Read_Reg &rArr; HTS221_Read_Reg &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>HTS221_T_Sensor_Disable</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HTS221_T_Sensor_Disable &rArr; HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>HTS221_T_Sensor_Enable</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HTS221_T_Sensor_Enable &rArr; HTS221_Sensor_Enable &rArr; HTS221_Activate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>HTS221_T_Set_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_T_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HTS221_T_Set_ODR &rArr; HTS221_Set_ODR &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>HTS221_T_Set_ODR_Value</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_T_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HTS221_T_Set_ODR_Value &rArr; HTS221_Set_ODR_Value &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>HTS221_T_Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_T_Write_Reg &rArr; HTS221_Write_Reg &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4f7]"></a>HTS221_Write_Reg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_Write_Reg &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Write_Reg
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Write_Reg
</UL>

<P><STRONG><a name="[27]"></a>LIS3MDL_Check_WhoAmI</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LIS3MDL_Check_WhoAmI &rArr; LIS3MDL_Get_WhoAmI &rArr; LIS3MDL_MAG_R_WHO_AM_I_ &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>LIS3MDL_DeInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LIS3MDL_DeInit &rArr; LIS3MDL_Check_WhoAmI &rArr; LIS3MDL_Get_WhoAmI &rArr; LIS3MDL_MAG_R_WHO_AM_I_ &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Sensor_Disable
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>LIS3MDL_Get_Axes</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = LIS3MDL_Get_Axes &rArr; LIS3MDL_Get_Axes_Raw &rArr; LIS3MDL_MAG_Get_Magnetic &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_Sensitivity
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>LIS3MDL_Get_AxesRaw</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LIS3MDL_Get_AxesRaw &rArr; LIS3MDL_Get_Axes_Raw &rArr; LIS3MDL_MAG_Get_Magnetic &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[566]"></a>LIS3MDL_Get_Axes_Raw</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_Axes_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LIS3MDL_Get_Axes_Raw &rArr; LIS3MDL_MAG_Get_Magnetic &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_Get_Magnetic
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_AxesRaw
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_Axes
</UL>

<P><STRONG><a name="[33]"></a>LIS3MDL_Get_DRDY_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LIS3MDL_Get_DRDY_Status &rArr; LIS3MDL_MAG_R_NewXYZData &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_NewXYZData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>LIS3MDL_Get_FS</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LIS3MDL_Get_FS &rArr; LIS3MDL_MAG_R_FullScale &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_FullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>LIS3MDL_Get_ODR</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LIS3MDL_Get_ODR &rArr; LIS3MDL_MAG_R_OutputDataRate &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_OutputDataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>LIS3MDL_Get_Sensitivity</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LIS3MDL_Get_Sensitivity &rArr; LIS3MDL_MAG_R_FullScale &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_FullScale
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_Axes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>LIS3MDL_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LIS3MDL_Get_WhoAmI &rArr; LIS3MDL_MAG_R_WHO_AM_I_ &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_WHO_AM_I_
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>LIS3MDL_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LIS3MDL_Init &rArr; LIS3MDL_Check_WhoAmI &rArr; LIS3MDL_Get_WhoAmI &rArr; LIS3MDL_MAG_R_WHO_AM_I_ &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Set_ODR
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Set_FS
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Check_WhoAmI
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_TemperatureSensor
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_SystemOperatingMode
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_OperatingModeXY
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_BlockDataUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>LIS3MDL_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LIS3MDL_Read_Reg &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>LIS3MDL_Sensor_Disable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LIS3MDL_Sensor_Disable &rArr; LIS3MDL_MAG_W_SystemOperatingMode &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_SystemOperatingMode
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>LIS3MDL_Sensor_Enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LIS3MDL_Sensor_Enable &rArr; LIS3MDL_MAG_W_SystemOperatingMode &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_SystemOperatingMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>LIS3MDL_Set_FS</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LIS3MDL_Set_FS &rArr; LIS3MDL_MAG_W_FullScale &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_FullScale
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>LIS3MDL_Set_FS_Value</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LIS3MDL_Set_FS_Value &rArr; LIS3MDL_MAG_W_FullScale &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_FullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>LIS3MDL_Set_ODR</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LIS3MDL_Set_ODR &rArr; LIS3MDL_MAG_W_OutputDataRate &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_OutputDataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>LIS3MDL_Set_ODR_Value</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LIS3MDL_Set_ODR_Value &rArr; LIS3MDL_MAG_W_OutputDataRate &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_OutputDataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>LIS3MDL_Write_Reg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LIS3MDL_Write_Reg &rArr; LIS3MDL_MAG_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[574]"></a>LPS22HB_Check_WhoAmI</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Check_WhoAmI
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Check_WhoAmI
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[55]"></a>LPS22HB_FIFO_Get_Data</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LPS22HB_FIFO_Get_Data &rArr; LPS22HB_Get_Temp &rArr; LPS22HB_Get_Temperature &rArr; LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temp
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Press
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>LPS22HB_FIFO_Get_Empty_Status</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Empty_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_FIFO_Get_Empty_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>LPS22HB_FIFO_Get_Fth_Status</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Fth_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_FIFO_Get_Fth_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>LPS22HB_FIFO_Get_Full_Status</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Full_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_FIFO_Get_Full_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>LPS22HB_FIFO_Get_Mode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_FIFO_Get_Mode &rArr; LPS22HB_Get_FifoMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoMode
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>LPS22HB_FIFO_Get_Num_Of_Samples</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Num_Of_Samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_FIFO_Get_Num_Of_Samples &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>LPS22HB_FIFO_Get_Ovr_Status</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Ovr_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_FIFO_Get_Ovr_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>LPS22HB_FIFO_Get_Watermark_Level</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Watermark_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_FIFO_Get_Watermark_Level &rArr; LPS22HB_Get_FifoWatermarkLevel &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoWatermarkLevel
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>LPS22HB_FIFO_Reset_Interrupt</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Reset_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_FIFO_Reset_Interrupt &rArr; LPS22HB_Set_FIFO_OVR_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>LPS22HB_FIFO_Set_Interrupt</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_FIFO_Set_Interrupt &rArr; LPS22HB_Set_FIFO_OVR_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>LPS22HB_FIFO_Set_Mode</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_FIFO_Set_Mode &rArr; LPS22HB_Set_FifoMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoMode
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>LPS22HB_FIFO_Set_Watermark_Level</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Watermark_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_FIFO_Set_Watermark_Level &rArr; LPS22HB_Set_FifoWatermarkLevel &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevel
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>LPS22HB_FIFO_Stop_On_Fth</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Stop_On_Fth))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_FIFO_Stop_On_Fth &rArr; LPS22HB_Set_FifoWatermarkLevelUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>LPS22HB_FIFO_Usage</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_FIFO_Usage &rArr; LPS22HB_Set_FifoModeUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoModeUse
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>LPS22HB_FIFO_Watermark_Usage</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Watermark_Usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_FIFO_Watermark_Usage &rArr; LPS22HB_Set_FifoWatermarkLevelUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[585]"></a>LPS22HB_Get_ODR</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_ODR
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_ODR
</UL>

<P><STRONG><a name="[576]"></a>LPS22HB_Get_Press</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS22HB_Get_Press &rArr; LPS22HB_Get_Pressure &rArr; LPS22HB_Get_RawPressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Pressure
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_Press
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Data
</UL>

<P><STRONG><a name="[577]"></a>LPS22HB_Get_Temp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS22HB_Get_Temp &rArr; LPS22HB_Get_Temperature &rArr; LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_Temp
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Data
</UL>

<P><STRONG><a name="[575]"></a>LPS22HB_Get_WhoAmI</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_WhoAmI
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_WhoAmI
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Check_WhoAmI
</UL>

<P><STRONG><a name="[58b]"></a>LPS22HB_Initialize</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS22HB_Initialize &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Check_WhoAmI
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_PowerMode
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilterCutoff
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilter
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Bdu
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_AutomaticIncrementRegAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Init
</UL>

<P><STRONG><a name="[39]"></a>LPS22HB_P_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_P_Check_WhoAmI &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>LPS22HB_P_DeInit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS22HB_P_DeInit &rArr; LPS22HB_P_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>LPS22HB_P_Get_DRDY_Status</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_P_Get_DRDY_Status &rArr; LPS22HB_Get_DataStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>LPS22HB_P_Get_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_P_Get_ODR &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>LPS22HB_P_Get_Press</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS22HB_P_Get_Press &rArr; LPS22HB_Get_Press &rArr; LPS22HB_Get_Pressure &rArr; LPS22HB_Get_RawPressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Press
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>LPS22HB_P_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_P_Get_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>LPS22HB_P_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LPS22HB_P_Init &rArr; LPS22HB_Initialize &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>LPS22HB_P_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_P_Read_Reg &rArr; LPS22HB_Read_Reg &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>LPS22HB_P_Sensor_Disable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_P_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>LPS22HB_P_Sensor_Enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LPS22HB_P_Sensor_Enable &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>LPS22HB_P_Set_ODR</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LPS22HB_P_Set_ODR &rArr; LPS22HB_Set_ODR_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>LPS22HB_P_Set_ODR_Value</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LPS22HB_P_Set_ODR_Value &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>LPS22HB_P_Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_P_Write_Reg &rArr; LPS22HB_Write_Reg &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[592]"></a>LPS22HB_Read_Reg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Read_Reg &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Read_Reg
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Read_Reg
</UL>

<P><STRONG><a name="[596]"></a>LPS22HB_Set_ODR_Value_When_Disabled</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_Value_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR_Value
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR_Value
</UL>

<P><STRONG><a name="[593]"></a>LPS22HB_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR_Value
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Sensor_Enable
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR_Value
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Sensor_Enable
</UL>

<P><STRONG><a name="[594]"></a>LPS22HB_Set_ODR_When_Disabled</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR
</UL>

<P><STRONG><a name="[595]"></a>LPS22HB_Set_ODR_When_Enabled</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS22HB_Set_ODR_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR
</UL>

<P><STRONG><a name="[46]"></a>LPS22HB_T_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_T_Check_WhoAmI &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>LPS22HB_T_DeInit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS22HB_T_DeInit &rArr; LPS22HB_T_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>LPS22HB_T_Get_DRDY_Status</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_T_Get_DRDY_Status &rArr; LPS22HB_Get_DataStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>LPS22HB_T_Get_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_T_Get_ODR &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>LPS22HB_T_Get_Temp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS22HB_T_Get_Temp &rArr; LPS22HB_Get_Temp &rArr; LPS22HB_Get_Temperature &rArr; LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>LPS22HB_T_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_T_Get_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>LPS22HB_T_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LPS22HB_T_Init &rArr; LPS22HB_Initialize &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>LPS22HB_T_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_T_Read_Reg &rArr; LPS22HB_Read_Reg &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>LPS22HB_T_Sensor_Disable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_T_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>LPS22HB_T_Sensor_Enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LPS22HB_T_Sensor_Enable &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>LPS22HB_T_Set_ODR</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LPS22HB_T_Set_ODR &rArr; LPS22HB_Set_ODR_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>LPS22HB_T_Set_ODR_Value</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LPS22HB_T_Set_ODR_Value &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>LPS22HB_T_Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_T_Write_Reg &rArr; LPS22HB_Write_Reg &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[597]"></a>LPS22HB_Write_Reg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Write_Reg &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Write_Reg
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Write_Reg
</UL>

<P><STRONG><a name="[59b]"></a>LPS25HB_Check_WhoAmI</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS25HB_Check_WhoAmI &rArr; LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Check_WhoAmI
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Check_WhoAmI
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[5a1]"></a>LPS25HB_Get_ODR</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS25HB_Get_ODR &rArr; LPS25HB_Get_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Get_ODR
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Get_ODR
</UL>

<P><STRONG><a name="[5a3]"></a>LPS25HB_Get_Press</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_Get_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS25HB_Get_Press &rArr; LPS25HB_Get_Pressure &rArr; LPS25HB_Get_RawPressure &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Pressure
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Get_Press
</UL>

<P><STRONG><a name="[5a7]"></a>LPS25HB_Get_Temp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS25HB_Get_Temp &rArr; LPS25HB_Get_Temperature &rArr; LPS25HB_Get_RawTemperature &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Get_Temp
</UL>

<P><STRONG><a name="[59c]"></a>LPS25HB_Get_WhoAmI</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_DeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Get_WhoAmI
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Get_WhoAmI
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Check_WhoAmI
</UL>

<P><STRONG><a name="[5a9]"></a>LPS25HB_Init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS25HB_Init &rArr; LPS25HB_Check_WhoAmI &rArr; LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_SpiInterface
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_InterruptCircuitEnable
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Bdu
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Avg
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_DeActivate
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Check_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Init
</UL>

<P><STRONG><a name="[62]"></a>LPS25HB_P_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS25HB_P_Check_WhoAmI &rArr; LPS25HB_Check_WhoAmI &rArr; LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>LPS25HB_P_DeInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS25HB_P_DeInit &rArr; LPS25HB_P_Sensor_Disable &rArr; LPS25HB_Sensor_Disable &rArr; LPS25HB_DeActivate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>LPS25HB_P_Get_DRDY_Status</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS25HB_P_Get_DRDY_Status &rArr; LPS25HB_Get_DataStatus &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>LPS25HB_P_Get_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS25HB_P_Get_ODR &rArr; LPS25HB_Get_ODR &rArr; LPS25HB_Get_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>LPS25HB_P_Get_Press</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Get_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS25HB_P_Get_Press &rArr; LPS25HB_Get_Press &rArr; LPS25HB_Get_Pressure &rArr; LPS25HB_Get_RawPressure &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Press
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>LPS25HB_P_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_P_Get_WhoAmI &rArr; LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>LPS25HB_P_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS25HB_P_Init &rArr; LPS25HB_Init &rArr; LPS25HB_Check_WhoAmI &rArr; LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>LPS25HB_P_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_P_Read_Reg &rArr; LPS25HB_Read_Reg &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>LPS25HB_P_Sensor_Disable</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS25HB_P_Sensor_Disable &rArr; LPS25HB_Sensor_Disable &rArr; LPS25HB_DeActivate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Sensor_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>LPS25HB_P_Sensor_Enable</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS25HB_P_Sensor_Enable &rArr; LPS25HB_Sensor_Enable &rArr; LPS25HB_Activate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Sensor_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>LPS25HB_P_Set_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS25HB_P_Set_ODR &rArr; LPS25HB_Set_ODR &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>LPS25HB_P_Set_ODR_Value</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS25HB_P_Set_ODR_Value &rArr; LPS25HB_Set_ODR_Value &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>LPS25HB_P_Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_P_Write_Reg &rArr; LPS25HB_Write_Reg &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5af]"></a>LPS25HB_Read_Reg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_Read_Reg &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Read_Reg
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Read_Reg
</UL>

<P><STRONG><a name="[5b0]"></a>LPS25HB_Sensor_Disable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS25HB_Sensor_Disable &rArr; LPS25HB_DeActivate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_DeActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Sensor_Disable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Sensor_Disable
</UL>

<P><STRONG><a name="[5b1]"></a>LPS25HB_Sensor_Enable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS25HB_Sensor_Enable &rArr; LPS25HB_Activate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Sensor_Enable
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Sensor_Enable
</UL>

<P><STRONG><a name="[5aa]"></a>LPS25HB_Set_ODR</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS25HB_Set_ODR &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Set_ODR
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Set_ODR
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[5b2]"></a>LPS25HB_Set_ODR_Value</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS25HB_Set_ODR_Value &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Set_ODR_Value
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Set_ODR_Value
</UL>

<P><STRONG><a name="[6f]"></a>LPS25HB_T_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS25HB_T_Check_WhoAmI &rArr; LPS25HB_Check_WhoAmI &rArr; LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>LPS25HB_T_DeInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS25HB_T_DeInit &rArr; LPS25HB_T_Sensor_Disable &rArr; LPS25HB_Sensor_Disable &rArr; LPS25HB_DeActivate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[76]"></a>LPS25HB_T_Get_DRDY_Status</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS25HB_T_Get_DRDY_Status &rArr; LPS25HB_Get_DataStatus &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[71]"></a>LPS25HB_T_Get_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS25HB_T_Get_ODR &rArr; LPS25HB_Get_ODR &rArr; LPS25HB_Get_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[70]"></a>LPS25HB_T_Get_Temp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS25HB_T_Get_Temp &rArr; LPS25HB_Get_Temp &rArr; LPS25HB_Get_Temperature &rArr; LPS25HB_Get_RawTemperature &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Temp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6e]"></a>LPS25HB_T_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_T_Get_WhoAmI &rArr; LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>LPS25HB_T_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS25HB_T_Init &rArr; LPS25HB_Init &rArr; LPS25HB_Check_WhoAmI &rArr; LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[74]"></a>LPS25HB_T_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_T_Read_Reg &rArr; LPS25HB_Read_Reg &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>LPS25HB_T_Sensor_Disable</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS25HB_T_Sensor_Disable &rArr; LPS25HB_Sensor_Disable &rArr; LPS25HB_DeActivate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Sensor_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>LPS25HB_T_Sensor_Enable</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS25HB_T_Sensor_Enable &rArr; LPS25HB_Sensor_Enable &rArr; LPS25HB_Activate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Sensor_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>LPS25HB_T_Set_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS25HB_T_Set_ODR &rArr; LPS25HB_Set_ODR &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[73]"></a>LPS25HB_T_Set_ODR_Value</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS25HB_T_Set_ODR_Value &rArr; LPS25HB_Set_ODR_Value &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[75]"></a>LPS25HB_T_Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_T_Write_Reg &rArr; LPS25HB_Write_Reg &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5b3]"></a>LPS25HB_Write_Reg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_Write_Reg &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Write_Reg
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Write_Reg
</UL>

<P><STRONG><a name="[5fb]"></a>LSM6DS0_Check_WhoAmI</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS0_Check_WhoAmI &rArr; LSM6DS0_Get_WhoAmI &rArr; LSM6DS0_ACC_GYRO_R_WHO_AM_I_ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_DeInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Check_WhoAmI
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_DeInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Check_WhoAmI
</UL>

<P><STRONG><a name="[90]"></a>LSM6DS0_G_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS0_G_Check_WhoAmI &rArr; LSM6DS0_Check_WhoAmI &rArr; LSM6DS0_Get_WhoAmI &rArr; LSM6DS0_ACC_GYRO_R_WHO_AM_I_ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8c]"></a>LSM6DS0_G_DeInit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LSM6DS0_G_DeInit &rArr; LSM6DS0_G_Sensor_Disable &rArr; LSM6DS0_G_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Sensor_Disable
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[91]"></a>LSM6DS0_G_Get_Axes</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = LSM6DS0_G_Get_Axes &rArr; LSM6DS0_G_Get_Axes_Raw &rArr; LSM6DS0_ACC_GYRO_Get_AngularRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Sensitivity
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[92]"></a>LSM6DS0_G_Get_AxesRaw</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LSM6DS0_G_Get_AxesRaw &rArr; LSM6DS0_G_Get_Axes_Raw &rArr; LSM6DS0_ACC_GYRO_Get_AngularRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5fd]"></a>LSM6DS0_G_Get_Axes_Raw</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_Axes_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS0_G_Get_Axes_Raw &rArr; LSM6DS0_ACC_GYRO_Get_AngularRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_Get_AngularRate
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_AxesRaw
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Axes
</UL>

<P><STRONG><a name="[9a]"></a>LSM6DS0_G_Get_Axes_Status</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS0_G_Get_Axes_Status &rArr; LSM6DS0_ACC_GYRO_R_GyroAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroAxisZ
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroAxisY
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroAxisX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9e]"></a>LSM6DS0_G_Get_DRDY_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS0_G_Get_DRDY_Status &rArr; LSM6DS0_ACC_GYRO_R_GyroDataReadyFlag &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroDataReadyFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[97]"></a>LSM6DS0_G_Get_FS</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS0_G_Get_FS &rArr; LSM6DS0_ACC_GYRO_R_GyroFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroFullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[94]"></a>LSM6DS0_G_Get_ODR</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS0_G_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroDataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_When_Enabled
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_Value_When_Enabled
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[93]"></a>LSM6DS0_G_Get_Sensitivity</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS0_G_Get_Sensitivity &rArr; LSM6DS0_ACC_GYRO_R_GyroFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroFullScale
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Axes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8f]"></a>LSM6DS0_G_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_G_Get_WhoAmI &rArr; LSM6DS0_Get_WhoAmI &rArr; LSM6DS0_ACC_GYRO_R_WHO_AM_I_ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8b]"></a>LSM6DS0_G_Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS0_G_Init &rArr; LSM6DS0_G_Set_Axes_Status &rArr; LSM6DS0_ACC_GYRO_W_GyroAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_When_Disabled
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_FS
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_Axes_Status
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Check_WhoAmI
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroDataRate
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_BlockDataUpdate
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9c]"></a>LSM6DS0_G_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_G_Read_Reg &rArr; LSM6DS0_Read_Reg &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8e]"></a>LSM6DS0_G_Sensor_Disable</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DS0_G_Sensor_Disable &rArr; LSM6DS0_G_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_ODR
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroDataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8d]"></a>LSM6DS0_G_Sensor_Enable</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LSM6DS0_G_Sensor_Enable &rArr; LSM6DS0_G_Set_ODR_Value_When_Enabled &rArr; LSM6DS0_G_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9b]"></a>LSM6DS0_G_Set_Axes_Status</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS0_G_Set_Axes_Status &rArr; LSM6DS0_ACC_GYRO_W_GyroAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisZ
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisY
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisX
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[98]"></a>LSM6DS0_G_Set_FS</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS0_G_Set_FS &rArr; LSM6DS0_ACC_GYRO_W_GyroFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroFullScale
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[99]"></a>LSM6DS0_G_Set_FS_Value</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS0_G_Set_FS_Value &rArr; LSM6DS0_ACC_GYRO_W_GyroFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroFullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[95]"></a>LSM6DS0_G_Set_ODR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS0_G_Set_ODR &rArr; LSM6DS0_G_Set_ODR_When_Enabled &rArr; LSM6DS0_G_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_When_Enabled
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[96]"></a>LSM6DS0_G_Set_ODR_Value</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS0_G_Set_ODR_Value &rArr; LSM6DS0_G_Set_ODR_Value_When_Enabled &rArr; LSM6DS0_G_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_Value_When_Enabled
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_Value_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[602]"></a>LSM6DS0_G_Set_ODR_Value_When_Disabled</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_ODR_Value_When_Disabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LSM6DS0_G_Set_ODR_Value_When_Disabled
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_Value
</UL>

<P><STRONG><a name="[600]"></a>LSM6DS0_G_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DS0_G_Set_ODR_Value_When_Enabled &rArr; LSM6DS0_G_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_ODR
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroDataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_Value
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Sensor_Enable
</UL>

<P><STRONG><a name="[5fe]"></a>LSM6DS0_G_Set_ODR_When_Disabled</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_ODR_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Init
</UL>

<P><STRONG><a name="[601]"></a>LSM6DS0_G_Set_ODR_When_Enabled</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_ODR_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DS0_G_Set_ODR_When_Enabled &rArr; LSM6DS0_G_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_ODR
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroDataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR
</UL>

<P><STRONG><a name="[9d]"></a>LSM6DS0_G_Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_G_Write_Reg &rArr; LSM6DS0_Write_Reg &rArr; LSM6DS0_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5fc]"></a>LSM6DS0_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_Get_WhoAmI &rArr; LSM6DS0_ACC_GYRO_R_WHO_AM_I_ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_WHO_AM_I_
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_WhoAmI
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_WhoAmI
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Check_WhoAmI
</UL>

<P><STRONG><a name="[5ff]"></a>LSM6DS0_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_Read_Reg &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Read_Reg
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Read_Reg
</UL>

<P><STRONG><a name="[603]"></a>LSM6DS0_Write_Reg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_Write_Reg &rArr; LSM6DS0_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Write_Reg
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Write_Reg
</UL>

<P><STRONG><a name="[7c]"></a>LSM6DS0_X_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS0_X_Check_WhoAmI &rArr; LSM6DS0_Check_WhoAmI &rArr; LSM6DS0_Get_WhoAmI &rArr; LSM6DS0_ACC_GYRO_R_WHO_AM_I_ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>LSM6DS0_X_DeInit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS0_X_DeInit &rArr; LSM6DS0_X_Sensor_Disable &rArr; LSM6DS0_X_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Sensor_Disable
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7d]"></a>LSM6DS0_X_Get_Axes</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = LSM6DS0_X_Get_Axes &rArr; LSM6DS0_X_Get_Axes_Raw &rArr; LSM6DS0_ACC_GYRO_Get_Acceleration &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Sensitivity
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7e]"></a>LSM6DS0_X_Get_AxesRaw</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LSM6DS0_X_Get_AxesRaw &rArr; LSM6DS0_X_Get_Axes_Raw &rArr; LSM6DS0_ACC_GYRO_Get_Acceleration &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[604]"></a>LSM6DS0_X_Get_Axes_Raw</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_Axes_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS0_X_Get_Axes_Raw &rArr; LSM6DS0_ACC_GYRO_Get_Acceleration &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_Get_Acceleration
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_AxesRaw
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Axes
</UL>

<P><STRONG><a name="[86]"></a>LSM6DS0_X_Get_Axes_Status</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS0_X_Get_Axes_Status &rArr; LSM6DS0_ACC_GYRO_R_AccelerometerAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerAxisZ
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerAxisY
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerAxisX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8a]"></a>LSM6DS0_X_Get_DRDY_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS0_X_Get_DRDY_Status &rArr; LSM6DS0_ACC_GYRO_R_AccelerometerDataReadyFlag &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerDataReadyFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>LSM6DS0_X_Get_FS</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS0_X_Get_FS &rArr; LSM6DS0_ACC_GYRO_R_AccelerometerFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerFullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[80]"></a>LSM6DS0_X_Get_ODR</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS0_X_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerDataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7f]"></a>LSM6DS0_X_Get_Sensitivity</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS0_X_Get_Sensitivity &rArr; LSM6DS0_ACC_GYRO_R_AccelerometerFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerFullScale
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Axes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>LSM6DS0_X_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_X_Get_WhoAmI &rArr; LSM6DS0_Get_WhoAmI &rArr; LSM6DS0_ACC_GYRO_R_WHO_AM_I_ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[77]"></a>LSM6DS0_X_Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS0_X_Init &rArr; LSM6DS0_X_Set_Axes_Status &rArr; LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_ODR_When_Disabled
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_FS
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_Axes_Status
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Check_WhoAmI
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_BlockDataUpdate
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerDataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>LSM6DS0_X_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_X_Read_Reg &rArr; LSM6DS0_Read_Reg &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7a]"></a>LSM6DS0_X_Sensor_Disable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS0_X_Sensor_Disable &rArr; LSM6DS0_X_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_ODR
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerDataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>LSM6DS0_X_Sensor_Enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS0_X_Sensor_Enable &rArr; LSM6DS0_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS0_ACC_GYRO_W_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[87]"></a>LSM6DS0_X_Set_Axes_Status</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS0_X_Set_Axes_Status &rArr; LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisY
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisX
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[84]"></a>LSM6DS0_X_Set_FS</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS0_X_Set_FS &rArr; LSM6DS0_ACC_GYRO_W_AccelerometerFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerFullScale
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[85]"></a>LSM6DS0_X_Set_FS_Value</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS0_X_Set_FS_Value &rArr; LSM6DS0_ACC_GYRO_W_AccelerometerFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerFullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[81]"></a>LSM6DS0_X_Set_ODR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS0_X_Set_ODR &rArr; LSM6DS0_X_Set_ODR_When_Enabled &rArr; LSM6DS0_ACC_GYRO_W_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_ODR_When_Enabled
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_ODR_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[82]"></a>LSM6DS0_X_Set_ODR_Value</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS0_X_Set_ODR_Value &rArr; LSM6DS0_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS0_ACC_GYRO_W_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_ODR_Value_When_Enabled
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_ODR_Value_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[608]"></a>LSM6DS0_X_Set_ODR_Value_When_Disabled</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_ODR_Value_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_ODR_Value
</UL>

<P><STRONG><a name="[606]"></a>LSM6DS0_X_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS0_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS0_ACC_GYRO_W_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerDataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_ODR_Value
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Sensor_Enable
</UL>

<P><STRONG><a name="[605]"></a>LSM6DS0_X_Set_ODR_When_Disabled</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_ODR_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_ODR
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Init
</UL>

<P><STRONG><a name="[607]"></a>LSM6DS0_X_Set_ODR_When_Enabled</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_ODR_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS0_X_Set_ODR_When_Enabled &rArr; LSM6DS0_ACC_GYRO_W_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerDataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_ODR
</UL>

<P><STRONG><a name="[89]"></a>LSM6DS0_X_Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_X_Write_Reg &rArr; LSM6DS0_Write_Reg &rArr; LSM6DS0_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[668]"></a>LSM6DS3_Check_WhoAmI</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_Check_WhoAmI &rArr; LSM6DS3_Get_WhoAmI &rArr; LSM6DS3_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Check_WhoAmI
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_DeInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Check_WhoAmI
</UL>

<P><STRONG><a name="[d5]"></a>LSM6DS3_FIFO_G_Get_Axis</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_G_Get_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LSM6DS3_FIFO_G_Get_Axis &rArr; LSM6DS3_FIFO_Get_Data &rArr; LSM6DS3_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Sensitivity
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Get_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d4]"></a>LSM6DS3_FIFO_G_Set_Decimation</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_G_Set_Decimation))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_FIFO_G_Set_Decimation &rArr; LSM6DS3_ACC_GYRO_W_DEC_FIFO_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DEC_FIFO_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ca]"></a>LSM6DS3_FIFO_Get_Data</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DS3_FIFO_Get_Data &rArr; LSM6DS3_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_Get_GetFIFOData
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_X_Get_Axis
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_G_Get_Axis
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c7]"></a>LSM6DS3_FIFO_Get_Empty_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Empty_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_FIFO_Get_Empty_Status &rArr; LSM6DS3_ACC_GYRO_R_FIFOEmpty &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FIFOEmpty
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c6]"></a>LSM6DS3_FIFO_Get_Full_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Full_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_FIFO_Get_Full_Status &rArr; LSM6DS3_ACC_GYRO_R_FIFOFull &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FIFOFull
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[cb]"></a>LSM6DS3_FIFO_Get_Num_Of_Samples</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Num_Of_Samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_FIFO_Get_Num_Of_Samples &rArr; LSM6DS3_ACC_GYRO_R_FIFONumOfEntries &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FIFONumOfEntries
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c8]"></a>LSM6DS3_FIFO_Get_Overrun_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Overrun_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_FIFO_Get_Overrun_Status &rArr; LSM6DS3_ACC_GYRO_R_OVERRUN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_OVERRUN
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c9]"></a>LSM6DS3_FIFO_Get_Pattern</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Pattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_FIFO_Get_Pattern &rArr; LSM6DS3_ACC_GYRO_R_FIFOPattern &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FIFOPattern
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[cf]"></a>LSM6DS3_FIFO_Set_INT1_FIFO_Full</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_INT1_FIFO_Full))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_FIFO_Set_INT1_FIFO_Full &rArr; LSM6DS3_ACC_GYRO_W_FSS5_on_INT1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FSS5_on_INT1
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ce]"></a>LSM6DS3_FIFO_Set_Mode</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_FIFO_Set_Mode &rArr; LSM6DS3_ACC_GYRO_W_FIFO_MODE &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FIFO_MODE
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c5]"></a>LSM6DS3_FIFO_Set_ODR_Value</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_FIFO_Set_ODR_Value &rArr; LSM6DS3_ACC_GYRO_W_ODR_FIFO &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_FIFO
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d1]"></a>LSM6DS3_FIFO_Set_Stop_On_Fth</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_Stop_On_Fth))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_FIFO_Set_Stop_On_Fth &rArr; LSM6DS3_ACC_GYRO_W_STOP_ON_FTH &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_STOP_ON_FTH
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d0]"></a>LSM6DS3_FIFO_Set_Watermark_Level</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_Watermark_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_FIFO_Set_Watermark_Level &rArr; LSM6DS3_ACC_GYRO_W_FIFO_Watermark &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FIFO_Watermark
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[cd]"></a>LSM6DS3_FIFO_X_Get_Axis</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_X_Get_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LSM6DS3_FIFO_X_Get_Axis &rArr; LSM6DS3_FIFO_Get_Data &rArr; LSM6DS3_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Sensitivity
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Get_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[cc]"></a>LSM6DS3_FIFO_X_Set_Decimation</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_X_Set_Decimation))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_FIFO_X_Set_Decimation &rArr; LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f1]"></a>LSM6DS3_G_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_G_Check_WhoAmI &rArr; LSM6DS3_Check_WhoAmI &rArr; LSM6DS3_Get_WhoAmI &rArr; LSM6DS3_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ed]"></a>LSM6DS3_G_DeInit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS3_G_DeInit &rArr; LSM6DS3_G_Sensor_Disable &rArr; LSM6DS3_G_Get_ODR &rArr; LSM6DS3_ACC_GYRO_R_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Sensor_Disable
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f2]"></a>LSM6DS3_G_Get_Axes</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = LSM6DS3_G_Get_Axes &rArr; LSM6DS3_G_Get_Axes_Raw &rArr; LSM6DS3_ACC_GYRO_GetRawGyroData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Sensitivity
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f3]"></a>LSM6DS3_G_Get_AxesRaw</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LSM6DS3_G_Get_AxesRaw &rArr; LSM6DS3_G_Get_Axes_Raw &rArr; LSM6DS3_ACC_GYRO_GetRawGyroData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[66a]"></a>LSM6DS3_G_Get_Axes_Raw</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_Axes_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS3_G_Get_Axes_Raw &rArr; LSM6DS3_ACC_GYRO_GetRawGyroData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_GetRawGyroData
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_AxesRaw
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Axes
</UL>

<P><STRONG><a name="[fb]"></a>LSM6DS3_G_Get_Axes_Status</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_G_Get_Axes_Status &rArr; LSM6DS3_ACC_GYRO_R_ZEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_ZEN_G
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_YEN_G
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_XEN_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ff]"></a>LSM6DS3_G_Get_DRDY_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_G_Get_DRDY_Status &rArr; LSM6DS3_ACC_GYRO_R_GDA &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_GDA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f8]"></a>LSM6DS3_G_Get_FS</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_G_Get_FS &rArr; LSM6DS3_ACC_GYRO_R_FS_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_G
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_125
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f5]"></a>LSM6DS3_G_Get_ODR</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_G_Get_ODR &rArr; LSM6DS3_ACC_GYRO_R_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_ODR_G
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f4]"></a>LSM6DS3_G_Get_Sensitivity</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_G_Get_Sensitivity &rArr; LSM6DS3_ACC_GYRO_R_FS_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_G
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_125
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Axes
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_G_Get_Axis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f0]"></a>LSM6DS3_G_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_G_Get_WhoAmI &rArr; LSM6DS3_Get_WhoAmI &rArr; LSM6DS3_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ec]"></a>LSM6DS3_G_Init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS3_G_Init &rArr; LSM6DS3_G_Set_Axes_Status &rArr; LSM6DS3_ACC_GYRO_W_ZEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_BDU
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR_When_Disabled
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_FS
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_Axes_Status
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Check_WhoAmI
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_G
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_IF_Addr_Incr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[fd]"></a>LSM6DS3_G_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_G_Read_Reg &rArr; LSM6DS3_Read_Reg &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ef]"></a>LSM6DS3_G_Sensor_Disable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_G_Sensor_Disable &rArr; LSM6DS3_G_Get_ODR &rArr; LSM6DS3_ACC_GYRO_R_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_ODR
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_G
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ee]"></a>LSM6DS3_G_Sensor_Enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_G_Sensor_Enable &rArr; LSM6DS3_G_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[fc]"></a>LSM6DS3_G_Set_Axes_Status</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_G_Set_Axes_Status &rArr; LSM6DS3_ACC_GYRO_W_ZEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ZEN_G
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_YEN_G
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_XEN_G
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f9]"></a>LSM6DS3_G_Set_FS</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_G_Set_FS &rArr; LSM6DS3_ACC_GYRO_W_FS_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_G
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[fa]"></a>LSM6DS3_G_Set_FS_Value</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_G_Set_FS_Value &rArr; LSM6DS3_ACC_GYRO_W_FS_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_G
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_125
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d6]"></a>LSM6DS3_G_Set_Interrupt_Latch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_Interrupt_Latch))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_G_Set_Interrupt_Latch &rArr; LSM6DS3_Set_Interrupt_Latch &rArr; LSM6DS3_ACC_GYRO_W_LIR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Set_Interrupt_Latch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f6]"></a>LSM6DS3_G_Set_ODR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_G_Set_ODR &rArr; LSM6DS3_G_Set_ODR_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR_When_Enabled
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f7]"></a>LSM6DS3_G_Set_ODR_Value</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_G_Set_ODR_Value &rArr; LSM6DS3_G_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR_Value_When_Enabled
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR_Value_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[670]"></a>LSM6DS3_G_Set_ODR_Value_When_Disabled</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_ODR_Value_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR_Value
</UL>

<P><STRONG><a name="[66d]"></a>LSM6DS3_G_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_G_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_G
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR_Value
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Sensor_Enable
</UL>

<P><STRONG><a name="[66b]"></a>LSM6DS3_G_Set_ODR_When_Disabled</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_ODR_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
</UL>

<P><STRONG><a name="[66f]"></a>LSM6DS3_G_Set_ODR_When_Enabled</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_ODR_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_G_Set_ODR_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_G
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR
</UL>

<P><STRONG><a name="[d7]"></a>LSM6DS3_G_Set_SelfTest</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_SelfTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_G_Set_SelfTest &rArr; LSM6DS3_ACC_GYRO_W_SelfTest_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SelfTest_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[fe]"></a>LSM6DS3_G_Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_G_Write_Reg &rArr; LSM6DS3_Write_Reg &rArr; LSM6DS3_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[669]"></a>LSM6DS3_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_Get_WhoAmI &rArr; LSM6DS3_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_WHO_AM_I
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_WhoAmI
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_WhoAmI
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Check_WhoAmI
</UL>

<P><STRONG><a name="[66c]"></a>LSM6DS3_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_Read_Reg &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Read_Reg
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Read_Reg
</UL>

<P><STRONG><a name="[66e]"></a>LSM6DS3_Set_Interrupt_Latch</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_Set_Interrupt_Latch))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_Set_Interrupt_Latch &rArr; LSM6DS3_ACC_GYRO_W_LIR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_LIR
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Interrupt_Latch
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_Interrupt_Latch
</UL>

<P><STRONG><a name="[671]"></a>LSM6DS3_Write_Reg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_Write_Reg &rArr; LSM6DS3_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Write_Reg
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Write_Reg
</UL>

<P><STRONG><a name="[dd]"></a>LSM6DS3_X_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_X_Check_WhoAmI &rArr; LSM6DS3_Check_WhoAmI &rArr; LSM6DS3_Get_WhoAmI &rArr; LSM6DS3_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d9]"></a>LSM6DS3_X_DeInit</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LSM6DS3_X_DeInit &rArr; LSM6DS3_X_Disable_Pedometer &rArr; LSM6DS3_X_Set_Pedometer_Threshold &rArr; LSM6DS3_ACC_GYRO_W_PedoThreshold &rArr; LSM6DS3_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Sensor_Disable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Wake_Up_Detection
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Tilt_Detection
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Pedometer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Free_Fall_Detection
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_6D_Orientation
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[bc]"></a>LSM6DS3_X_Disable_6D_Orientation</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_6D_Orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Disable_6D_Orientation &rArr; LSM6DS3_ACC_GYRO_W_6DEvOnInt2 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_6DEvOnInt2
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_6DEvOnInt1
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SIXD_THS
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b5]"></a>LSM6DS3_X_Disable_Double_Tap_Detection</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Double_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_X_Disable_Double_Tap_Detection &rArr; LSM6DS3_X_Set_Tap_Threshold &rArr; LSM6DS3_ACC_GYRO_W_TAP_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Threshold
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Shock_Time
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Quiet_Time
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Duration_Time
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TapEvOnInt2
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a0]"></a>LSM6DS3_X_Disable_Free_Fall_Detection</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Free_Fall_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_X_Disable_Free_Fall_Detection &rArr; LSM6DS3_ACC_GYRO_W_FF_Duration &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_THS
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_Duration
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FFEvOnInt2
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FFEvOnInt1
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a4]"></a>LSM6DS3_X_Disable_Pedometer</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS3_X_Disable_Pedometer &rArr; LSM6DS3_X_Set_Pedometer_Threshold &rArr; LSM6DS3_ACC_GYRO_W_PedoThreshold &rArr; LSM6DS3_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FUNC_EN
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Pedometer_Threshold
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_EN
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b2]"></a>LSM6DS3_X_Disable_Single_Tap_Detection</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Single_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_X_Disable_Single_Tap_Detection &rArr; LSM6DS3_X_Set_Tap_Threshold &rArr; LSM6DS3_ACC_GYRO_W_TAP_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Threshold
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Shock_Time
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Quiet_Time
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SingleTapOnInt2
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SingleTapOnInt1
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a8]"></a>LSM6DS3_X_Disable_Step_Counter_Reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Step_Counter_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Disable_Step_Counter_Reset &rArr; LSM6DS3_ACC_GYRO_W_PedoStepReset &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoStepReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ab]"></a>LSM6DS3_X_Disable_Tilt_Detection</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Tilt_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Disable_Tilt_Detection &rArr; LSM6DS3_ACC_GYRO_W_FUNC_EN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FUNC_EN
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TiltEvOnInt2
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TILT_EN
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ae]"></a>LSM6DS3_X_Disable_Wake_Up_Detection</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Wake_Up_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Disable_Wake_Up_Detection &rArr; LSM6DS3_ACC_GYRO_W_WUEvOnInt2 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WUEvOnInt2
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WK_THS
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WAKE_DUR
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[bb]"></a>LSM6DS3_X_Enable_6D_Orientation</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_6D_Orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS3_X_Enable_6D_Orientation &rArr; LSM6DS3_X_Set_ODR_Value &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_6DEvOnInt2
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_6DEvOnInt1
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SIXD_THS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b4]"></a>LSM6DS3_X_Enable_Double_Tap_Detection</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Double_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS3_X_Enable_Double_Tap_Detection &rArr; LSM6DS3_X_Set_ODR_Value &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Threshold
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Shock_Time
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Quiet_Time
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Duration_Time
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TapEvOnInt2
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9f]"></a>LSM6DS3_X_Enable_Free_Fall_Detection</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Free_Fall_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS3_X_Enable_Free_Fall_Detection &rArr; LSM6DS3_X_Set_ODR_Value &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_Duration
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FFEvOnInt2
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FFEvOnInt1
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Free_Fall_Threshold
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TIMER_HR
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SLEEP_DUR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a3]"></a>LSM6DS3_X_Enable_Pedometer</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS3_X_Enable_Pedometer &rArr; LSM6DS3_X_Set_Pedometer_Threshold &rArr; LSM6DS3_ACC_GYRO_W_PedoThreshold &rArr; LSM6DS3_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FUNC_EN
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Pedometer_Threshold
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_EN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b1]"></a>LSM6DS3_X_Enable_Single_Tap_Detection</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Single_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS3_X_Enable_Single_Tap_Detection &rArr; LSM6DS3_X_Set_ODR_Value &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Threshold
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Shock_Time
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Quiet_Time
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SingleTapOnInt2
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SingleTapOnInt1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a7]"></a>LSM6DS3_X_Enable_Step_Counter_Reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Step_Counter_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Enable_Step_Counter_Reset &rArr; LSM6DS3_ACC_GYRO_W_PedoStepReset &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoStepReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[aa]"></a>LSM6DS3_X_Enable_Tilt_Detection</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Tilt_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS3_X_Enable_Tilt_Detection &rArr; LSM6DS3_X_Set_ODR_Value &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FUNC_EN
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TiltEvOnInt2
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TILT_EN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ad]"></a>LSM6DS3_X_Enable_Wake_Up_Detection</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Wake_Up_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS3_X_Enable_Wake_Up_Detection &rArr; LSM6DS3_X_Set_ODR_Value &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WUEvOnInt2
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WK_THS
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WAKE_DUR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[bd]"></a>LSM6DS3_X_Get_6D_Orientation_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Get_6D_Orientation_Status &rArr; LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[bf]"></a>LSM6DS3_X_Get_6D_Orientation_XH</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_XH))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Get_6D_Orientation_XH &rArr; LSM6DS3_ACC_GYRO_R_DSD_XH &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_XH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[be]"></a>LSM6DS3_X_Get_6D_Orientation_XL</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Get_6D_Orientation_XL &rArr; LSM6DS3_ACC_GYRO_R_DSD_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c1]"></a>LSM6DS3_X_Get_6D_Orientation_YH</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_YH))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Get_6D_Orientation_YH &rArr; LSM6DS3_ACC_GYRO_R_DSD_YH &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_YH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c0]"></a>LSM6DS3_X_Get_6D_Orientation_YL</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_YL))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Get_6D_Orientation_YL &rArr; LSM6DS3_ACC_GYRO_R_DSD_YL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_YL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c3]"></a>LSM6DS3_X_Get_6D_Orientation_ZH</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_ZH))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Get_6D_Orientation_ZH &rArr; LSM6DS3_ACC_GYRO_R_DSD_ZH &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_ZH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c2]"></a>LSM6DS3_X_Get_6D_Orientation_ZL</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_ZL))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Get_6D_Orientation_ZL &rArr; LSM6DS3_ACC_GYRO_R_DSD_ZL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_ZL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[de]"></a>LSM6DS3_X_Get_Axes</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = LSM6DS3_X_Get_Axes &rArr; LSM6DS3_X_Get_Axes_Raw &rArr; LSM6DS3_ACC_GYRO_GetRawAccData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Sensitivity
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[df]"></a>LSM6DS3_X_Get_AxesRaw</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LSM6DS3_X_Get_AxesRaw &rArr; LSM6DS3_X_Get_Axes_Raw &rArr; LSM6DS3_ACC_GYRO_GetRawAccData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[672]"></a>LSM6DS3_X_Get_Axes_Raw</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Axes_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS3_X_Get_Axes_Raw &rArr; LSM6DS3_ACC_GYRO_GetRawAccData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_GetRawAccData
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_AxesRaw
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Axes
</UL>

<P><STRONG><a name="[e7]"></a>LSM6DS3_X_Get_Axes_Status</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_X_Get_Axes_Status &rArr; LSM6DS3_ACC_GYRO_R_ZEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_ZEN_XL
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_YEN_XL
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_XEN_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[eb]"></a>LSM6DS3_X_Get_DRDY_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Get_DRDY_Status &rArr; LSM6DS3_ACC_GYRO_R_XLDA &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_XLDA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b6]"></a>LSM6DS3_X_Get_Double_Tap_Detection_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Double_Tap_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Get_Double_Tap_Detection_Status &rArr; LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c4]"></a>LSM6DS3_X_Get_Event_Status</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Event_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LSM6DS3_X_Get_Event_Status &rArr; LSM6DS3_X_Read_Reg &rArr; LSM6DS3_Read_Reg &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e4]"></a>LSM6DS3_X_Get_FS</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Get_FS &rArr; LSM6DS3_ACC_GYRO_R_FS_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a1]"></a>LSM6DS3_X_Get_Free_Fall_Detection_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Free_Fall_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Get_Free_Fall_Detection_Status &rArr; LSM6DS3_ACC_GYRO_R_FF_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FF_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e1]"></a>LSM6DS3_X_Get_ODR</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Get_ODR &rArr; LSM6DS3_ACC_GYRO_R_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_ODR_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a5]"></a>LSM6DS3_X_Get_Pedometer_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Pedometer_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Get_Pedometer_Status &rArr; LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e0]"></a>LSM6DS3_X_Get_Sensitivity</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Get_Sensitivity &rArr; LSM6DS3_ACC_GYRO_R_FS_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Axes
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_X_Get_Axis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b3]"></a>LSM6DS3_X_Get_Single_Tap_Detection_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Single_Tap_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Get_Single_Tap_Detection_Status &rArr; LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a6]"></a>LSM6DS3_X_Get_Step_Count</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Step_Count))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DS3_X_Get_Step_Count &rArr; LSM6DS3_ACC_GYRO_Get_GetStepCounter &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_Get_GetStepCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ac]"></a>LSM6DS3_X_Get_Tilt_Detection_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Tilt_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Get_Tilt_Detection_Status &rArr; LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[af]"></a>LSM6DS3_X_Get_Wake_Up_Detection_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Wake_Up_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Get_Wake_Up_Detection_Status &rArr; LSM6DS3_ACC_GYRO_R_WU_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_WU_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[dc]"></a>LSM6DS3_X_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Get_WhoAmI &rArr; LSM6DS3_Get_WhoAmI &rArr; LSM6DS3_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d8]"></a>LSM6DS3_X_Init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS3_X_Init &rArr; LSM6DS3_X_Set_Axes_Status &rArr; LSM6DS3_ACC_GYRO_W_ZEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_BDU
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_When_Disabled
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_FS
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Axes_Status
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Check_WhoAmI
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_XL
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_IF_Addr_Incr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e9]"></a>LSM6DS3_X_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Read_Reg &rArr; LSM6DS3_Read_Reg &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Event_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[db]"></a>LSM6DS3_X_Sensor_Disable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_X_Sensor_Disable &rArr; LSM6DS3_X_Get_ODR &rArr; LSM6DS3_ACC_GYRO_R_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_ODR
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[da]"></a>LSM6DS3_X_Sensor_Enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_X_Sensor_Enable &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e8]"></a>LSM6DS3_X_Set_Axes_Status</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_X_Set_Axes_Status &rArr; LSM6DS3_ACC_GYRO_W_ZEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ZEN_XL
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_YEN_XL
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_XEN_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e5]"></a>LSM6DS3_X_Set_FS</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Set_FS &rArr; LSM6DS3_ACC_GYRO_W_FS_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e6]"></a>LSM6DS3_X_Set_FS_Value</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Set_FS_Value &rArr; LSM6DS3_ACC_GYRO_W_FS_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a2]"></a>LSM6DS3_X_Set_Free_Fall_Threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Free_Fall_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Set_Free_Fall_Threshold &rArr; LSM6DS3_ACC_GYRO_W_FF_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_THS
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d2]"></a>LSM6DS3_X_Set_Interrupt_Latch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Interrupt_Latch))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Set_Interrupt_Latch &rArr; LSM6DS3_Set_Interrupt_Latch &rArr; LSM6DS3_ACC_GYRO_W_LIR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Set_Interrupt_Latch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e2]"></a>LSM6DS3_X_Set_ODR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_X_Set_ODR &rArr; LSM6DS3_X_Set_ODR_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_When_Enabled
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e3]"></a>LSM6DS3_X_Set_ODR_Value</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_X_Set_ODR_Value &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value_When_Enabled
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value_When_Disabled
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Wake_Up_Detection
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Tilt_Detection
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Pedometer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_6D_Orientation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[676]"></a>LSM6DS3_X_Set_ODR_Value_When_Disabled</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_ODR_Value_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
</UL>

<P><STRONG><a name="[674]"></a>LSM6DS3_X_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Sensor_Enable
</UL>

<P><STRONG><a name="[673]"></a>LSM6DS3_X_Set_ODR_When_Disabled</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_ODR_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
</UL>

<P><STRONG><a name="[675]"></a>LSM6DS3_X_Set_ODR_When_Enabled</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_ODR_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Set_ODR_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR
</UL>

<P><STRONG><a name="[a9]"></a>LSM6DS3_X_Set_Pedometer_Threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Pedometer_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DS3_X_Set_Pedometer_Threshold &rArr; LSM6DS3_ACC_GYRO_W_PedoThreshold &rArr; LSM6DS3_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Pedometer
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Pedometer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d3]"></a>LSM6DS3_X_Set_SelfTest</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_SelfTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Set_SelfTest &rArr; LSM6DS3_ACC_GYRO_W_SelfTest_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SelfTest_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ba]"></a>LSM6DS3_X_Set_Tap_Duration_Time</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Tap_Duration_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Set_Tap_Duration_Time &rArr; LSM6DS3_ACC_GYRO_W_DUR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DUR
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b9]"></a>LSM6DS3_X_Set_Tap_Quiet_Time</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Tap_Quiet_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Set_Tap_Quiet_Time &rArr; LSM6DS3_ACC_GYRO_W_QUIET_Duration &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_QUIET_Duration
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b8]"></a>LSM6DS3_X_Set_Tap_Shock_Time</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Tap_Shock_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Set_Tap_Shock_Time &rArr; LSM6DS3_ACC_GYRO_W_SHOCK_Duration &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SHOCK_Duration
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b7]"></a>LSM6DS3_X_Set_Tap_Threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Tap_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Set_Tap_Threshold &rArr; LSM6DS3_ACC_GYRO_W_TAP_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_THS
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b0]"></a>LSM6DS3_X_Set_Wake_Up_Threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Wake_Up_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Set_Wake_Up_Threshold &rArr; LSM6DS3_ACC_GYRO_W_WK_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WK_THS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ea]"></a>LSM6DS3_X_Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Write_Reg &rArr; LSM6DS3_Write_Reg &rArr; LSM6DS3_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[105]"></a>LSM303AGR_X_Check_WhoAmI</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM303AGR_X_Check_WhoAmI &rArr; LSM303AGR_X_Get_WhoAmI &rArr; LSM303AGR_ACC_R_WHO_AM_I &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[101]"></a>LSM303AGR_X_DeInit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM303AGR_X_DeInit &rArr; LSM303AGR_X_Sensor_Disable &rArr; LSM303AGR_X_Get_ODR &rArr; LSM303AGR_ACC_R_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Sensor_Disable
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[106]"></a>LSM303AGR_X_Get_Axes</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LSM303AGR_X_Get_Axes &rArr; LSM303AGR_ACC_Get_Acceleration &rArr; LSM303AGR_ACC_R_HiRes &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Acceleration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[107]"></a>LSM303AGR_X_Get_AxesRaw</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LSM303AGR_X_Get_AxesRaw &rArr; LSM303AGR_X_Get_Axes_Raw &rArr; LSM303AGR_ACC_R_HiRes &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5d6]"></a>LSM303AGR_X_Get_Axes_Raw</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Axes_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM303AGR_X_Get_Axes_Raw &rArr; LSM303AGR_ACC_R_HiRes &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_HiRes
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Raw_Acceleration
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_LOWPWR_EN
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_AxesRaw
</UL>

<P><STRONG><a name="[10f]"></a>LSM303AGR_X_Get_Axes_Status</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM303AGR_X_Get_Axes_Status &rArr; LSM303AGR_ACC_R_ZEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_ZEN
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_YEN
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_XEN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[113]"></a>LSM303AGR_X_Get_DRDY_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_X_Get_DRDY_Status &rArr; LSM303AGR_ACC_R_XDataAvail &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_XDataAvail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[10c]"></a>LSM303AGR_X_Get_FS</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_X_Get_FS &rArr; LSM303AGR_ACC_R_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_FullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[109]"></a>LSM303AGR_X_Get_ODR</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_X_Get_ODR &rArr; LSM303AGR_ACC_R_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_ODR
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[108]"></a>LSM303AGR_X_Get_Sensitivity</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM303AGR_X_Get_Sensitivity &rArr; LSM303AGR_X_Get_Sensitivity_Normal_Mode &rArr; LSM303AGR_ACC_R_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_HiRes
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity_Normal_Mode
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity_LP_Mode
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity_HR_Mode
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_LOWPWR_EN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5d9]"></a>LSM303AGR_X_Get_Sensitivity_HR_Mode</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Sensitivity_HR_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_X_Get_Sensitivity_HR_Mode &rArr; LSM303AGR_ACC_R_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_FullScale
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity
</UL>

<P><STRONG><a name="[5d8]"></a>LSM303AGR_X_Get_Sensitivity_LP_Mode</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Sensitivity_LP_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_X_Get_Sensitivity_LP_Mode &rArr; LSM303AGR_ACC_R_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_FullScale
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity
</UL>

<P><STRONG><a name="[5d7]"></a>LSM303AGR_X_Get_Sensitivity_Normal_Mode</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Sensitivity_Normal_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_X_Get_Sensitivity_Normal_Mode &rArr; LSM303AGR_ACC_R_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_FullScale
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity
</UL>

<P><STRONG><a name="[104]"></a>LSM303AGR_X_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_X_Get_WhoAmI &rArr; LSM303AGR_ACC_R_WHO_AM_I &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_WHO_AM_I
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[100]"></a>LSM303AGR_X_Init</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LSM303AGR_X_Init &rArr; LSM303AGR_X_Set_Axes_Status &rArr; LSM303AGR_ACC_W_ZEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_FS
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_Axes_Status
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Check_WhoAmI
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FifoMode
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_BlockDataUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[111]"></a>LSM303AGR_X_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_X_Read_Reg &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[103]"></a>LSM303AGR_X_Sensor_Disable</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM303AGR_X_Sensor_Disable &rArr; LSM303AGR_X_Get_ODR &rArr; LSM303AGR_ACC_R_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_ODR
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[102]"></a>LSM303AGR_X_Sensor_Enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM303AGR_X_Sensor_Enable &rArr; LSM303AGR_X_Set_ODR_Value_When_Enabled &rArr; LSM303AGR_ACC_W_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[110]"></a>LSM303AGR_X_Set_Axes_Status</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM303AGR_X_Set_Axes_Status &rArr; LSM303AGR_ACC_W_ZEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ZEN
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_YEN
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_XEN
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[10d]"></a>LSM303AGR_X_Set_FS</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_X_Set_FS &rArr; LSM303AGR_ACC_W_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FullScale
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[10e]"></a>LSM303AGR_X_Set_FS_Value</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_X_Set_FS_Value &rArr; LSM303AGR_ACC_W_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[10a]"></a>LSM303AGR_X_Set_ODR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM303AGR_X_Set_ODR &rArr; LSM303AGR_X_Set_ODR_When_Enabled &rArr; LSM303AGR_ACC_W_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_When_Enabled
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[10b]"></a>LSM303AGR_X_Set_ODR_Value</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM303AGR_X_Set_ODR_Value &rArr; LSM303AGR_X_Set_ODR_Value_When_Enabled &rArr; LSM303AGR_ACC_W_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_Value_When_Enabled
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_Value_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5dd]"></a>LSM303AGR_X_Set_ODR_Value_When_Disabled</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR_Value_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_Value
</UL>

<P><STRONG><a name="[5da]"></a>LSM303AGR_X_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_X_Set_ODR_Value_When_Enabled &rArr; LSM303AGR_ACC_W_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_Value
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Sensor_Enable
</UL>

<P><STRONG><a name="[5db]"></a>LSM303AGR_X_Set_ODR_When_Disabled</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR
</UL>

<P><STRONG><a name="[5dc]"></a>LSM303AGR_X_Set_ODR_When_Enabled</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_X_Set_ODR_When_Enabled &rArr; LSM303AGR_ACC_W_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR
</UL>

<P><STRONG><a name="[112]"></a>LSM303AGR_X_Write_Reg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_X_Write_Reg &rArr; LSM303AGR_ACC_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[119]"></a>LSM303AGR_M_Check_WhoAmI</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM303AGR_M_Check_WhoAmI &rArr; LSM303AGR_M_Get_WhoAmI &rArr; LSM303AGR_MAG_R_WHO_AM_I &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[115]"></a>LSM303AGR_M_DeInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM303AGR_M_DeInit &rArr; LSM303AGR_M_Check_WhoAmI &rArr; LSM303AGR_M_Get_WhoAmI &rArr; LSM303AGR_MAG_R_WHO_AM_I &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Sensor_Disable
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[11a]"></a>LSM303AGR_M_Get_Axes</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM303AGR_M_Get_Axes &rArr; LSM303AGR_M_Get_Axes_Raw &rArr; LSM303AGR_MAG_Get_Raw_Magnetic &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_Sensitivity
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[11b]"></a>LSM303AGR_M_Get_AxesRaw</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM303AGR_M_Get_AxesRaw &rArr; LSM303AGR_M_Get_Axes_Raw &rArr; LSM303AGR_MAG_Get_Raw_Magnetic &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5d5]"></a>LSM303AGR_M_Get_Axes_Raw</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_Axes_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_M_Get_Axes_Raw &rArr; LSM303AGR_MAG_Get_Raw_Magnetic &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_Get_Raw_Magnetic
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_AxesRaw
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_Axes
</UL>

<P><STRONG><a name="[125]"></a>LSM303AGR_M_Get_DRDY_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_M_Get_DRDY_Status &rArr; LSM303AGR_MAG_R_ZYXDA &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_R_ZYXDA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[120]"></a>LSM303AGR_M_Get_FS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_FS))
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[11d]"></a>LSM303AGR_M_Get_ODR</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_M_Get_ODR &rArr; LSM303AGR_MAG_R_ODR &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_R_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[11c]"></a>LSM303AGR_M_Get_Sensitivity</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_Sensitivity))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_Axes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[118]"></a>LSM303AGR_M_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_M_Get_WhoAmI &rArr; LSM303AGR_MAG_R_WHO_AM_I &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_R_WHO_AM_I
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[114]"></a>LSM303AGR_M_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM303AGR_M_Init &rArr; LSM303AGR_M_Check_WhoAmI &rArr; LSM303AGR_M_Get_WhoAmI &rArr; LSM303AGR_MAG_R_WHO_AM_I &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Set_ODR
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Set_FS
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Check_WhoAmI
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ST
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_MD
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_BDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[123]"></a>LSM303AGR_M_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_M_Read_Reg &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[117]"></a>LSM303AGR_M_Sensor_Disable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_M_Sensor_Disable &rArr; LSM303AGR_MAG_W_MD &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_MD
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[116]"></a>LSM303AGR_M_Sensor_Enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_M_Sensor_Enable &rArr; LSM303AGR_MAG_W_MD &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_MD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[121]"></a>LSM303AGR_M_Set_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Set_FS))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[122]"></a>LSM303AGR_M_Set_FS_Value</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Set_FS_Value))
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[11e]"></a>LSM303AGR_M_Set_ODR</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_M_Set_ODR &rArr; LSM303AGR_MAG_W_ODR &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ODR
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[11f]"></a>LSM303AGR_M_Set_ODR_Value</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_M_Set_ODR_Value &rArr; LSM303AGR_MAG_W_ODR &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[124]"></a>LSM303AGR_M_Write_Reg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_M_Write_Reg &rArr; LSM303AGR_MAG_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6cb]"></a>LSM6DSL_Check_WhoAmI</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_Check_WhoAmI &rArr; LSM6DSL_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Check_WhoAmI
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_DeInit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Check_WhoAmI
</UL>

<P><STRONG><a name="[15c]"></a>LSM6DSL_FIFO_G_Get_Axis</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_G_Get_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LSM6DSL_FIFO_G_Get_Axis &rArr; LSM6DSL_FIFO_Get_Data &rArr; LSM6DSL_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Sensitivity
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[15b]"></a>LSM6DSL_FIFO_G_Set_Decimation</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_G_Set_Decimation))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_FIFO_G_Set_Decimation &rArr; LSM6DSL_ACC_GYRO_W_DEC_FIFO_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DEC_FIFO_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[151]"></a>LSM6DSL_FIFO_Get_Data</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DSL_FIFO_Get_Data &rArr; LSM6DSL_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_Get_GetFIFOData
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_X_Get_Axis
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_G_Get_Axis
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[14e]"></a>LSM6DSL_FIFO_Get_Empty_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Empty_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_FIFO_Get_Empty_Status &rArr; LSM6DSL_ACC_GYRO_R_FIFOEmpty &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFOEmpty
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[14d]"></a>LSM6DSL_FIFO_Get_Full_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Full_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_FIFO_Get_Full_Status &rArr; LSM6DSL_ACC_GYRO_R_FIFOFull &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFOFull
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[152]"></a>LSM6DSL_FIFO_Get_Num_Of_Samples</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Num_Of_Samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_FIFO_Get_Num_Of_Samples &rArr; LSM6DSL_ACC_GYRO_R_FIFONumOfEntries &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFONumOfEntries
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[14f]"></a>LSM6DSL_FIFO_Get_Overrun_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Overrun_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_FIFO_Get_Overrun_Status &rArr; LSM6DSL_ACC_GYRO_R_OVERRUN &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_OVERRUN
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[150]"></a>LSM6DSL_FIFO_Get_Pattern</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Pattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_FIFO_Get_Pattern &rArr; LSM6DSL_ACC_GYRO_R_FIFOPattern &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFOPattern
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[156]"></a>LSM6DSL_FIFO_Set_INT1_FIFO_Full</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_INT1_FIFO_Full))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_FIFO_Set_INT1_FIFO_Full &rArr; LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[155]"></a>LSM6DSL_FIFO_Set_Mode</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_FIFO_Set_Mode &rArr; LSM6DSL_ACC_GYRO_W_FIFO_MODE &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_MODE
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[14c]"></a>LSM6DSL_FIFO_Set_ODR_Value</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_FIFO_Set_ODR_Value &rArr; LSM6DSL_ACC_GYRO_W_ODR_FIFO &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_FIFO
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[158]"></a>LSM6DSL_FIFO_Set_Stop_On_Fth</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_Stop_On_Fth))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_FIFO_Set_Stop_On_Fth &rArr; LSM6DSL_ACC_GYRO_W_STOP_ON_FTH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STOP_ON_FTH
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[157]"></a>LSM6DSL_FIFO_Set_Watermark_Level</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_Watermark_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_FIFO_Set_Watermark_Level &rArr; LSM6DSL_ACC_GYRO_W_FIFO_Watermark &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_Watermark
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[154]"></a>LSM6DSL_FIFO_X_Get_Axis</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_X_Get_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LSM6DSL_FIFO_X_Get_Axis &rArr; LSM6DSL_FIFO_Get_Data &rArr; LSM6DSL_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Sensitivity
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[153]"></a>LSM6DSL_FIFO_X_Set_Decimation</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_X_Set_Decimation))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_FIFO_X_Set_Decimation &rArr; LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[176]"></a>LSM6DSL_G_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_G_Check_WhoAmI &rArr; LSM6DSL_Check_WhoAmI &rArr; LSM6DSL_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[172]"></a>LSM6DSL_G_DeInit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DSL_G_DeInit &rArr; LSM6DSL_G_Sensor_Disable &rArr; LSM6DSL_G_Get_ODR &rArr; LSM6DSL_ACC_GYRO_R_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Sensor_Disable
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[177]"></a>LSM6DSL_G_Get_Axes</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = LSM6DSL_G_Get_Axes &rArr; LSM6DSL_G_Get_Axes_Raw &rArr; LSM6DSL_ACC_GYRO_GetRawGyroData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Sensitivity
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[178]"></a>LSM6DSL_G_Get_AxesRaw</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LSM6DSL_G_Get_AxesRaw &rArr; LSM6DSL_G_Get_Axes_Raw &rArr; LSM6DSL_ACC_GYRO_GetRawGyroData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6cd]"></a>LSM6DSL_G_Get_Axes_Raw</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_Axes_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DSL_G_Get_Axes_Raw &rArr; LSM6DSL_ACC_GYRO_GetRawGyroData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_GetRawGyroData
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_AxesRaw
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Axes
</UL>

<P><STRONG><a name="[182]"></a>LSM6DSL_G_Get_DRDY_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_G_Get_DRDY_Status &rArr; LSM6DSL_ACC_GYRO_R_GDA &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_GDA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[17d]"></a>LSM6DSL_G_Get_FS</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_G_Get_FS &rArr; LSM6DSL_ACC_GYRO_R_FS_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_G
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_125
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[17a]"></a>LSM6DSL_G_Get_ODR</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_G_Get_ODR &rArr; LSM6DSL_ACC_GYRO_R_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_ODR_G
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[179]"></a>LSM6DSL_G_Get_Sensitivity</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_G_Get_Sensitivity &rArr; LSM6DSL_ACC_GYRO_R_FS_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_G
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_125
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Axes
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_G_Get_Axis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[175]"></a>LSM6DSL_G_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_G_Get_WhoAmI &rArr; LSM6DSL_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[171]"></a>LSM6DSL_G_Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DSL_G_Init &rArr; LSM6DSL_Check_WhoAmI &rArr; LSM6DSL_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_FS
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_IF_Addr_Incr
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[180]"></a>LSM6DSL_G_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_G_Read_Reg &rArr; LSM6DSL_Read_Reg &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[174]"></a>LSM6DSL_G_Sensor_Disable</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_G_Sensor_Disable &rArr; LSM6DSL_G_Get_ODR &rArr; LSM6DSL_ACC_GYRO_R_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_ODR
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[173]"></a>LSM6DSL_G_Sensor_Enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_G_Sensor_Enable &rArr; LSM6DSL_G_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[17e]"></a>LSM6DSL_G_Set_FS</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_G_Set_FS &rArr; LSM6DSL_ACC_GYRO_W_FS_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_G
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[17f]"></a>LSM6DSL_G_Set_FS_Value</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_G_Set_FS_Value &rArr; LSM6DSL_ACC_GYRO_W_FS_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_G
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_125
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[15d]"></a>LSM6DSL_G_Set_Interrupt_Latch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_Interrupt_Latch))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_G_Set_Interrupt_Latch &rArr; LSM6DSL_Set_Interrupt_Latch &rArr; LSM6DSL_ACC_GYRO_W_LIR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Set_Interrupt_Latch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[17b]"></a>LSM6DSL_G_Set_ODR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_G_Set_ODR &rArr; LSM6DSL_G_Set_ODR_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_When_Enabled
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[17c]"></a>LSM6DSL_G_Set_ODR_Value</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_G_Set_ODR_Value &rArr; LSM6DSL_G_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_Value_When_Enabled
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_Value_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6d3]"></a>LSM6DSL_G_Set_ODR_Value_When_Disabled</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR_Value_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_Value
</UL>

<P><STRONG><a name="[6cf]"></a>LSM6DSL_G_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_G_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_Value
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Sensor_Enable
</UL>

<P><STRONG><a name="[6d1]"></a>LSM6DSL_G_Set_ODR_When_Disabled</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR
</UL>

<P><STRONG><a name="[6d2]"></a>LSM6DSL_G_Set_ODR_When_Enabled</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_G_Set_ODR_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR
</UL>

<P><STRONG><a name="[15e]"></a>LSM6DSL_G_Set_SelfTest</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_SelfTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_G_Set_SelfTest &rArr; LSM6DSL_ACC_GYRO_W_SelfTest_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SelfTest_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[181]"></a>LSM6DSL_G_Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_G_Write_Reg &rArr; LSM6DSL_Write_Reg &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6cc]"></a>LSM6DSL_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_WHO_AM_I
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_WhoAmI
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_WhoAmI
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
</UL>

<P><STRONG><a name="[6ce]"></a>LSM6DSL_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_Read_Reg &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Read_Reg
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Read_Reg
</UL>

<P><STRONG><a name="[6d0]"></a>LSM6DSL_Set_Interrupt_Latch</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_Set_Interrupt_Latch))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_Set_Interrupt_Latch &rArr; LSM6DSL_ACC_GYRO_W_LIR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_LIR
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Interrupt_Latch
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_Interrupt_Latch
</UL>

<P><STRONG><a name="[6d4]"></a>LSM6DSL_Write_Reg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_Write_Reg &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Write_Reg
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Write_Reg
</UL>

<P><STRONG><a name="[164]"></a>LSM6DSL_X_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_X_Check_WhoAmI &rArr; LSM6DSL_Check_WhoAmI &rArr; LSM6DSL_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[160]"></a>LSM6DSL_X_DeInit</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LSM6DSL_X_DeInit &rArr; LSM6DSL_X_Disable_Pedometer &rArr; LSM6DSL_X_Set_Pedometer_Threshold &rArr; LSM6DSL_ACC_GYRO_W_PedoThreshold &rArr; LSM6DSL_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Sensor_Disable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Wake_Up_Detection
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Tilt_Detection
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Pedometer
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Free_Fall_Detection
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_6D_Orientation
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[143]"></a>LSM6DSL_X_Disable_6D_Orientation</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_6D_Orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Disable_6D_Orientation &rArr; LSM6DSL_ACC_GYRO_W_BASIC_INT &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt2
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt1
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SIXD_THS
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[13c]"></a>LSM6DSL_X_Disable_Double_Tap_Detection</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Double_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_X_Disable_Double_Tap_Detection &rArr; LSM6DSL_X_Set_Tap_Threshold &rArr; LSM6DSL_ACC_GYRO_W_TAP_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Threshold
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Shock_Time
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Quiet_Time
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Duration_Time
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TapEvOnInt2
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[127]"></a>LSM6DSL_X_Disable_Free_Fall_Detection</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Free_Fall_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_X_Disable_Free_Fall_Detection &rArr; LSM6DSL_ACC_GYRO_W_FF_Duration &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_THS
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_Duration
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt2
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt1
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[12b]"></a>LSM6DSL_X_Disable_Pedometer</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DSL_X_Disable_Pedometer &rArr; LSM6DSL_X_Set_Pedometer_Threshold &rArr; LSM6DSL_ACC_GYRO_W_PedoThreshold &rArr; LSM6DSL_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Pedometer_Threshold
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PEDO
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[139]"></a>LSM6DSL_X_Disable_Single_Tap_Detection</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Single_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_X_Disable_Single_Tap_Detection &rArr; LSM6DSL_X_Set_Tap_Threshold &rArr; LSM6DSL_ACC_GYRO_W_TAP_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Threshold
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Shock_Time
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Quiet_Time
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SingleTapOnInt2
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SingleTapOnInt1
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[12f]"></a>LSM6DSL_X_Disable_Step_Counter_Reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Step_Counter_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Disable_Step_Counter_Reset &rArr; LSM6DSL_ACC_GYRO_W_PedoStepReset &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoStepReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[132]"></a>LSM6DSL_X_Disable_Tilt_Detection</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Tilt_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Disable_Tilt_Detection &rArr; LSM6DSL_ACC_GYRO_W_TiltEvOnInt2 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt2
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TILT
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[135]"></a>LSM6DSL_X_Disable_Wake_Up_Detection</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Wake_Up_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Disable_Wake_Up_Detection &rArr; LSM6DSL_ACC_GYRO_W_BASIC_INT &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt2
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WK_THS
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WAKE_DUR
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[142]"></a>LSM6DSL_X_Enable_6D_Orientation</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_6D_Orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DSL_X_Enable_6D_Orientation &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt2
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt1
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SIXD_THS
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[13b]"></a>LSM6DSL_X_Enable_Double_Tap_Detection</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Double_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DSL_X_Enable_Double_Tap_Detection &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Threshold
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Shock_Time
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Quiet_Time
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Duration_Time
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TapEvOnInt2
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[126]"></a>LSM6DSL_X_Enable_Free_Fall_Detection</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Free_Fall_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DSL_X_Enable_Free_Fall_Detection &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TIMER_HR
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SLEEP_DUR
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_THS
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_Duration
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt2
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[12a]"></a>LSM6DSL_X_Enable_Pedometer</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DSL_X_Enable_Pedometer &rArr; LSM6DSL_X_Set_Pedometer_Threshold &rArr; LSM6DSL_ACC_GYRO_W_PedoThreshold &rArr; LSM6DSL_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Pedometer_Threshold
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PEDO
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[138]"></a>LSM6DSL_X_Enable_Single_Tap_Detection</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Single_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DSL_X_Enable_Single_Tap_Detection &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Threshold
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Shock_Time
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Quiet_Time
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SingleTapOnInt2
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SingleTapOnInt1
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[12e]"></a>LSM6DSL_X_Enable_Step_Counter_Reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Step_Counter_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Enable_Step_Counter_Reset &rArr; LSM6DSL_ACC_GYRO_W_PedoStepReset &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoStepReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[131]"></a>LSM6DSL_X_Enable_Tilt_Detection</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Tilt_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DSL_X_Enable_Tilt_Detection &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt2
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TILT
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[134]"></a>LSM6DSL_X_Enable_Wake_Up_Detection</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Wake_Up_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DSL_X_Enable_Wake_Up_Detection &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt2
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WK_THS
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[144]"></a>LSM6DSL_X_Get_6D_Orientation_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_Status &rArr; LSM6DSL_ACC_GYRO_R_D6D_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_D6D_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[146]"></a>LSM6DSL_X_Get_6D_Orientation_XH</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_XH))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_XH &rArr; LSM6DSL_ACC_GYRO_R_DSD_XH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_XH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[145]"></a>LSM6DSL_X_Get_6D_Orientation_XL</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_XL &rArr; LSM6DSL_ACC_GYRO_R_DSD_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[148]"></a>LSM6DSL_X_Get_6D_Orientation_YH</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_YH))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_YH &rArr; LSM6DSL_ACC_GYRO_R_DSD_YH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_YH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[147]"></a>LSM6DSL_X_Get_6D_Orientation_YL</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_YL))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_YL &rArr; LSM6DSL_ACC_GYRO_R_DSD_YL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_YL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[14a]"></a>LSM6DSL_X_Get_6D_Orientation_ZH</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_ZH))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_ZH &rArr; LSM6DSL_ACC_GYRO_R_DSD_ZH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_ZH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[149]"></a>LSM6DSL_X_Get_6D_Orientation_ZL</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_ZL))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_ZL &rArr; LSM6DSL_ACC_GYRO_R_DSD_ZL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_ZL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[165]"></a>LSM6DSL_X_Get_Axes</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = LSM6DSL_X_Get_Axes &rArr; LSM6DSL_X_Get_Axes_Raw &rArr; LSM6DSL_ACC_GYRO_GetRawAccData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Sensitivity
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[166]"></a>LSM6DSL_X_Get_AxesRaw</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LSM6DSL_X_Get_AxesRaw &rArr; LSM6DSL_X_Get_Axes_Raw &rArr; LSM6DSL_ACC_GYRO_GetRawAccData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6d5]"></a>LSM6DSL_X_Get_Axes_Raw</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Axes_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DSL_X_Get_Axes_Raw &rArr; LSM6DSL_ACC_GYRO_GetRawAccData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_GetRawAccData
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_AxesRaw
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Axes
</UL>

<P><STRONG><a name="[170]"></a>LSM6DSL_X_Get_DRDY_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Get_DRDY_Status &rArr; LSM6DSL_ACC_GYRO_R_XLDA &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_XLDA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[13d]"></a>LSM6DSL_X_Get_Double_Tap_Detection_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Double_Tap_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Get_Double_Tap_Detection_Status &rArr; LSM6DSL_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[14b]"></a>LSM6DSL_X_Get_Event_Status</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Event_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LSM6DSL_X_Get_Event_Status &rArr; LSM6DSL_X_Read_Reg &rArr; LSM6DSL_Read_Reg &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[16b]"></a>LSM6DSL_X_Get_FS</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Get_FS &rArr; LSM6DSL_ACC_GYRO_R_FS_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[128]"></a>LSM6DSL_X_Get_Free_Fall_Detection_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Free_Fall_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Get_Free_Fall_Detection_Status &rArr; LSM6DSL_ACC_GYRO_R_FF_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FF_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[168]"></a>LSM6DSL_X_Get_ODR</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Get_ODR &rArr; LSM6DSL_ACC_GYRO_R_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_ODR_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[12c]"></a>LSM6DSL_X_Get_Pedometer_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Pedometer_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Get_Pedometer_Status &rArr; LSM6DSL_ACC_GYRO_R_PEDO_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_PEDO_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[167]"></a>LSM6DSL_X_Get_Sensitivity</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Get_Sensitivity &rArr; LSM6DSL_ACC_GYRO_R_FS_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Axes
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_X_Get_Axis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[13a]"></a>LSM6DSL_X_Get_Single_Tap_Detection_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Single_Tap_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Get_Single_Tap_Detection_Status &rArr; LSM6DSL_ACC_GYRO_R_SINGLE_TAP_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_SINGLE_TAP_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[12d]"></a>LSM6DSL_X_Get_Step_Count</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Step_Count))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DSL_X_Get_Step_Count &rArr; LSM6DSL_ACC_GYRO_Get_GetStepCounter &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_Get_GetStepCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[133]"></a>LSM6DSL_X_Get_Tilt_Detection_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Tilt_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Get_Tilt_Detection_Status &rArr; LSM6DSL_ACC_GYRO_R_TILT_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_TILT_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[136]"></a>LSM6DSL_X_Get_Wake_Up_Detection_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Wake_Up_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Get_Wake_Up_Detection_Status &rArr; LSM6DSL_ACC_GYRO_R_WU_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_WU_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[163]"></a>LSM6DSL_X_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Get_WhoAmI &rArr; LSM6DSL_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[15f]"></a>LSM6DSL_X_Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DSL_X_Init &rArr; LSM6DSL_Check_WhoAmI &rArr; LSM6DSL_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_FS
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_IF_Addr_Incr
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[16e]"></a>LSM6DSL_X_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Read_Reg &rArr; LSM6DSL_Read_Reg &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Event_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[162]"></a>LSM6DSL_X_Sensor_Disable</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_X_Sensor_Disable &rArr; LSM6DSL_X_Get_ODR &rArr; LSM6DSL_ACC_GYRO_R_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_ODR
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[161]"></a>LSM6DSL_X_Sensor_Enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_X_Sensor_Enable &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[16c]"></a>LSM6DSL_X_Set_FS</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Set_FS &rArr; LSM6DSL_ACC_GYRO_W_FS_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[16d]"></a>LSM6DSL_X_Set_FS_Value</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Set_FS_Value &rArr; LSM6DSL_ACC_GYRO_W_FS_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[129]"></a>LSM6DSL_X_Set_Free_Fall_Threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Free_Fall_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Set_Free_Fall_Threshold &rArr; LSM6DSL_ACC_GYRO_W_FF_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_THS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[159]"></a>LSM6DSL_X_Set_Interrupt_Latch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Interrupt_Latch))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Set_Interrupt_Latch &rArr; LSM6DSL_Set_Interrupt_Latch &rArr; LSM6DSL_ACC_GYRO_W_LIR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Set_Interrupt_Latch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[169]"></a>LSM6DSL_X_Set_ODR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_X_Set_ODR &rArr; LSM6DSL_X_Set_ODR_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_When_Enabled
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[16a]"></a>LSM6DSL_X_Set_ODR_Value</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value_When_Enabled
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value_When_Disabled
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Tilt_Detection
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Pedometer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_6D_Orientation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6d9]"></a>LSM6DSL_X_Set_ODR_Value_When_Disabled</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR_Value_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
</UL>

<P><STRONG><a name="[6d6]"></a>LSM6DSL_X_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Sensor_Enable
</UL>

<P><STRONG><a name="[6d7]"></a>LSM6DSL_X_Set_ODR_When_Disabled</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR
</UL>

<P><STRONG><a name="[6d8]"></a>LSM6DSL_X_Set_ODR_When_Enabled</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Set_ODR_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR
</UL>

<P><STRONG><a name="[130]"></a>LSM6DSL_X_Set_Pedometer_Threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Pedometer_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DSL_X_Set_Pedometer_Threshold &rArr; LSM6DSL_ACC_GYRO_W_PedoThreshold &rArr; LSM6DSL_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Pedometer
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Pedometer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[15a]"></a>LSM6DSL_X_Set_SelfTest</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_SelfTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Set_SelfTest &rArr; LSM6DSL_ACC_GYRO_W_SelfTest_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SelfTest_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[141]"></a>LSM6DSL_X_Set_Tap_Duration_Time</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Duration_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Set_Tap_Duration_Time &rArr; LSM6DSL_ACC_GYRO_W_DUR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DUR
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[140]"></a>LSM6DSL_X_Set_Tap_Quiet_Time</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Quiet_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Set_Tap_Quiet_Time &rArr; LSM6DSL_ACC_GYRO_W_QUIET_Duration &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_QUIET_Duration
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[13f]"></a>LSM6DSL_X_Set_Tap_Shock_Time</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Shock_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Set_Tap_Shock_Time &rArr; LSM6DSL_ACC_GYRO_W_SHOCK_Duration &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SHOCK_Duration
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[13e]"></a>LSM6DSL_X_Set_Tap_Threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Set_Tap_Threshold &rArr; LSM6DSL_ACC_GYRO_W_TAP_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_THS
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[137]"></a>LSM6DSL_X_Set_Wake_Up_Threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Wake_Up_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Set_Wake_Up_Threshold &rArr; LSM6DSL_ACC_GYRO_W_WK_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WK_THS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[16f]"></a>LSM6DSL_X_Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Write_Reg &rArr; LSM6DSL_Write_Reg &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6df]"></a>M24SR_BuildIBlockCommand</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, m24sr.o(i.M24SR_BuildIBlockCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = M24SR_BuildIBlockCommand &rArr; M24SR_ComputeCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ComputeCrc
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectNDEFfile
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectCCfile
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
</UL>

<P><STRONG><a name="[6e0]"></a>M24SR_ComputeCrc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, m24sr.o(i.M24SR_ComputeCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M24SR_ComputeCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsCorrectCRC16Residue
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
</UL>

<P><STRONG><a name="[6ee]"></a>M24SR_InitStructure</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, m24sr.o(i.M24SR_InitStructure))
<BR><BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Init
</UL>

<P><STRONG><a name="[6f4]"></a>M24SR_IsCorrectCRC16Residue</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, m24sr.o(i.M24SR_IsCorrectCRC16Residue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M24SR_IsCorrectCRC16Residue &rArr; M24SR_ComputeCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ComputeCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectNDEFfile
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectCCfile
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
</UL>

<P><STRONG><a name="[6e3]"></a>M24SR_UpdateCrc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, m24sr.o(i.M24SR_UpdateCrc))
<BR><BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ComputeCrc
</UL>

<P><STRONG><a name="[3a2]"></a>BSP_LIS3MDL_MAGNETO_Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, x_nucleo_iks01a1_magneto.o(i.BSP_LIS3MDL_MAGNETO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LIS3MDL_MAGNETO_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MAGNETO_Init_IKS01A1
</UL>

<P><STRONG><a name="[3a3]"></a>BSP_LPS22HB_PRESSURE_Init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, x_nucleo_iks01a1_pressure.o(i.BSP_LPS22HB_PRESSURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LPS22HB_PRESSURE_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig_IKS01A1
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Init_IKS01A1
</UL>

<P><STRONG><a name="[3a9]"></a>BSP_LPS25HB_PRESSURE_Init</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, x_nucleo_iks01a1_pressure.o(i.BSP_LPS25HB_PRESSURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_LPS25HB_PRESSURE_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Init_IKS01A1
</UL>

<P><STRONG><a name="[393]"></a>BSP_LSM6DS0_ACCELERO_Init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_LSM6DS0_ACCELERO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LSM6DS0_ACCELERO_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Sensor_IO_ITConfig
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Init_IKS01A1
</UL>

<P><STRONG><a name="[392]"></a>BSP_LSM6DS3_ACCELERO_Init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_LSM6DS3_ACCELERO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LSM6DS3_ACCELERO_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Sensor_IO_ITConfig
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Init_IKS01A1
</UL>

<P><STRONG><a name="[398]"></a>BSP_LSM6DS0_GYRO_Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, x_nucleo_iks01a1_gyro.o(i.BSP_LSM6DS0_GYRO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LSM6DS0_GYRO_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_Init_IKS01A1
</UL>

<P><STRONG><a name="[397]"></a>BSP_LSM6DS3_GYRO_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, x_nucleo_iks01a1_gyro.o(i.BSP_LSM6DS3_GYRO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LSM6DS3_GYRO_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Sensor_IO_ITConfig
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_Init_IKS01A1
</UL>

<P><STRONG><a name="[39a]"></a>BSP_HTS221_HUMIDITY_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, x_nucleo_iks01a1_humidity.o(i.BSP_HTS221_HUMIDITY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_HTS221_HUMIDITY_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_Init_IKS01A1
</UL>

<P><STRONG><a name="[39e]"></a>BSP_HTS221_TEMPERATURE_Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, x_nucleo_iks01a1_temperature.o(i.BSP_HTS221_TEMPERATURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_HTS221_TEMPERATURE_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Init_IKS01A1
</UL>

<P><STRONG><a name="[3a7]"></a>BSP_LPS22HB_TEMPERATURE_Init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, x_nucleo_iks01a1_temperature.o(i.BSP_LPS22HB_TEMPERATURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LPS22HB_TEMPERATURE_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig_IKS01A1
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Init_IKS01A1
</UL>

<P><STRONG><a name="[3aa]"></a>BSP_LPS25HB_TEMPERATURE_Init</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, x_nucleo_iks01a1_temperature.o(i.BSP_LPS25HB_TEMPERATURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_LPS25HB_TEMPERATURE_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Init_IKS01A1
</UL>

<P><STRONG><a name="[4fd]"></a>I2C_EXPBD_ReadData</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, x_nucleo_iks01a2.o(i.I2C_EXPBD_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = I2C_EXPBD_ReadData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Error
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>

<P><STRONG><a name="[4ff]"></a>I2C_EXPBD_WriteData</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, x_nucleo_iks01a2.o(i.I2C_EXPBD_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = I2C_EXPBD_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Error
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>

<P><STRONG><a name="[396]"></a>BSP_LSM303AGR_ACCELERO_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_LSM303AGR_ACCELERO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LSM303AGR_ACCELERO_Init &rArr; Sensor_IO_Init_IKS01A2 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A2
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Init_IKS01A2
</UL>

<P><STRONG><a name="[395]"></a>BSP_LSM6DSL_ACCELERO_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_LSM6DSL_ACCELERO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_LSM6DSL_ACCELERO_Init &rArr; LSM6DSL_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A2
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Sensor_IO_ITConfig
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Init_IKS01A2
</UL>

<P><STRONG><a name="[399]"></a>BSP_LSM6DSL_GYRO_Init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, x_nucleo_iks01a2_gyro.o(i.BSP_LSM6DSL_GYRO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_LSM6DSL_GYRO_Init &rArr; LSM6DSL_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A2
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Sensor_IO_ITConfig
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_Init_IKS01A2
</UL>

<P><STRONG><a name="[39c]"></a>BSP_HTS221_HUMIDITY_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, x_nucleo_iks01a2_humidity.o(i.BSP_HTS221_HUMIDITY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_HTS221_HUMIDITY_Init &rArr; Sensor_IO_Init_IKS01A2 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A2
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_Init_IKS01A2
</UL>

<P><STRONG><a name="[3ab]"></a>BSP_LSM303AGR_MAGNETO_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, x_nucleo_iks01a2_magneto.o(i.BSP_LSM303AGR_MAGNETO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LSM303AGR_MAGNETO_Init &rArr; Sensor_IO_Init_IKS01A2 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A2
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MAGNETO_Init_IKS01A2
</UL>

<P><STRONG><a name="[3a5]"></a>BSP_LPS22HB_PRESSURE_Init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, x_nucleo_iks01a2_pressure.o(i.BSP_LPS22HB_PRESSURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LPS22HB_PRESSURE_Init &rArr; Sensor_IO_Init_IKS01A2 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A2
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig_IKS01A2
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Init_IKS01A2
</UL>

<P><STRONG><a name="[39f]"></a>BSP_HTS221_TEMPERATURE_Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_HTS221_TEMPERATURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_HTS221_TEMPERATURE_Init &rArr; Sensor_IO_Init_IKS01A2 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A2
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Init_IKS01A2
</UL>

<P><STRONG><a name="[3a8]"></a>BSP_LPS22HB_TEMPERATURE_Init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_LPS22HB_TEMPERATURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LPS22HB_TEMPERATURE_Init &rArr; Sensor_IO_Init_IKS01A2 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A2
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig_IKS01A2
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Init_IKS01A2
</UL>

<P><STRONG><a name="[509]"></a>PrintOut_MDM_GMDStatus</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, metadatamanager.o(i.PrintOut_MDM_GMDStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PrintOut_MDM_GMDStatus &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMetaDataManager
</UL>

<P><STRONG><a name="[508]"></a>PrintOut_MDM_LicenseStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, metadatamanager.o(i.PrintOut_MDM_LicenseStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PrintOut_MDM_LicenseStatus &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMetaDataManager
</UL>

<P><STRONG><a name="[505]"></a>ReCallMetaDataManager</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, metadatamanager.o(i.ReCallMetaDataManager))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ReCallMetaDataManager &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMetaDataManager
</UL>

<P><STRONG><a name="[4b5]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[49a]"></a>FLASH_Program_Byte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[499]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[49b]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[49c]"></a>FLASH_Program_Word</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Word))
<BR><BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[48a]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[495]"></a>FLASH_MassErase</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[503]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[4a6]"></a>I2C_MasterRequestRead</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.I2C_MasterRequestRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[4a9]"></a>I2C_MasterRequestWrite</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_MasterRequestWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[4ad]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[4af]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[4ab]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[4a4]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestRead
</UL>

<P><STRONG><a name="[502]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestRead
</UL>

<P><STRONG><a name="[4a7]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[4aa]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[4d1]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[4d3]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[4d4]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[4dd]"></a>UART_SetConfig</STRONG> (Thumb, 780 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[4e0]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>

<P><STRONG><a name="[70a]"></a>NDEF_IdentifySPRecord</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, lib_ndef.o(i.NDEF_IdentifySPRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = NDEF_IdentifySPRecord &rArr;  NDEF_ParseRecordHeader (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseRecordHeader
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseSP
</UL>

<P><STRONG><a name="[708]"></a>NDEF_IsNDEFPresent</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lib_ndef.o(i.NDEF_IsNDEFPresent))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = NDEF_IsNDEFPresent &rArr; M24SR_ReadData &rArr; M24SR_ReadBinary &rArr; M24SR_ReceiveI2Cresponse &rArr; HAL_I2C_Master_Receive &rArr; I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IdentifyNDEF
</UL>

<P><STRONG><a name="[70b]"></a>NDEF_ParseForumExternalType</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lib_ndef.o(i.NDEF_ParseForumExternalType))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NDEF_ParseForumExternalType &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseRecordHeader
</UL>

<P><STRONG><a name="[70c]"></a>NDEF_ParseMediaType</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lib_ndef.o(i.NDEF_ParseMediaType))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NDEF_ParseMediaType &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseRecordHeader
</UL>

<P><STRONG><a name="[709]"></a>NDEF_ParseRecordHeader</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lib_ndef.o(i.NDEF_ParseRecordHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = NDEF_ParseRecordHeader &rArr; NDEF_ParseWellKnownType &rArr; NDEF_ParseSP &rArr; NDEF_IdentifySPRecord &rArr;  NDEF_ParseRecordHeader (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseWellKnownType
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseMediaType
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseForumExternalType
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IdentifyNDEF
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IdentifySPRecord
</UL>

<P><STRONG><a name="[70e]"></a>NDEF_ParseSP</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, lib_ndef.o(i.NDEF_ParseSP))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NDEF_ParseSP &rArr; NDEF_IdentifySPRecord &rArr;  NDEF_ParseRecordHeader (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_IdentifySPRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseWellKnownType
</UL>

<P><STRONG><a name="[70f]"></a>NDEF_ParseURI</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lib_ndef.o(i.NDEF_ParseURI))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NDEF_ParseURI &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseWellKnownType
</UL>

<P><STRONG><a name="[70d]"></a>NDEF_ParseWellKnownType</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lib_ndef.o(i.NDEF_ParseWellKnownType))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = NDEF_ParseWellKnownType &rArr; NDEF_ParseSP &rArr; NDEF_IdentifySPRecord &rArr;  NDEF_ParseRecordHeader (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseURI
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseSP
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ParseRecordHeader
</UL>

<P><STRONG><a name="[83c]"></a>mbedtls_zeroize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aes.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>

<P><STRONG><a name="[83f]"></a>mbedtls_zeroize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, asn1parse.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>

<P><STRONG><a name="[8a3]"></a>mbedtls_clz</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_clz))
<BR><BR>[Called By]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>

<P><STRONG><a name="[89e]"></a>mbedtls_int_div_int</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_int_div_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_int_div_int &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[8a9]"></a>mbedtls_mpi_zeroize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_mpi_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>

<P><STRONG><a name="[8a6]"></a>mpi_montg_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bignum.o(i.mpi_montg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mpi_montg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[8a7]"></a>mpi_montmul</STRONG> (Thumb, 202 bytes, Stack size 64 bytes, bignum.o(i.mpi_montmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mpi_montmul &rArr; mpi_sub_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
</UL>

<P><STRONG><a name="[8a8]"></a>mpi_montred</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, bignum.o(i.mpi_montred))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mpi_montred &rArr; mpi_montmul &rArr; mpi_sub_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>
<BR>[Called By]<UL><LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[8ac]"></a>mpi_mul_hlp</STRONG> (Thumb, 1008 bytes, Stack size 16 bytes, bignum.o(i.mpi_mul_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[8ad]"></a>mpi_sub_hlp</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, bignum.o(i.mpi_sub_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[261]"></a>add_one_and_zeros_padding</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, cipher.o(i.add_one_and_zeros_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = add_one_and_zeros_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[25f]"></a>add_pkcs_padding</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, cipher.o(i.add_pkcs_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = add_pkcs_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[263]"></a>add_zeros_and_len_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cipher.o(i.add_zeros_and_len_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_zeros_and_len_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[265]"></a>add_zeros_padding</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cipher.o(i.add_zeros_padding))
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[267]"></a>get_no_padding</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cipher.o(i.get_no_padding))
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[262]"></a>get_one_and_zeros_padding</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, cipher.o(i.get_one_and_zeros_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_one_and_zeros_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[260]"></a>get_pkcs_padding</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, cipher.o(i.get_pkcs_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_pkcs_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[264]"></a>get_zeros_and_len_padding</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cipher.o(i.get_zeros_and_len_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_zeros_and_len_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[266]"></a>get_zeros_padding</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cipher.o(i.get_zeros_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_zeros_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[851]"></a>mbedtls_cipher_get_block_size</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_get_block_size))
<BR><BR>[Called By]<UL><LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
</UL>

<P><STRONG><a name="[853]"></a>mbedtls_zeroize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
</UL>

<P><STRONG><a name="[2bd]"></a>aes_crypt_cbc_wrap</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, cipher_wrap.o(i.aes_crypt_cbc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = aes_crypt_cbc_wrap &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2bc]"></a>aes_crypt_ecb_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(i.aes_crypt_ecb_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = aes_crypt_ecb_wrap &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2c0]"></a>aes_ctx_alloc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cipher_wrap.o(i.aes_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aes_ctx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2c1]"></a>aes_ctx_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cipher_wrap.o(i.aes_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aes_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2bf]"></a>aes_setkey_dec_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(i.aes_setkey_dec_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = aes_setkey_dec_wrap &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2be]"></a>aes_setkey_enc_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(i.aes_setkey_enc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = aes_setkey_enc_wrap &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2c2]"></a>gcm_aes_setkey_wrap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cipher_wrap.o(i.gcm_aes_setkey_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = gcm_aes_setkey_wrap &rArr; mbedtls_gcm_setkey &rArr; gcm_gen_table &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2c3]"></a>gcm_ctx_alloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cipher_wrap.o(i.gcm_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gcm_ctx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2c4]"></a>gcm_ctx_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cipher_wrap.o(i.gcm_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gcm_ctx_free &rArr; mbedtls_gcm_free &rArr; mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[79e]"></a>block_cipher_df</STRONG> (Thumb, 290 bytes, Stack size 832 bytes, ctr_drbg.o(i.block_cipher_df))
<BR><BR>[Stack]<UL><LI>Max Depth = 884<LI>Call Chain = block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>

<P><STRONG><a name="[7b2]"></a>ctr_drbg_update_internal</STRONG> (Thumb, 124 bytes, Stack size 88 bytes, ctr_drbg.o(i.ctr_drbg_update_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ctr_drbg_update_internal &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>

<P><STRONG><a name="[85c]"></a>mbedtls_zeroize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ctr_drbg.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
</UL>

<P><STRONG><a name="[7b3]"></a>debug_print_line_by_line</STRONG> (Thumb, 86 bytes, Stack size 544 bytes, debug.o(i.debug_print_line_by_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = debug_print_line_by_line &rArr; debug_send_line
</UL>
<BR>[Calls]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
</UL>

<P><STRONG><a name="[7b5]"></a>debug_print_pk</STRONG> (Thumb, 176 bytes, Stack size 112 bytes, debug.o(i.debug_print_pk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = debug_print_pk &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_debug
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_line
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
</UL>

<P><STRONG><a name="[7b4]"></a>debug_send_line</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, debug.o(i.debug_send_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = debug_send_line
</UL>
<BR>[Called By]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_crt
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_pk
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print_line_by_line
</UL>

<P><STRONG><a name="[7c2]"></a>ecp_add_mixed</STRONG> (Thumb, 886 bytes, Stack size 112 bytes, ecp.o(i.ecp_add_mixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ecp_add_mixed &rArr; ecp_double_jac &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
</UL>

<P><STRONG><a name="[7d1]"></a>ecp_check_pubkey_sw</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, ecp.o(i.ecp_check_pubkey_sw))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>

<P><STRONG><a name="[7d3]"></a>ecp_comb_fixed</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ecp.o(i.ecp_comb_fixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ecp_comb_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[7cb]"></a>ecp_double_jac</STRONG> (Thumb, 1022 bytes, Stack size 80 bytes, ecp.o(i.ecp_double_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ecp_double_jac &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[879]"></a>ecp_get_type</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ecp.o(i.ecp_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>

<P><STRONG><a name="[7c7]"></a>ecp_modp</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ecp.o(i.ecp_modp))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[7e1]"></a>ecp_mul_comb</STRONG> (Thumb, 422 bytes, Stack size 360 bytes, ecp.o(i.ecp_mul_comb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_fixed
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</UL>

<P><STRONG><a name="[7e4]"></a>ecp_mul_comb_core</STRONG> (Thumb, 154 bytes, Stack size 96 bytes, ecp.o(i.ecp_mul_comb_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[7e6]"></a>ecp_normalize_jac</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, ecp.o(i.ecp_normalize_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[7ed]"></a>ecp_normalize_jac_many</STRONG> (Thumb, 484 bytes, Stack size 72 bytes, ecp.o(i.ecp_normalize_jac_many))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
</UL>

<P><STRONG><a name="[7e2]"></a>ecp_precompute_comb</STRONG> (Thumb, 216 bytes, Stack size 176 bytes, ecp.o(i.ecp_precompute_comb))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[7eb]"></a>ecp_randomize_jac</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, ecp.o(i.ecp_randomize_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
</UL>

<P><STRONG><a name="[7e5]"></a>ecp_safe_invert_jac</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ecp.o(i.ecp_safe_invert_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ecp_safe_invert_jac &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[7e9]"></a>ecp_select_comb</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, ecp.o(i.ecp_select_comb))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ecp_select_comb &rArr; ecp_safe_invert_jac &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
</UL>
<BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
</UL>

<P><STRONG><a name="[881]"></a>mbedtls_zeroize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ecp.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>

<P><STRONG><a name="[7dd]"></a>add32</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ecp_curves.o(i.add32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = add32
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
</UL>

<P><STRONG><a name="[7d6]"></a>ecp_group_load</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, ecp_curves.o(i.ecp_group_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ecp_group_load &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mpi_load
</UL>
<BR>[Called By]<UL><LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>

<P><STRONG><a name="[7d9]"></a>ecp_mod_koblitz</STRONG> (Thumb, 334 bytes, Stack size 104 bytes, ecp_curves.o(i.ecp_mod_koblitz))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ecp_mod_koblitz &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256k1
</UL>

<P><STRONG><a name="[268]"></a>ecp_mod_p256</STRONG> (Thumb, 1072 bytes, Stack size 80 bytes, ecp_curves.o(i.ecp_mod_p256))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ecp_mod_p256 &rArr; fix_negative &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub32
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_negative
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add32
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(i.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[26a]"></a>ecp_mod_p256k1</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ecp_curves.o(i.ecp_mod_p256k1))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ecp_mod_p256k1 &rArr; ecp_mod_koblitz &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_koblitz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(i.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[269]"></a>ecp_mod_p384</STRONG> (Thumb, 1374 bytes, Stack size 96 bytes, ecp_curves.o(i.ecp_mod_p384))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ecp_mod_p384 &rArr; fix_negative &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub32
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_negative
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add32
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(i.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[7d7]"></a>ecp_mpi_load</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ecp_curves.o(i.ecp_mpi_load))
<BR><BR>[Called By]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
</UL>

<P><STRONG><a name="[7df]"></a>fix_negative</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ecp_curves.o(i.fix_negative))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fix_negative &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
</UL>

<P><STRONG><a name="[7de]"></a>sub32</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ecp_curves.o(i.sub32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sub32
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p384
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
</UL>

<P><STRONG><a name="[7f0]"></a>entropy_gather_internal</STRONG> (Thumb, 112 bytes, Stack size 152 bytes, entropy.o(i.entropy_gather_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = entropy_gather_internal &rArr; entropy_update &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
</UL>

<P><STRONG><a name="[7f1]"></a>entropy_update</STRONG> (Thumb, 66 bytes, Stack size 88 bytes, entropy.o(i.entropy_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = entropy_update &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>
<BR>[Called By]<UL><LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
</UL>

<P><STRONG><a name="[886]"></a>mbedtls_zeroize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, entropy.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_free
</UL>

<P><STRONG><a name="[7fc]"></a>gcm_gen_table</STRONG> (Thumb, 328 bytes, Stack size 64 bytes, gcm.o(i.gcm_gen_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = gcm_gen_table &rArr; mbedtls_cipher_update &rArr; mbedtls_gcm_update &rArr;  mbedtls_cipher_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>
<BR>[Called By]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[88e]"></a>gcm_mult</STRONG> (Thumb, 258 bytes, Stack size 36 bytes, gcm.o(i.gcm_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gcm_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</UL>

<P><STRONG><a name="[88b]"></a>mbedtls_zeroize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gcm.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
</UL>

<P><STRONG><a name="[8a0]"></a>mbedtls_zeroize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, md.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>

<P><STRONG><a name="[2cb]"></a>sha1_clone_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha1_clone_wrap &rArr; mbedtls_sha1_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2c9]"></a>sha1_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_wrap.o(i.sha1_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha1_ctx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2ca]"></a>sha1_ctx_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md_wrap.o(i.sha1_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha1_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2c7]"></a>sha1_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = sha1_finish_wrap &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2cc]"></a>sha1_process_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = sha1_process_wrap &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2c5]"></a>sha1_starts_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2c6]"></a>sha1_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = sha1_update_wrap &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2d3]"></a>sha224_clone_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha224_clone_wrap &rArr; mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2d1]"></a>sha224_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_wrap.o(i.sha224_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha224_ctx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2d2]"></a>sha224_ctx_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md_wrap.o(i.sha224_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha224_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2cf]"></a>sha224_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = sha224_finish_wrap &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2d4]"></a>sha224_process_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = sha224_process_wrap &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_process
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2cd]"></a>sha224_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2ce]"></a>sha224_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = sha224_update_wrap &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2d0]"></a>sha224_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = sha224_wrap &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2d5]"></a>sha256_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha256_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2d6]"></a>sha256_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha256_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = sha256_wrap &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2dd]"></a>sha384_clone_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha384_clone_wrap &rArr; mbedtls_sha512_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2db]"></a>sha384_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_wrap.o(i.sha384_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha384_ctx_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2dc]"></a>sha384_ctx_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md_wrap.o(i.sha384_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha384_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2d9]"></a>sha384_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = sha384_finish_wrap &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2de]"></a>sha384_process_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = sha384_process_wrap &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_process
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2d7]"></a>sha384_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2d8]"></a>sha384_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = sha384_update_wrap &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2da]"></a>sha384_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha384_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = sha384_wrap &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2df]"></a>sha512_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha512_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2e0]"></a>sha512_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha512_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = sha512_wrap &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[8b3]"></a>oid_ext_key_usage_from_asn1</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, oid.o(i.oid_ext_key_usage_from_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_ext_key_usage_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_extended_key_usage
</UL>

<P><STRONG><a name="[8b1]"></a>oid_grp_id_from_asn1</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, oid.o(i.oid_grp_id_from_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_grp_id_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_ec_grp
</UL>

<P><STRONG><a name="[8b5]"></a>oid_md_alg_from_asn1</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, oid.o(i.oid_md_alg_from_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_md_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
</UL>

<P><STRONG><a name="[8b7]"></a>oid_pk_alg_from_asn1</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, oid.o(i.oid_pk_alg_from_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_pk_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
</UL>

<P><STRONG><a name="[8b9]"></a>oid_sig_alg_from_asn1</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, oid.o(i.oid_sig_alg_from_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg_desc
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg
</UL>

<P><STRONG><a name="[8bc]"></a>oid_x509_ext_from_asn1</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, oid.o(i.oid_x509_ext_from_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_x509_ext_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_x509_ext_type
</UL>

<P><STRONG><a name="[8af]"></a>oid_x520_attr_from_asn1</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, oid.o(i.oid_x520_attr_from_asn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_x520_attr_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_attr_short_name
</UL>

<P><STRONG><a name="[8be]"></a>mbedtls_zeroize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pem.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
</UL>

<P><STRONG><a name="[8c4]"></a>mbedtls_pk_get_len</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pk.o(i.mbedtls_pk_get_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_pk_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
</UL>

<P><STRONG><a name="[8c3]"></a>mbedtls_zeroize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pk.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
</UL>

<P><STRONG><a name="[8ce]"></a>pk_hashlen_helper</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pk.o(i.pk_hashlen_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
</UL>

<P><STRONG><a name="[2ee]"></a>eckey_alloc_wrap</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pk_wrap.o(i.eckey_alloc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eckey_alloc_wrap &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2ec]"></a>eckey_can_do</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pk_wrap.o(i.eckey_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2ed]"></a>eckey_check_pair</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pk_wrap.o(i.eckey_check_pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = eckey_check_pair &rArr; mbedtls_ecp_check_pub_priv &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2f0]"></a>eckey_debug</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pk_wrap.o(i.eckey_debug))
<BR>[Address Reference Count : 2]<UL><LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2ef]"></a>eckey_free_wrap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pk_wrap.o(i.eckey_free_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eckey_free_wrap &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2eb]"></a>eckey_get_bitlen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pk_wrap.o(i.eckey_get_bitlen))
<BR>[Address Reference Count : 2]<UL><LI> pk_wrap.o(.constdata)
<LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2f1]"></a>eckeydh_can_do</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pk_wrap.o(i.eckeydh_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2e8]"></a>rsa_alloc_wrap</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pk_wrap.o(i.rsa_alloc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rsa_alloc_wrap &rArr; mbedtls_rsa_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2e2]"></a>rsa_can_do</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pk_wrap.o(i.rsa_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2e7]"></a>rsa_check_pair_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pk_wrap.o(i.rsa_check_pair_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = rsa_check_pair_wrap &rArr; mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2ea]"></a>rsa_debug</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pk_wrap.o(i.rsa_debug))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2e5]"></a>rsa_decrypt_wrap</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, pk_wrap.o(i.rsa_decrypt_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 3280<LI>Call Chain = rsa_decrypt_wrap &rArr; mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2e6]"></a>rsa_encrypt_wrap</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, pk_wrap.o(i.rsa_encrypt_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176<LI>Call Chain = rsa_encrypt_wrap &rArr; mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2e9]"></a>rsa_free_wrap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pk_wrap.o(i.rsa_free_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rsa_free_wrap &rArr; mbedtls_rsa_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2e1]"></a>rsa_get_bitlen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pk_wrap.o(i.rsa_get_bitlen))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2e4]"></a>rsa_sign_wrap</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, pk_wrap.o(i.rsa_sign_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2256<LI>Call Chain = rsa_sign_wrap &rArr; mbedtls_rsa_pkcs1_sign &rArr; mbedtls_rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[2e3]"></a>rsa_verify_wrap</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, pk_wrap.o(i.rsa_verify_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 3304<LI>Call Chain = rsa_verify_wrap &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[8cc]"></a>pk_get_ecpubkey</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, pkparse.o(i.pk_get_ecpubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[8c7]"></a>pk_get_pk_alg</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, pkparse.o(i.pk_get_pk_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = pk_get_pk_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[8ca]"></a>pk_get_rsapubkey</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, pkparse.o(i.pk_get_rsapubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pk_get_rsapubkey &rArr; mbedtls_asn1_get_mpi &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[8cb]"></a>pk_use_ecparams</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pkparse.o(i.pk_use_ecparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pk_use_ecparams &rArr; mbedtls_ecp_group_load &rArr; ecp_group_load &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_ec_grp
</UL>
<BR>[Called By]<UL><LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[8ed]"></a>mgf_mask</STRONG> (Thumb, 128 bytes, Stack size 104 bytes, rsa.o(i.mgf_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mgf_mask &rArr; mbedtls_md_update
</UL>
<BR>[Calls]<UL><LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_sign
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[8e6]"></a>rsa_prepare_blinding</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, rsa.o(i.rsa_prepare_blinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[901]"></a>mbedtls_zeroize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sha256.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>

<P><STRONG><a name="[906]"></a>mbedtls_zeroize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sha512.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
</UL>

<P><STRONG><a name="[9d7]"></a>mbedtls_ssl_own_key</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ssl_cli.o(i.mbedtls_ssl_own_key))
<BR><BR>[Called By]<UL><LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[9c9]"></a>mbedtls_ssl_safer_memcmp</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ssl_cli.o(i.mbedtls_ssl_safer_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
</UL>

<P><STRONG><a name="[9c6]"></a>mbedtls_zeroize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssl_cli.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_new_session_ticket
</UL>

<P><STRONG><a name="[9bc]"></a>ssl_check_server_ecdh_params</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ssl_cli.o(i.ssl_check_server_ecdh_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = ssl_check_server_ecdh_params &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_curve
</UL>
<BR>[Called By]<UL><LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
</UL>

<P><STRONG><a name="[9c3]"></a>ssl_generate_random</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_generate_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ssl_generate_random &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[926]"></a>ssl_parse_certificate_request</STRONG> (Thumb, 442 bytes, Stack size 48 bytes, ssl_cli.o(i.ssl_parse_certificate_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = ssl_parse_certificate_request &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[9ce]"></a>ssl_parse_encrypt_then_mac_ext</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ssl_cli.o(i.ssl_parse_encrypt_then_mac_ext))
<BR><BR>[Called By]<UL><LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[9cf]"></a>ssl_parse_extended_ms_ext</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ssl_cli.o(i.ssl_parse_extended_ms_ext))
<BR><BR>[Called By]<UL><LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[9cc]"></a>ssl_parse_max_fragment_length_ext</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ssl_cli.o(i.ssl_parse_max_fragment_length_ext))
<BR><BR>[Called By]<UL><LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[92d]"></a>ssl_parse_new_session_ticket</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_parse_new_session_ticket))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = ssl_parse_new_session_ticket &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[9c8]"></a>ssl_parse_renegotiation_info</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_renegotiation_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = ssl_parse_renegotiation_info &rArr; mbedtls_ssl_send_fatal_handshake_failure &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_fatal_handshake_failure
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[9ca]"></a>ssl_parse_server_ecdh_params</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_server_ecdh_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = ssl_parse_server_ecdh_params &rArr; ssl_check_server_ecdh_params &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</UL>
<BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[923]"></a>ssl_parse_server_hello</STRONG> (Thumb, 2262 bytes, Stack size 72 bytes, ssl_cli.o(i.ssl_parse_server_hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = ssl_parse_server_hello &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_fatal_handshake_failure
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_version
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_optimize_checksum
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_truncated_hmac_ext
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_supported_point_formats_ext
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_session_ticket_ext
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_max_fragment_length_ext
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_extended_ms_ext
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_encrypt_then_mac_ext
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[927]"></a>ssl_parse_server_hello_done</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_server_hello_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = ssl_parse_server_hello_done &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[925]"></a>ssl_parse_server_key_exchange</STRONG> (Thumb, 770 bytes, Stack size 136 bytes, ssl_cli.o(i.ssl_parse_server_key_exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = ssl_parse_server_key_exchange &rArr; ssl_parse_server_ecdh_params &rArr; ssl_check_server_ecdh_params &rArr; mbedtls_debug_print_ecp &rArr; mbedtls_debug_print_mpi &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_sig_pk_alg
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[9d0]"></a>ssl_parse_session_ticket_ext</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ssl_cli.o(i.ssl_parse_session_ticket_ext))
<BR><BR>[Called By]<UL><LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[9d2]"></a>ssl_parse_signature_algorithm</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_parse_signature_algorithm))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_parse_signature_algorithm &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_pk_alg_from_sig
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_md_alg_from_hash
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_sig_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[9d1]"></a>ssl_parse_supported_point_formats_ext</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_supported_point_formats_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ssl_parse_supported_point_formats_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[9cd]"></a>ssl_parse_truncated_hmac_ext</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ssl_cli.o(i.ssl_parse_truncated_hmac_ext))
<BR><BR>[Called By]<UL><LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[92a]"></a>ssl_write_certificate_verify</STRONG> (Thumb, 468 bytes, Stack size 88 bytes, ssl_cli.o(i.ssl_write_certificate_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_from_pk
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_own_key
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[922]"></a>ssl_write_client_hello</STRONG> (Thumb, 846 bytes, Stack size 56 bytes, ssl_cli.o(i.ssl_write_client_hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = ssl_write_client_hello &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_truncated_hmac_ext
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_point_formats_ext
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_elliptic_curves_ext
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_session_ticket_ext
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_renegotiation_ext
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_max_fragment_length_ext
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_extended_ms_ext
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypt_then_mac_ext
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_generate_random
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[929]"></a>ssl_write_client_key_exchange</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_write_client_key_exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_mul_comb_core &rArr; ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_mpi
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ecp
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[9df]"></a>ssl_write_encrypt_then_mac_ext</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_encrypt_then_mac_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_write_encrypt_then_mac_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[9e0]"></a>ssl_write_extended_ms_ext</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_extended_ms_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_write_extended_ms_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[9d8]"></a>ssl_write_hostname_ext</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_hostname_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_write_hostname_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[9dd]"></a>ssl_write_max_fragment_length_ext</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_max_fragment_length_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_write_max_fragment_length_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[9d9]"></a>ssl_write_renegotiation_ext</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_renegotiation_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_write_renegotiation_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[9e1]"></a>ssl_write_session_ticket_ext</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_write_session_ticket_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ssl_write_session_ticket_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[9da]"></a>ssl_write_signature_algorithms_ext</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_write_signature_algorithms_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ssl_write_signature_algorithms_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hash_from_md_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[9db]"></a>ssl_write_supported_elliptic_curves_ext</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_write_supported_elliptic_curves_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ssl_write_supported_elliptic_curves_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[9dc]"></a>ssl_write_supported_point_formats_ext</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_supported_point_formats_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_write_supported_point_formats_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[9de]"></a>ssl_write_truncated_hmac_ext</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_truncated_hmac_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ssl_write_truncated_hmac_ext &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[9be]"></a>mbedtls_cipher_get_cipher_mode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_cipher_get_cipher_mode))
<BR><BR>[Called By]<UL><LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[947]"></a>mbedtls_ssl_own_cert</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_own_cert))
<BR><BR>[Called By]<UL><LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
</UL>

<P><STRONG><a name="[937]"></a>mbedtls_ssl_safer_memcmp</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_safer_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[913]"></a>mbedtls_zeroize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha384
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[276]"></a>ssl_calc_finished_tls_sha256</STRONG> (Thumb, 188 bytes, Stack size 184 bytes, ssl_tls.o(i.ssl_calc_finished_tls_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = ssl_calc_finished_tls_sha256 &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[273]"></a>ssl_calc_finished_tls_sha384</STRONG> (Thumb, 188 bytes, Stack size 304 bytes, ssl_tls.o(i.ssl_calc_finished_tls_sha384))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = ssl_calc_finished_tls_sha384 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[275]"></a>ssl_calc_verify_tls_sha256</STRONG> (Thumb, 104 bytes, Stack size 136 bytes, ssl_tls.o(i.ssl_calc_verify_tls_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = ssl_calc_verify_tls_sha256 &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[272]"></a>ssl_calc_verify_tls_sha384</STRONG> (Thumb, 104 bytes, Stack size 248 bytes, ssl_tls.o(i.ssl_calc_verify_tls_sha384))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = ssl_calc_verify_tls_sha384 &rArr; mbedtls_sha512_finish &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_clone
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[938]"></a>ssl_check_ctr_renegotiate</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_check_ctr_renegotiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 3880<LI>Call Chain = ssl_check_ctr_renegotiate &rArr; mbedtls_ssl_renegotiate &rArr; ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>

<P><STRONG><a name="[918]"></a>ssl_check_timer</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_check_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ssl_check_timer &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
</UL>

<P><STRONG><a name="[9bd]"></a>ssl_decrypt_buf</STRONG> (Thumb, 2122 bytes, Stack size 120 bytes, ssl_tls.o(i.ssl_decrypt_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = ssl_decrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_decrypt
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_process
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
</UL>

<P><STRONG><a name="[949]"></a>ssl_encrypt_buf</STRONG> (Thumb, 1426 bytes, Stack size 88 bytes, ssl_tls.o(i.ssl_encrypt_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_encrypt
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>

<P><STRONG><a name="[943]"></a>ssl_handshake_init</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_handshake_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ssl_handshake_init &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>
<BR>[Called By]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_start_renegotiation
</UL>

<P><STRONG><a name="[9c5]"></a>ssl_handshake_params_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_handshake_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_handshake_params_init
</UL>
<BR>[Calls]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[931]"></a>ssl_handshake_wrapup_free_hs_transform</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_handshake_wrapup_free_hs_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ssl_handshake_wrapup_free_hs_transform &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>
<BR>[Called By]<UL><LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
</UL>

<P><STRONG><a name="[912]"></a>ssl_key_cert_free</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_key_cert_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_key_cert_free
</UL>
<BR>[Called By]<UL><LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
</UL>

<P><STRONG><a name="[93d]"></a>ssl_parse_record_header</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, ssl_tls.o(i.ssl_parse_record_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_version
</UL>
<BR>[Called By]<UL><LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</UL>

<P><STRONG><a name="[93e]"></a>ssl_prepare_record_content</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_prepare_record_content))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_buf
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</UL>

<P><STRONG><a name="[942]"></a>ssl_session_copy</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_session_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ssl_session_copy &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_session
</UL>

<P><STRONG><a name="[939]"></a>ssl_set_timer</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_set_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ssl_set_timer &rArr; mbedtls_debug_print_msg &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>

<P><STRONG><a name="[93a]"></a>ssl_start_renegotiation</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_start_renegotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 3840<LI>Call Chain = ssl_start_renegotiation &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_msg
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_renegotiate
</UL>

<P><STRONG><a name="[9c4]"></a>ssl_transform_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ssl_tls.o(i.ssl_transform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssl_transform_init
</UL>
<BR>[Calls]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[277]"></a>ssl_update_checksum_sha256</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.ssl_update_checksum_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = ssl_update_checksum_sha256 &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_optimize_checksum)
</UL>
<P><STRONG><a name="[278]"></a>ssl_update_checksum_sha384</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.ssl_update_checksum_sha384))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = ssl_update_checksum_sha384 &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_optimize_checksum)
</UL>
<P><STRONG><a name="[283]"></a>ssl_update_checksum_start</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_update_checksum_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = ssl_update_checksum_start &rArr; mbedtls_sha512_update &rArr; mbedtls_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.ssl_handshake_params_init)
</UL>
<P><STRONG><a name="[946]"></a>ssl_write_real</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_write_real))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = ssl_write_real &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_debug_print_buf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_debug_print_ret
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_max_frag_len
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
</UL>

<P><STRONG><a name="[9e6]"></a>tls_prf_generic</STRONG> (Thumb, 274 bytes, Stack size 256 bytes, ssl_tls.o(i.tls_prf_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = tls_prf_generic &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha384
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
</UL>

<P><STRONG><a name="[274]"></a>tls_prf_sha256</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, ssl_tls.o(i.tls_prf_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[271]"></a>tls_prf_sha384</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, ssl_tls.o(i.tls_prf_sha384))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = tls_prf_sha384 &rArr; tls_prf_generic &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[971]"></a>x509_check_time</STRONG> (Thumb, 178 bytes, Stack size 12 bytes, x509.o(i.x509_check_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = x509_check_time
</UL>
<BR>[Called By]<UL><LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
</UL>

<P><STRONG><a name="[96d]"></a>x509_date_is_valid</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, x509.o(i.x509_date_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_date_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
</UL>

<P><STRONG><a name="[965]"></a>x509_get_attr_type_value</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, x509.o(i.x509_get_attr_type_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = x509_get_attr_type_value &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
</UL>

<P><STRONG><a name="[970]"></a>x509_get_current_time</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, x509.o(i.x509_get_current_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = x509_get_current_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime
</UL>
<BR>[Called By]<UL><LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
</UL>

<P><STRONG><a name="[967]"></a>x509_get_hash_alg</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, x509.o(i.x509_get_hash_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = x509_get_hash_alg &rArr; mbedtls_oid_get_md_alg &rArr; oid_md_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_rsassa_pss_params
</UL>

<P><STRONG><a name="[96c]"></a>x509_parse_int</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, x509.o(i.x509_parse_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_parse_int
</UL>
<BR>[Called By]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
</UL>

<P><STRONG><a name="[94a]"></a>mbedtls_zeroize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, x509_crt.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
</UL>

<P><STRONG><a name="[95a]"></a>x509_check_wildcard</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, x509_crt.o(i.x509_check_wildcard))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = x509_check_wildcard &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[95e]"></a>x509_crt_check_parent</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, x509_crt.o(i.x509_crt_check_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = x509_crt_check_parent &rArr; x509_name_cmp &rArr; x509_string_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[958]"></a>x509_crt_parse_der_core</STRONG> (Thumb, 748 bytes, Stack size 80 bytes, x509_crt.o(i.x509_crt_parse_der_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_version
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_uid
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_dates
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</UL>

<P><STRONG><a name="[960]"></a>x509_crt_verify_child</STRONG> (Thumb, 492 bytes, Stack size 144 bytes, x509_crt.o(i.x509_crt_verify_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 3640 + In Cycle
<LI>Call Chain = x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
</UL>
<BR>[Called By]<UL><LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[95f]"></a>x509_crt_verify_top</STRONG> (Thumb, 414 bytes, Stack size 136 bytes, x509_crt.o(i.x509_crt_verify_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 3496<LI>Call Chain = x509_crt_verify_top &rArr; x509_crt_verifycrl &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[9ef]"></a>x509_crt_verifycrl</STRONG> (Thumb, 258 bytes, Stack size 112 bytes, x509_crt.o(i.x509_crt_verifycrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 3360<LI>Call Chain = x509_crt_verifycrl &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_is_revoked
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[9f0]"></a>x509_get_basic_constraints</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, x509_crt.o(i.x509_get_basic_constraints))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = x509_get_basic_constraints &rArr; mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
</UL>
<BR>[Called By]<UL><LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[9ed]"></a>x509_get_crt_ext</STRONG> (Thumb, 378 bytes, Stack size 56 bytes, x509_crt.o(i.x509_get_crt_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = x509_get_crt_ext &rArr; x509_get_ns_cert_type &rArr; mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_x509_ext_type
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ns_cert_type
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_key_usage
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ext_key_usage
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[9eb]"></a>x509_get_dates</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, x509_crt.o(i.x509_get_dates))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = x509_get_dates &rArr; mbedtls_x509_get_time &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[9f2]"></a>x509_get_ext_key_usage</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, x509_crt.o(i.x509_get_ext_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = x509_get_ext_key_usage &rArr; mbedtls_asn1_get_sequence_of &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
</UL>
<BR>[Called By]<UL><LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[9f1]"></a>x509_get_key_usage</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, x509_crt.o(i.x509_get_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = x509_get_key_usage &rArr; mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
</UL>
<BR>[Called By]<UL><LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[9f4]"></a>x509_get_ns_cert_type</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, x509_crt.o(i.x509_get_ns_cert_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = x509_get_ns_cert_type &rArr; mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
</UL>
<BR>[Called By]<UL><LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[9f3]"></a>x509_get_subject_alt_name</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, x509_crt.o(i.x509_get_subject_alt_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = x509_get_subject_alt_name &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[9ec]"></a>x509_get_uid</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, x509_crt.o(i.x509_get_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = x509_get_uid &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[9ea]"></a>x509_get_version</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, x509_crt.o(i.x509_get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = x509_get_version &rArr; mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
</UL>
<BR>[Called By]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[951]"></a>x509_info_cert_type</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, x509_crt.o(i.x509_info_cert_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509_info_cert_type &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[953]"></a>x509_info_ext_key_usage</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, x509_crt.o(i.x509_info_ext_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = x509_info_ext_key_usage &rArr; mbedtls_oid_get_extended_key_usage &rArr; oid_ext_key_usage_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_extended_key_usage
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[952]"></a>x509_info_key_usage</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, x509_crt.o(i.x509_info_key_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509_info_key_usage &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[950]"></a>x509_info_subject_alt_name</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, x509_crt.o(i.x509_info_subject_alt_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = x509_info_subject_alt_name
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[959]"></a>x509_memcasecmp</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, x509_crt.o(i.x509_memcasecmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = x509_memcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_string_cmp
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[9e9]"></a>x509_name_cmp</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, x509_crt.o(i.x509_name_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = x509_name_cmp &rArr; x509_string_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_string_cmp
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
</UL>

<P><STRONG><a name="[95d]"></a>x509_profile_check_key</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, x509_crt.o(i.x509_profile_check_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = x509_profile_check_key
</UL>
<BR>[Calls]<UL><LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[9ee]"></a>x509_profile_check_md_alg</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, x509_crt.o(i.x509_profile_check_md_alg))
<BR><BR>[Called By]<UL><LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[95c]"></a>x509_profile_check_pk_alg</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, x509_crt.o(i.x509_profile_check_pk_alg))
<BR><BR>[Called By]<UL><LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verifycrl
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[9f5]"></a>x509_string_cmp</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, x509_crt.o(i.x509_string_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = x509_string_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
</UL>

<P><STRONG><a name="[8f8]"></a>mbedtls_zeroize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</UL>

<P><STRONG><a name="[3b2]"></a>BUFFER_safemalloc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, buffer.o(i.BUFFER_safemalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BUFFER_safemalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_create
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_clone
</UL>

<P><STRONG><a name="[3c7]"></a>CONSTBUFFER_Create_Internal</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, constbuffer.o(i.CONSTBUFFER_Create_Internal), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REFCOUNT_CONSTBUFFER_HANDLE_DATA_Create
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[3c8]"></a>REFCOUNT_CONSTBUFFER_HANDLE_DATA_Create</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, constbuffer.o(i.REFCOUNT_CONSTBUFFER_HANDLE_DATA_Create), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Create_Internal
</UL>

<P><STRONG><a name="[6ff]"></a>Map_CloneVector</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, map.o(i.Map_CloneVector))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Map_CloneVector &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Clone
</UL>

<P><STRONG><a name="[700]"></a>Map_DecreaseStorageKeysValues</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, map.o(i.Map_DecreaseStorageKeysValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Map_DecreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertNewKeyValue
</UL>

<P><STRONG><a name="[701]"></a>Map_IncreaseStorageKeysValues</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, map.o(i.Map_IncreaseStorageKeysValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertNewKeyValue
</UL>

<P><STRONG><a name="[6fd]"></a>findKey</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, map.o(i.findKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = findKey &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
</UL>

<P><STRONG><a name="[6fe]"></a>insertNewKeyValue</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, map.o(i.insertNewKeyValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = insertNewKeyValue &rArr; Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_IncreaseStorageKeysValues
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_DecreaseStorageKeysValues
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
</UL>

<P><STRONG><a name="[421]"></a>CreateInternal</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, optionhandler.o(i.CreateInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CreateInternal &rArr; VECTOR_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_create
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionHandler_Create
</UL>

<P><STRONG><a name="[724]"></a>construct_sas_token</STRONG> (Thumb, 318 bytes, Stack size 96 bytes, sastoken.o(i.construct_sas_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = construct_sas_token &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encoder
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decoder
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMACSHA256_ComputeHash
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_tToString
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_length
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_copy
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_CreateString
</UL>

<P><STRONG><a name="[725]"></a>getExpiryValue</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, sastoken.o(i.getExpiryValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = getExpiryValue &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SASToken_Validate
</UL>

<P><STRONG><a name="[731]"></a>SHA224_256Finalize</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sha224.o(i.SHA224_256Finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = SHA224_256Finalize &rArr; SHA224_256PadMessage &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256PadMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256ResultN
</UL>

<P><STRONG><a name="[732]"></a>SHA224_256PadMessage</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, sha224.o(i.SHA224_256PadMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SHA224_256PadMessage &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256Finalize
</UL>

<P><STRONG><a name="[733]"></a>SHA224_256ProcessMessageBlock</STRONG> (Thumb, 322 bytes, Stack size 320 bytes, sha224.o(i.SHA224_256ProcessMessageBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SHA224_256ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Input
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256PadMessage
</UL>

<P><STRONG><a name="[72e]"></a>SHA224_256Reset</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, sha224.o(i.SHA224_256Reset))
<BR><BR>[Called By]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Reset
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224Reset
</UL>

<P><STRONG><a name="[730]"></a>SHA224_256ResultN</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sha224.o(i.SHA224_256ResultN))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SHA224_256ResultN &rArr; SHA224_256Finalize &rArr; SHA224_256PadMessage &rArr; SHA224_256ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_256Finalize
</UL>
<BR>[Called By]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Result
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224Result
</UL>

<P><STRONG><a name="[73c]"></a>SHA384_512Finalize</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sha384-512.o(i.SHA384_512Finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512PadMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512ResultN
</UL>

<P><STRONG><a name="[73d]"></a>SHA384_512PadMessage</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, sha384-512.o(i.SHA384_512PadMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512Finalize
</UL>

<P><STRONG><a name="[73e]"></a>SHA384_512ProcessMessageBlock</STRONG> (Thumb, 938 bytes, Stack size 808 bytes, sha384-512.o(i.SHA384_512ProcessMessageBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = SHA384_512ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Input
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512PadMessage
</UL>

<P><STRONG><a name="[739]"></a>SHA384_512Reset</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sha384-512.o(i.SHA384_512Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHA384_512Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Reset
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384Reset
</UL>

<P><STRONG><a name="[73b]"></a>SHA384_512ResultN</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, sha384-512.o(i.SHA384_512ResultN))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384_512Finalize
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512Result
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA384Result
</UL>

<P><STRONG><a name="[76c]"></a>URL_PrintableChar</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, urlencode.o(i.URL_PrintableChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = URL_PrintableChar
</UL>
<BR>[Called By]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
</UL>

<P><STRONG><a name="[76b]"></a>URL_PrintableCharSize</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, urlencode.o(i.URL_PrintableCharSize))
<BR><BR>[Called By]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
</UL>

<P><STRONG><a name="[51f]"></a>get_seconds_since_epoch</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, iothub_client_authorization.o(i.get_seconds_since_epoch))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = get_seconds_since_epoch &rArr; get_difftime &rArr; __hardfp_difftime &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_difftime
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken
</UL>

<P><STRONG><a name="[47d]"></a>DoTimeouts</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, iothub_client_ll.o(i.DoTimeouts))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DoTimeouts &rArr; IoTHubMessage_Destroy &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_DoWork
</UL>

<P><STRONG><a name="[530]"></a>attach_ms_timesOutAfter</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, iothub_client_ll.o(i.attach_ms_timesOutAfter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = attach_ms_timesOutAfter &rArr; tickcounter_get_current_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendEventAsync
</UL>

<P><STRONG><a name="[810]"></a>create_blob_upload_module</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothub_client_ll.o(i.create_blob_upload_module))
<BR><BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
</UL>

<P><STRONG><a name="[80f]"></a>destroy_blob_upload_module</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, iothub_client_ll.o(i.destroy_blob_upload_module))
<BR><BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
</UL>

<P><STRONG><a name="[534]"></a>dev_twin_data_create</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, iothub_client_ll.o(i.dev_twin_data_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dev_twin_data_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Destroy
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Create
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendReportedState
</UL>

<P><STRONG><a name="[528]"></a>device_twin_data_destroy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iothub_client_ll.o(i.device_twin_data_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = device_twin_data_destroy &rArr; CONSTBUFFER_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_Destroy
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendReportedState
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_DoWork
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_Destroy
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_ReportedStateComplete
</UL>

<P><STRONG><a name="[533]"></a>get_next_item_id</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, iothub_client_ll.o(i.get_next_item_id))
<BR><BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendReportedState
</UL>

<P><STRONG><a name="[526]"></a>initialize_iothub_client</STRONG> (Thumb, 684 bytes, Stack size 80 bytes, iothub_client_ll.o(i.initialize_iothub_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = initialize_iothub_client &rArr; make_product_info &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_destroy
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_create
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InitializeListHead
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Destroy
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Create
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetRetryPolicy
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTransportProtocol
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_product_info
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_blob_upload_module
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_blob_upload_module
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_CreateFromConnectionString
</UL>

<P><STRONG><a name="[535]"></a>make_product_info</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, iothub_client_ll.o(i.make_product_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = make_product_info &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_platform_info
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SetOption
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
</UL>

<P><STRONG><a name="[80e]"></a>setTransportProtocol</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, iothub_client_ll.o(i.setTransportProtocol))
<BR><BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_iothub_client
</UL>

<P><STRONG><a name="[775]"></a>ContainsOnlyUsAscii</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, iothub_message.o(i.ContainsOnlyUsAscii))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateAsciiCharactersFilter
</UL>

<P><STRONG><a name="[24b]"></a>ValidateAsciiCharactersFilter</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, iothub_message.o(i.ValidateAsciiCharactersFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ValidateAsciiCharactersFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsOnlyUsAscii
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothub_message.o(i.IoTHubMessage_CreateFromByteArray)
</UL>
<P><STRONG><a name="[3ca]"></a>CanRetry</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, iothubtransport_mqtt_common.o(i.CanRetry))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CanRetry &rArr; get_difftime &rArr; __hardfp_difftime &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_difftime
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRetryTimer
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRetryTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
</UL>

<P><STRONG><a name="[423]"></a>CreateRetryLogic</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, iothubtransport_mqtt_common.o(i.CreateRetryLogic))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CreateRetryLogic &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetRetryPolicy
</UL>

<P><STRONG><a name="[470]"></a>DestroyRetryLogic</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iothubtransport_mqtt_common.o(i.DestroyRetryLogic))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DestroyRetryLogic &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetRetryPolicy
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
</UL>

<P><STRONG><a name="[47a]"></a>DisconnectFromClient</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iothubtransport_mqtt_common.o(i.DisconnectFromClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DisconnectFromClient &rArr; mqtt_client_disconnect &rArr; sendPacketItem &rArr; logOutgoingingRawTrace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_destroy
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
</UL>

<P><STRONG><a name="[493]"></a>GetTransportProviderIfNecessary</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.GetTransportProviderIfNecessary))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetTransportProviderIfNecessary
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
</UL>

<P><STRONG><a name="[50f]"></a>InitializeConnection</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.InitializeConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944<LI>Call Chain = InitializeConnection &rArr; SendMqttConnectMsg &rArr; IoTHubClient_Auth_Get_SasToken &rArr; SASToken_CreateString &rArr; construct_sas_token &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMqttConnectMsg
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectFromClient
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRetry
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_ConnectionStatusCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
</UL>

<P><STRONG><a name="[512]"></a>InitializeTransportHandleData</STRONG> (Thumb, 442 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.InitializeTransportHandleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = InitializeTransportHandleData &rArr; buildConfigForUsername &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_destroy
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_create
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InitializeListHead
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_init
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_deinit
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildConfigForUsername
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Create
</UL>

<P><STRONG><a name="[557]"></a>RetrieveMessagePayload</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.RetrieveMessagePayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RetrieveMessagePayload &rArr; IoTHubMessage_GetByteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetByteArray
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetString
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetContentType
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
</UL>

<P><STRONG><a name="[1eb]"></a>RetryPolicy_Exponential_BackOff_With_Jitter</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, iothubtransport_mqtt_common.o(i.RetryPolicy_Exponential_BackOff_With_Jitter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RetryPolicy_Exponential_BackOff_With_Jitter
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransport_mqtt_common.o(i.CreateRetryLogic)
</UL>
<P><STRONG><a name="[510]"></a>SendMqttConnectMsg</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, iothubtransport_mqtt_common.o(i.SendMqttConnectMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = SendMqttConnectMsg &rArr; IoTHubClient_Auth_Get_SasToken &rArr; SASToken_CreateString &rArr; construct_sas_token &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Is_SasToken_Valid
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_SasToken
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_Auth_Get_Credential_Type
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URL_Encode
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_connect
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTransportProviderIfNecessary
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_GetOption
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_ConnectionStatusCallBack
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeConnection
</UL>

<P><STRONG><a name="[3cc]"></a>StartRetryTimer</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, iothubtransport_mqtt_common.o(i.StartRetryTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = StartRetryTimer &rArr; get_time &rArr; time &rArr; TimingSystemGetSystemTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRetry
</UL>

<P><STRONG><a name="[3d0]"></a>StopRetryTimer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, iothubtransport_mqtt_common.o(i.StopRetryTimer))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_operation_complete_callback
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRetry
</UL>

<P><STRONG><a name="[555]"></a>SubscribeToMqttProtocol</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, iothubtransport_mqtt_common.o(i.SubscribeToMqttProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = SubscribeToMqttProtocol &rArr; mqtt_client_subscribe &rArr; mqtt_codec_subscribe &rArr; addListItemsToSubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
</UL>

<P><STRONG><a name="[78e]"></a>addPropertiesTouMqttMessage</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, iothubtransport_mqtt_common.o(i.addPropertiesTouMqttMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = addPropertiesTouMqttMessage &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Properties
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetInternals
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetMessageId
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_GetCorrelationId
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_mqtt_telemetry_msg
</UL>

<P><STRONG><a name="[517]"></a>buildConfigForUsername</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, iothubtransport_mqtt_common.o(i.buildConfigForUsername))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = buildConfigForUsername &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTransportHandleData
</UL>

<P><STRONG><a name="[7f4]"></a>extractMqttProperties</STRONG> (Thumb, 470 bytes, Stack size 64 bytes, iothubtransport_mqtt_common.o(i.extractMqttProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = extractMqttProperties &rArr; Map_AddOrUpdate &rArr; insertNewKeyValue &rArr; Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AddOrUpdate
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Properties
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_destroy
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSystemProperty
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetMessageId
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_SetCorrelationId
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[553]"></a>free_proxy_data</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, iothubtransport_mqtt_common.o(i.free_proxy_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = free_proxy_data &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
</UL>

<P><STRONG><a name="[559]"></a>get_next_packet_id</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, iothubtransport_mqtt_common.o(i.get_next_packet_id))
<BR><BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_message
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_twin_get_message
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_device_method_message
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubscribeToMqttProtocol
</UL>

<P><STRONG><a name="[7f5]"></a>isSystemProperty</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.isSystemProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = isSystemProperty &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
</UL>

<P><STRONG><a name="[248]"></a>mqtt_error_callback</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, iothubtransport_mqtt_common.o(i.mqtt_error_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mqtt_error_callback &rArr; IoTHubClient_LL_ConnectionStatusCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_ConnectionStatusCallBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransport_mqtt_common.o(i.InitializeTransportHandleData)
</UL>
<P><STRONG><a name="[24a]"></a>mqtt_notification_callback</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, iothubtransport_mqtt_common.o(i.mqtt_notification_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mqtt_notification_callback &rArr; extractMqttProperties &rArr; Map_AddOrUpdate &rArr; insertNewKeyValue &rArr; Map_IncreaseStorageKeysValues &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_Destroy
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubMessage_CreateFromByteArray
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getTopicName
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_getApplicationMsg
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_topic_type
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_device_method_rid_info
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_twin_topic_info
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractMqttProperties
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_RetrievePropertyComplete
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_ReportedStateComplete
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_MessageCallback
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_DeviceMethodComplete
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransport_mqtt_common.o(i.InitializeTransportHandleData)
</UL>
<P><STRONG><a name="[249]"></a>mqtt_operation_complete_callback</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.mqtt_operation_complete_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mqtt_operation_complete_callback &rArr; mqtt_client_disconnect &rArr; sendPacketItem &rArr; logOutgoingingRawTrace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_RemoveEntryList
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMsgComplete
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRetryTimer
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_ConnectionStatusCallBack
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransport_mqtt_common.o(i.InitializeTransportHandleData)
</UL>
<P><STRONG><a name="[98d]"></a>parse_device_twin_topic_info</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, iothubtransport_mqtt_common.o(i.parse_device_twin_topic_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = parse_device_twin_topic_info &rArr; STRING_TOKENIZER_get_next_token &rArr; STRING_copy_n &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_destroy
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[554]"></a>publish_device_method_message</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.publish_device_method_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = publish_device_method_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_destroy
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DeviceMethod_Response
</UL>

<P><STRONG><a name="[556]"></a>publish_device_twin_get_message</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.publish_device_twin_get_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = publish_device_twin_get_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_destroy
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packet_id
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
</UL>

<P><STRONG><a name="[55b]"></a>publish_device_twin_message</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.publish_device_twin_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = publish_device_twin_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSTBUFFER_GetContent
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_destroy
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_packet_id
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_ProcessItem
</UL>

<P><STRONG><a name="[558]"></a>publish_mqtt_telemetry_msg</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.publish_mqtt_telemetry_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = publish_mqtt_telemetry_msg &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_destroy
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addPropertiesTouMqttMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
</UL>

<P><STRONG><a name="[98f]"></a>retrieve_device_method_rid_info</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, iothubtransport_mqtt_common.o(i.retrieve_device_method_rid_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = retrieve_device_method_rid_info &rArr; STRING_TOKENIZER_get_next_token &rArr; STRING_copy_n &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_get_next_token
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_destroy
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_TOKENIZER_create_from_char
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_length
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_c_str
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[98c]"></a>retrieve_topic_type</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, iothubtransport_mqtt_common.o(i.retrieve_topic_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = retrieve_topic_type
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_notification_callback
</UL>

<P><STRONG><a name="[551]"></a>sendMsgComplete</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, iothubtransport_mqtt_common.o(i.sendMsgComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = sendMsgComplete &rArr; IoTHubClient_LL_SendComplete &rArr; IoTHubMessage_Destroy &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InsertTailList
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DList_InitializeListHead
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubClient_LL_SendComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_operation_complete_callback
</UL>

<P><STRONG><a name="[18e]"></a>IoTHubTransportMqtt_Create</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = IoTHubTransportMqtt_Create &rArr; IoTHubTransport_MQTT_Common_Create &rArr; InitializeTransportHandleData &rArr; buildConfigForUsername &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[18f]"></a>IoTHubTransportMqtt_Destroy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = IoTHubTransportMqtt_Destroy &rArr; IoTHubTransport_MQTT_Common_Destroy &rArr; DisconnectFromClient &rArr; mqtt_client_disconnect &rArr; sendPacketItem &rArr; logOutgoingingRawTrace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[188]"></a>IoTHubTransportMqtt_DeviceMethod_Response</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_DeviceMethod_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = IoTHubTransportMqtt_DeviceMethod_Response &rArr; IoTHubTransport_MQTT_Common_DeviceMethod_Response &rArr; publish_device_method_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DeviceMethod_Response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[194]"></a>IoTHubTransportMqtt_DoWork</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_DoWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992<LI>Call Chain = IoTHubTransportMqtt_DoWork &rArr; IoTHubTransport_MQTT_Common_DoWork &rArr; InitializeConnection &rArr; SendMqttConnectMsg &rArr; IoTHubClient_Auth_Get_SasToken &rArr; SASToken_CreateString &rArr; construct_sas_token &rArr; HMACSHA256_ComputeHash &rArr; hmac &rArr; hmacReset &rArr; USHAResult &rArr; SHA512Result &rArr; SHA384_512ResultN &rArr; SHA384_512Finalize &rArr; SHA384_512PadMessage &rArr; SHA384_512ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_DoWork
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[18c]"></a>IoTHubTransportMqtt_GetHostname</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_GetHostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IoTHubTransportMqtt_GetHostname &rArr; IoTHubTransport_MQTT_Common_GetHostname &rArr; STRING_clone &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_GetHostname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[196]"></a>IoTHubTransportMqtt_GetSendStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_GetSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IoTHubTransportMqtt_GetSendStatus &rArr; IoTHubTransport_MQTT_Common_GetSendStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_GetSendStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[18b]"></a>IoTHubTransportMqtt_ProcessItem</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_ProcessItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = IoTHubTransportMqtt_ProcessItem &rArr; IoTHubTransport_MQTT_Common_ProcessItem &rArr; publish_device_twin_message &rArr; mqtt_client_publish &rArr; mqtt_codec_publish &rArr; constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_ProcessItem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[190]"></a>IoTHubTransportMqtt_Register</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IoTHubTransportMqtt_Register &rArr; IoTHubTransport_MQTT_Common_Register &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[185]"></a>IoTHubTransportMqtt_SendMessageDisposition</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_SendMessageDisposition))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IoTHubTransportMqtt_SendMessageDisposition &rArr; IoTHubTransport_MQTT_Common_SendMessageDisposition &rArr; IoTHubMessage_Destroy &rArr; Map_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SendMessageDisposition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[18d]"></a>IoTHubTransportMqtt_SetOption</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_SetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = IoTHubTransportMqtt_SetOption &rArr; IoTHubTransport_MQTT_Common_SetOption &rArr; DisconnectFromClient &rArr; mqtt_client_disconnect &rArr; sendPacketItem &rArr; logOutgoingingRawTrace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetOption
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[195]"></a>IoTHubTransportMqtt_SetRetryPolicy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_SetRetryPolicy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IoTHubTransportMqtt_SetRetryPolicy &rArr; IoTHubTransport_MQTT_Common_SetRetryPolicy &rArr; CreateRetryLogic &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_SetRetryPolicy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[192]"></a>IoTHubTransportMqtt_Subscribe</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = IoTHubTransportMqtt_Subscribe &rArr; IoTHubTransport_MQTT_Common_Subscribe &rArr; STRING_construct_sprintf &rArr; STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[186]"></a>IoTHubTransportMqtt_Subscribe_DeviceMethod</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Subscribe_DeviceMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IoTHubTransportMqtt_Subscribe_DeviceMethod &rArr; IoTHubTransport_MQTT_Common_Subscribe_DeviceMethod &rArr; STRING_construct &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe_DeviceMethod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[189]"></a>IoTHubTransportMqtt_Subscribe_DeviceTwin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Subscribe_DeviceTwin))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IoTHubTransportMqtt_Subscribe_DeviceTwin &rArr; IoTHubTransport_MQTT_Common_Subscribe_DeviceTwin &rArr; STRING_construct &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Subscribe_DeviceTwin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[191]"></a>IoTHubTransportMqtt_Unregister</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Unregister))
<BR><BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unregister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[193]"></a>IoTHubTransportMqtt_Unsubscribe</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Unsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = IoTHubTransportMqtt_Unsubscribe &rArr; IoTHubTransport_MQTT_Common_Unsubscribe &rArr; mqtt_client_unsubscribe &rArr; mqtt_codec_unsubscribe &rArr; addListItemsToUnsubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[187]"></a>IoTHubTransportMqtt_Unsubscribe_DeviceMethod</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Unsubscribe_DeviceMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = IoTHubTransportMqtt_Unsubscribe_DeviceMethod &rArr; IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod &rArr; mqtt_client_unsubscribe &rArr; mqtt_codec_unsubscribe &rArr; addListItemsToUnsubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceMethod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[18a]"></a>IoTHubTransportMqtt_Unsubscribe_DeviceTwin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iothubtransportmqtt.o(i.IoTHubTransportMqtt_Unsubscribe_DeviceTwin))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IoTHubTransportMqtt_Unsubscribe_DeviceTwin &rArr; IoTHubTransport_MQTT_Common_Unsubscribe_DeviceTwin &rArr; STRING_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoTHubTransport_MQTT_Common_Unsubscribe_DeviceTwin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(.data)
</UL>
<P><STRONG><a name="[24c]"></a>getIoTransportProvider</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, iothubtransportmqtt.o(i.getIoTransportProvider))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = getIoTransportProvider &rArr; xio_create &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_default_tlsio
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iothubtransportmqtt.o(i.IoTHubTransportMqtt_Create)
</UL>
<P><STRONG><a name="[79a]"></a>append_indent</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, parson.o(i.append_indent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = append_indent &rArr; append_string &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_string
</UL>
<BR>[Called By]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[79b]"></a>append_string</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, parson.o(i.append_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = append_string &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_string
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_indent
</UL>

<P><STRONG><a name="[802]"></a>get_quoted_string</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, parson.o(i.get_quoted_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = get_quoted_string &rArr; process_string &rArr; parse_utf16 &rArr; parse_utf16_hex
</UL>
<BR>[Calls]<UL><LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_quotes
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_string
</UL>
<BR>[Called By]<UL><LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string_value
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
</UL>

<P><STRONG><a name="[9a1]"></a>hex_char_to_int</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, parson.o(i.hex_char_to_int))
<BR><BR>[Called By]<UL><LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_utf16_hex
</UL>

<P><STRONG><a name="[812]"></a>is_decimal</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, parson.o(i.is_decimal))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = is_decimal &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number_value
</UL>

<P><STRONG><a name="[813]"></a>json_array_add</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, parson.o(i.json_array_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = json_array_add &rArr; json_array_resize &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_get_wrapping_value
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
</UL>

<P><STRONG><a name="[816]"></a>json_array_free</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, parson.o(i.json_array_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = json_array_free &rArr;  json_value_free (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
</UL>

<P><STRONG><a name="[832]"></a>json_array_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, parson.o(i.json_array_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = json_array_init
</UL>
<BR>[Called By]<UL><LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_array
</UL>

<P><STRONG><a name="[814]"></a>json_array_resize</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, parson.o(i.json_array_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = json_array_resize &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_add
</UL>

<P><STRONG><a name="[81a]"></a>json_object_add</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, parson.o(i.json_object_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = json_object_add &rArr; json_object_get_value &rArr; json_object_nget_value &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_wrapping_value
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_value
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parson_strdup
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_value
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
</UL>

<P><STRONG><a name="[822]"></a>json_object_free</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, parson.o(i.json_object_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = json_object_free &rArr;  json_value_free (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
</UL>

<P><STRONG><a name="[833]"></a>json_object_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, parson.o(i.json_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = json_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_object
</UL>

<P><STRONG><a name="[825]"></a>json_object_nget_value</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, parson.o(i.json_object_nget_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = json_object_nget_value &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_count
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_value
</UL>

<P><STRONG><a name="[81c]"></a>json_object_resize</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, parson.o(i.json_object_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = json_object_resize &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_add
</UL>

<P><STRONG><a name="[829]"></a>json_serialize_string</STRONG> (Thumb, 1306 bytes, Stack size 32 bytes, parson.o(i.json_serialize_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = json_serialize_string &rArr; append_string &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_string
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[828]"></a>json_serialize_to_buffer_r</STRONG> (Thumb, 906 bytes, Stack size 56 bytes, parson.o(i.json_serialize_to_buffer_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = json_serialize_to_buffer_r &rArr;  json_serialize_to_buffer_r (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_type
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_string
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_object
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_number
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_boolean
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_array
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_value
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_name
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_count
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_get_value
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_get_count
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_string
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_string
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_indent
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_pretty
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialization_size_pretty
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_serialize_to_buffer_r
</UL>

<P><STRONG><a name="[99e]"></a>json_value_init_string_no_copy</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, parson.o(i.json_value_init_string_no_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = json_value_init_string_no_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string_value
</UL>

<P><STRONG><a name="[995]"></a>parse_array_value</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, parson.o(i.parse_array_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = parse_array_value &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_array
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_array
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_get_count
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_resize
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_add
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[996]"></a>parse_boolean_value</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, parson.o(i.parse_boolean_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = parse_boolean_value &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_boolean
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[998]"></a>parse_null_value</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, parson.o(i.parse_null_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = parse_null_value &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_null
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[99a]"></a>parse_number_value</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, parson.o(i.parse_number_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_number
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_decimal
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[99c]"></a>parse_object_value</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, parson.o(i.parse_object_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + In Cycle
<LI>Call Chain = parse_object_value &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_object
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_get_object
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_free
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get_count
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_resize
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_add
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_quoted_string
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[99d]"></a>parse_string_value</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, parson.o(i.parse_string_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = parse_string_value &rArr; get_quoted_string &rArr; process_string &rArr; parse_utf16 &rArr; parse_utf16_hex
</UL>
<BR>[Calls]<UL><LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_value_init_string_no_copy
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_quoted_string
</UL>
<BR>[Called By]<UL><LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[99f]"></a>parse_utf16</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, parson.o(i.parse_utf16))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = parse_utf16 &rArr; parse_utf16_hex
</UL>
<BR>[Calls]<UL><LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_utf16_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_string
</UL>

<P><STRONG><a name="[9a0]"></a>parse_utf16_hex</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, parson.o(i.parse_utf16_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = parse_utf16_hex
</UL>
<BR>[Calls]<UL><LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_char_to_int
</UL>
<BR>[Called By]<UL><LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_utf16
</UL>

<P><STRONG><a name="[826]"></a>parse_value</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, parson.o(i.parse_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = parse_value &rArr; parse_number_value &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string_value
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number_value
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_null_value
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_boolean_value
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_string
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object_value
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array_value
</UL>

<P><STRONG><a name="[81d]"></a>parson_strdup</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, parson.o(i.parson_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = parson_strdup &rArr; parson_strndup &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parson_strndup
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_add
</UL>

<P><STRONG><a name="[81f]"></a>parson_strndup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, parson.o(i.parson_strndup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = parson_strndup &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_dotset_value
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parson_strdup
</UL>

<P><STRONG><a name="[804]"></a>process_string</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, parson.o(i.process_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = process_string &rArr; parse_utf16 &rArr; parse_utf16_hex
</UL>
<BR>[Calls]<UL><LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_utf16
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_quoted_string
</UL>

<P><STRONG><a name="[803]"></a>skip_quotes</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, parson.o(i.skip_quotes))
<BR><BR>[Called By]<UL><LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_quoted_string
</UL>

<P><STRONG><a name="[42b]"></a>DestroyHalfBakedComplexType</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, agenttypesystem.o(i.DestroyHalfBakedComplexType))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DestroyHalfBakedComplexType &rArr; Destroy_AGENT_DATA_TYPE &rArr;  Destroy_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE
</UL>

<P><STRONG><a name="[1e4]"></a>NoCloneFunction</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, agenttypesystem.o(i.NoCloneFunction))
<BR>[Address Reference Count : 1]<UL><LI> agenttypesystem.o(i.AgentDataTypes_ToString)
</UL>
<P><STRONG><a name="[1e3]"></a>NoFreeFunction</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, agenttypesystem.o(i.NoFreeFunction))
<BR>[Address Reference Count : 1]<UL><LI> agenttypesystem.o(i.AgentDataTypes_ToString)
</UL>
<P><STRONG><a name="[416]"></a>ValidateDate</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, agenttypesystem.o(i.ValidateDate))
<BR><BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_EDM_DATE_TIME_OFFSET
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_date
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[41a]"></a>ValidateDecimal</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, agenttypesystem.o(i.ValidateDecimal))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ValidateDecimal &rArr; scanOptionalDotAndDigits &rArr; scanOptionalNDigits
</UL>
<BR>[Calls]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanOptionalSign
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanOptionalNDigits
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanOptionalDotAndDigits
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanMandatoryOneDigit
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[337]"></a>__ARM_isinf</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, agenttypesystem.o(i.__ARM_isinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_isinf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[335]"></a>__ARM_isinff</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, agenttypesystem.o(i.__ARM_isinff))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[42f]"></a>areThereTwoSameNames</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, agenttypesystem.o(i.areThereTwoSameNames))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = areThereTwoSameNames &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
</UL>

<P><STRONG><a name="[33e]"></a>base64b16</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, agenttypesystem.o(i.base64b16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = base64b16
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64b16toValue
</UL>

<P><STRONG><a name="[79c]"></a>base64b16toValue</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, agenttypesystem.o(i.base64b16toValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = base64b16toValue &rArr; base64b16
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64b16
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanbase64b16
</UL>

<P><STRONG><a name="[33f]"></a>base64b8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, agenttypesystem.o(i.base64b8))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64b8toValue
</UL>

<P><STRONG><a name="[79d]"></a>base64b8toValue</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, agenttypesystem.o(i.base64b8toValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = base64b8toValue
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64b8
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanbase64b8
</UL>

<P><STRONG><a name="[33d]"></a>base64char</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, agenttypesystem.o(i.base64char))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[9ad]"></a>base64toValue</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, agenttypesystem.o(i.base64toValue))
<BR><BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanbase64b8
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanbase64b16
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan4base64char
</UL>

<P><STRONG><a name="[7f7]"></a>daysInAllPreviousMonths</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, agenttypesystem.o(i.daysInAllPreviousMonths))
<BR><BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tm_yday_and_tm_wday
</UL>

<P><STRONG><a name="[417]"></a>fill_tm_yday_and_tm_wday</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, agenttypesystem.o(i.fill_tm_yday_and_tm_wday))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fill_tm_yday_and_tm_wday
</UL>
<BR>[Calls]<UL><LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daysInAllPreviousMonths
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[33c]"></a>hexDigitToChar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, agenttypesystem.o(i.hexDigitToChar))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgentDataTypes_ToString
</UL>

<P><STRONG><a name="[42e]"></a>isOneNameNULL</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, agenttypesystem.o(i.isOneNameNULL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isOneNameNULL
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
</UL>

<P><STRONG><a name="[41e]"></a>scan4base64char</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, agenttypesystem.o(i.scan4base64char))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = scan4base64char
</UL>
<BR>[Calls]<UL><LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64toValue
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[410]"></a>scanAndReadNDigitsInt</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, agenttypesystem.o(i.scanAndReadNDigitsInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = scanAndReadNDigitsInt
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf3d2d
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf2d
</UL>

<P><STRONG><a name="[9ae]"></a>scanMandatory1CapitalHexDigit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, agenttypesystem.o(i.scanMandatory1CapitalHexDigit))
<BR><BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanMandatory2CapitalHexDigits
</UL>

<P><STRONG><a name="[41d]"></a>scanMandatory2CapitalHexDigits</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, agenttypesystem.o(i.scanMandatory2CapitalHexDigits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = scanMandatory2CapitalHexDigits
</UL>
<BR>[Calls]<UL><LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanMandatory1CapitalHexDigit
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[777]"></a>scanMandatoryOneDigit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, agenttypesystem.o(i.scanMandatoryOneDigit))
<BR><BR>[Called By]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanOptionalDotAndDigits
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDecimal
</UL>

<P><STRONG><a name="[779]"></a>scanOptionalDotAndDigits</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, agenttypesystem.o(i.scanOptionalDotAndDigits))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = scanOptionalDotAndDigits &rArr; scanOptionalNDigits
</UL>
<BR>[Calls]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanOptionalNDigits
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanMandatoryOneDigit
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDecimal
</UL>

<P><STRONG><a name="[40f]"></a>scanOptionalMinusSign</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, agenttypesystem.o(i.scanOptionalMinusSign))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scanOptionalMinusSign
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[778]"></a>scanOptionalNDigits</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, agenttypesystem.o(i.scanOptionalNDigits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scanOptionalNDigits
</UL>
<BR>[Called By]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanOptionalDotAndDigits
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDecimal
</UL>

<P><STRONG><a name="[776]"></a>scanOptionalSign</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, agenttypesystem.o(i.scanOptionalSign))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scanOptionalSign
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDecimal
</UL>

<P><STRONG><a name="[413]"></a>sscanf2d</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, agenttypesystem.o(i.sscanf2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sscanf2d &rArr; scanAndReadNDigitsInt
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAndReadNDigitsInt
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[415]"></a>sscanf3d2d</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, agenttypesystem.o(i.sscanf3d2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sscanf3d2d &rArr; scanAndReadNDigitsInt
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanAndReadNDigitsInt
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[40c]"></a>sscanfd</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, agenttypesystem.o(i.sscanfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sscanfd &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[414]"></a>sscanfdotllu</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, agenttypesystem.o(i.sscanfdotllu))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sscanfdotllu &rArr; sscanfllu &rArr; strtoull &rArr; __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanfllu
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[419]"></a>sscanff</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, agenttypesystem.o(i.sscanff))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sscanff &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[418]"></a>sscanflf</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, agenttypesystem.o(i.sscanflf))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = sscanflf &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[40e]"></a>sscanfllu</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, agenttypesystem.o(i.sscanfllu))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sscanfllu &rArr; strtoull &rArr; __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoull
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanfdotllu
</UL>

<P><STRONG><a name="[40d]"></a>sscanfu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, agenttypesystem.o(i.sscanfu))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sscanfu &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
</UL>

<P><STRONG><a name="[3d9]"></a>CodeFirst_Init_impl</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, codefirst.o(i.CodeFirst_Init_impl))
<BR><BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Init
</UL>

<P><STRONG><a name="[3df]"></a>DestroyDevice</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, codefirst.o(i.DestroyDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DestroyDevice &rArr; Device_Destroy &rArr; DataPublisher_Destroy &rArr; DataMarshaller_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Destroy
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_DestroyDevice
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_Deinit
</UL>

<P><STRONG><a name="[3ec]"></a>FindChildModelInCodeFirstMetadata</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, codefirst.o(i.FindChildModelInCodeFirstMetadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FindChildModelInCodeFirstMetadata &rArr; FindModelInCodeFirstMetadata &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindModelInCodeFirstMetadata
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeMethod
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeAction
</UL>

<P><STRONG><a name="[3e4]"></a>FindDevice</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, codefirst.o(i.FindDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FindDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_ExecuteMethod
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_ExecuteCommand
</UL>

<P><STRONG><a name="[3eb]"></a>FindModelInCodeFirstMetadata</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, codefirst.o(i.FindModelInCodeFirstMetadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FindModelInCodeFirstMetadata &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeMethod
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_InvokeAction
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChildModelInCodeFirstMetadata
</UL>

<P><STRONG><a name="[400]"></a>FindReportedProperty</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, codefirst.o(i.FindReportedProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + In Cycle
<LI>Call Chain = FindReportedProperty &rArr;  FindReportedProperty (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindReportedProperty
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindReportedProperty
</UL>

<P><STRONG><a name="[3f6]"></a>FindValue</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, codefirst.o(i.FindValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + In Cycle
<LI>Call Chain = FindValue &rArr;  FindValue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindValue
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindValue
</UL>

<P><STRONG><a name="[3f4]"></a>SendAllDeviceProperties</STRONG> (Thumb, 102 bytes, Stack size 96 bytes, codefirst.o(i.SendAllDeviceProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SendAllDeviceProperties &rArr; Device_PublishTransacted &rArr; DataPublisher_PublishTransacted &rArr; Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE &rArr;  Create_AGENT_DATA_TYPE_from_AGENT_DATA_TYPE (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelName
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_PublishTransacted
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsync
</UL>

<P><STRONG><a name="[3ff]"></a>SendAllDeviceReportedProperties</STRONG> (Thumb, 102 bytes, Stack size 96 bytes, codefirst.o(i.SendAllDeviceReportedProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SendAllDeviceReportedProperties &rArr; Device_PublishTransacted_ReportedProperty &rArr; DataPublisher_PublishTransacted_ReportedProperty &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelName
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_PublishTransacted_ReportedProperty
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_SendAsyncReported
</UL>

<P><STRONG><a name="[79f]"></a>buildModel</STRONG> (Thumb, 426 bytes, Stack size 64 bytes, codefirst.o(i.buildModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = buildModel &rArr; Schema_AddModelDesiredProperty &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelByName
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelMethod
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelAction
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelReportedProperty
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelProperty
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelModel
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelMethodArgument
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelDesiredProperty
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelActionArgument
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModelTypes
</UL>

<P><STRONG><a name="[3f0]"></a>buildModelTypes</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, codefirst.o(i.buildModelTypes))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = buildModelTypes &rArr; buildModel &rArr; Schema_AddModelDesiredProperty &rArr; VECTOR_push_back &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateModelType
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildModel
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_RegisterSchema
</UL>

<P><STRONG><a name="[3ef]"></a>buildStructTypes</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, codefirst.o(i.buildStructTypes))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = buildStructTypes &rArr; Schema_CreateStructType &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_CreateStructType
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddStructTypeProperty
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_RegisterSchema
</UL>

<P><STRONG><a name="[3e0]"></a>deinitializeDesiredProperties</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, codefirst.o(i.deinitializeDesiredProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = deinitializeDesiredProperties &rArr;  deinitializeDesiredProperties (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelyByIndex
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelCount
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelByIndex_Offset
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredProperty_pfDesiredPropertyDeinitialize
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredProperty_offset
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredPropertyCount
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredPropertyByIndex
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinitializeDesiredProperties
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_DestroyDevice
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinitializeDesiredProperties
</UL>

<P><STRONG><a name="[3da]"></a>initializeDesiredProperties</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, codefirst.o(i.initializeDesiredProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = initializeDesiredProperties &rArr;  initializeDesiredProperties (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelyByIndex
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelCount
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelByIndex_Offset
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredProperty_pfDesiredPropertyInitialize
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredProperty_offset
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredPropertyCount
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelDesiredPropertyByIndex
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_CreateDevice
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeDesiredProperties
</UL>

<P><STRONG><a name="[44e]"></a>DecodeAndExecuteModelAction</STRONG> (Thumb, 284 bytes, Stack size 192 bytes, commanddecoder.o(i.DecodeAndExecuteModelAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = DecodeAndExecuteModelAction &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildByName
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelActionByName
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelActionArgumentCount
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelActionArgumentByIndex
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetActionArgumentType
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetActionArgumentName
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanActionPathAndExecuteAction
</UL>

<P><STRONG><a name="[457]"></a>DecodeAndExecuteModelMethod</STRONG> (Thumb, 250 bytes, Stack size 64 bytes, commanddecoder.o(i.DecodeAndExecuteModelMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = DecodeAndExecuteModelMethod &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildByName
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodByName
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodArgumentCount
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelMethodArgumentByIndex
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetMethodArgumentType
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetMethodArgumentName
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMethodPathAndExecuteMethod
</UL>

<P><STRONG><a name="[408]"></a>DecodeCommand</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, commanddecoder.o(i.DecodeCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = DecodeCommand &rArr; ScanActionPathAndExecuteAction &rArr; DecodeAndExecuteModelAction &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetValue
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildByName
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetSchemaForModelType
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanActionPathAndExecuteAction
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteCommand
</UL>

<P><STRONG><a name="[40a]"></a>DecodeMethod</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, commanddecoder.o(i.DecodeMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = DecodeMethod &rArr; ScanMethodPathAndExecuteMethod &rArr; DecodeAndExecuteModelMethod &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetSchemaForModelType
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMethodPathAndExecuteMethod
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandDecoder_ExecuteMethod
</UL>

<P><STRONG><a name="[456]"></a>DecodeValueFromNode</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, commanddecoder.o(i.DecodeValueFromNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + In Cycle
<LI>Call Chain = DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetValue
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_GetChildByName
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetStructTypePropertyCount
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetStructTypePropertyByIndex
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetStructTypeByName
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetPropertyType
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetPropertyName
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeFirst_GetPrimitiveType
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_AGENT_DATA_TYPE
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_AGENT_DATA_TYPE_from_Members
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAgentDataType_From_String
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeValueFromNode
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
</UL>

<P><STRONG><a name="[45f]"></a>ScanActionPathAndExecuteAction</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, commanddecoder.o(i.ScanActionPathAndExecuteAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = ScanActionPathAndExecuteAction &rArr; DecodeAndExecuteModelAction &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelByName
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelAction
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCommand
</UL>

<P><STRONG><a name="[460]"></a>ScanMethodPathAndExecuteMethod</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, commanddecoder.o(i.ScanMethodPathAndExecuteMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = ScanMethodPathAndExecuteMethod &rArr; DecodeAndExecuteModelMethod &rArr; DecodeValueFromNode &rArr;  DecodeValueFromNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_GetModelModelByName
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAndExecuteModelMethod
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeMethod
</UL>

<P><STRONG><a name="[1ed]"></a>NoCloneFunction</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, datamarshaller.o(i.NoCloneFunction))
<BR>[Address Reference Count : 1]<UL><LI> datamarshaller.o(i.DataMarshaller_SendData)
</UL>
<P><STRONG><a name="[1ec]"></a>NoFreeFunction</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, datamarshaller.o(i.NoFreeFunction))
<BR>[Address Reference Count : 1]<UL><LI> datamarshaller.o(i.DataMarshaller_SendData)
</UL>
<P><STRONG><a name="[1ef]"></a>reportedPropertyExistsByPath</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, datapublisher.o(i.reportedPropertyExistsByPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reportedPropertyExistsByPath &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> datapublisher.o(i.DataPublisher_PublishTransacted_ReportedProperty)
</UL>
<P><STRONG><a name="[1f1]"></a>DeviceInvokeAction</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, iotdevice.o(i.DeviceInvokeAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DeviceInvokeAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iotdevice.o(i.Device_Create)
</UL>
<P><STRONG><a name="[1f0]"></a>DeviceInvokeMethod</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, iotdevice.o(i.DeviceInvokeMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DeviceInvokeMethod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iotdevice.o(i.Device_Create)
</UL>
<P><STRONG><a name="[24e]"></a>NOPCloneFunction</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jsondecoder.o(i.NOPCloneFunction))
<BR>[Address Reference Count : 1]<UL><LI> jsondecoder.o(i.JSONDecoder_JSON_To_MultiTree)
</UL>
<P><STRONG><a name="[24d]"></a>NoFreeFunction</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jsondecoder.o(i.NoFreeFunction))
<BR>[Address Reference Count : 1]<UL><LI> jsondecoder.o(i.JSONDecoder_JSON_To_MultiTree)
</UL>
<P><STRONG><a name="[713]"></a>ParseArray</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, jsondecoder.o(i.ParseArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + In Cycle
<LI>Call Chain = ParseArray &rArr;  ParseValue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_SetValue
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddChild
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipWhiteSpaces
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseValue
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseValue
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseObjectOrArray
</UL>

<P><STRONG><a name="[717]"></a>ParseColon</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, jsondecoder.o(i.ParseColon))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ParseColon
</UL>
<BR>[Calls]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipWhiteSpaces
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNameValuePair
</UL>

<P><STRONG><a name="[562]"></a>ParseJSON</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, jsondecoder.o(i.ParseJSON))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ParseJSON &rArr; ParseObjectOrArray &rArr; ParseObject &rArr; ParseNameValuePair &rArr; ParseValue &rArr;  ParseObject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseObjectOrArray
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSONDecoder_JSON_To_MultiTree
</UL>

<P><STRONG><a name="[719]"></a>ParseNameValuePair</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, jsondecoder.o(i.ParseNameValuePair))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ParseNameValuePair &rArr; ParseValue &rArr;  ParseObject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_SetValue
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddChild
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipWhiteSpaces
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseValue
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseString
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseColon
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseObject
</UL>

<P><STRONG><a name="[71d]"></a>ParseNumber</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, jsondecoder.o(i.ParseNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ParseNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseValue
</UL>

<P><STRONG><a name="[71b]"></a>ParseObject</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, jsondecoder.o(i.ParseObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ParseObject &rArr; ParseNameValuePair &rArr; ParseValue &rArr;  ParseObject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipWhiteSpaces
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseOpenCurly
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNameValuePair
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseValue
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseObjectOrArray
</UL>

<P><STRONG><a name="[718]"></a>ParseObjectOrArray</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, jsondecoder.o(i.ParseObjectOrArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ParseObjectOrArray &rArr; ParseObject &rArr; ParseNameValuePair &rArr; ParseValue &rArr;  ParseObject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipWhiteSpaces
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseObject
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseArray
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseJSON
</UL>

<P><STRONG><a name="[71c]"></a>ParseOpenCurly</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, jsondecoder.o(i.ParseOpenCurly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ParseOpenCurly
</UL>
<BR>[Calls]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipWhiteSpaces
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseObject
</UL>

<P><STRONG><a name="[71a]"></a>ParseString</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, jsondecoder.o(i.ParseString))
<BR><BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseValue
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNameValuePair
</UL>

<P><STRONG><a name="[715]"></a>ParseValue</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, jsondecoder.o(i.ParseValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + In Cycle
<LI>Call Chain = ParseValue &rArr;  ParseObject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipWhiteSpaces
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseString
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseObject
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNumber
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseArray
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNameValuePair
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseArray
</UL>

<P><STRONG><a name="[705]"></a>createLeaf</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, multitree.o(i.createLeaf))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = createLeaf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChildByName
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddChild
</UL>

<P><STRONG><a name="[706]"></a>getChildByName</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, multitree.o(i.getChildByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getChildByName &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTree_AddLeaf
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLeaf
</UL>

<P><STRONG><a name="[32e]"></a>AddModelProperty</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, schema.o(i.AddModelProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AddModelProperty &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_AddModelProperty
</UL>

<P><STRONG><a name="[468]"></a>DestroyAction</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, schema.o(i.DestroyAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DestroyAction &rArr; DestroyActionArgument &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyActionArgument
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
</UL>

<P><STRONG><a name="[469]"></a>DestroyActionArgument</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, schema.o(i.DestroyActionArgument))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DestroyActionArgument &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyAction
</UL>

<P><STRONG><a name="[46a]"></a>DestroyMethod</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, schema.o(i.DestroyMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DestroyMethod &rArr; VECTOR_destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMethodArgument
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMethods
</UL>

<P><STRONG><a name="[46b]"></a>DestroyMethodArgument</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, schema.o(i.DestroyMethodArgument))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DestroyMethodArgument &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMethod
</UL>

<P><STRONG><a name="[46c]"></a>DestroyMethods</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, schema.o(i.DestroyMethods))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DestroyMethods &rArr; DestroyMethod &rArr; VECTOR_destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMethod
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
</UL>

<P><STRONG><a name="[46d]"></a>DestroyModel</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, schema.o(i.DestroyModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DestroyModel &rArr; DestroyMethods &rArr; DestroyMethod &rArr; VECTOR_destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_clear
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_size
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_element
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VECTOR_destroy
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyProperty
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMethods
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyAction
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
</UL>

<P><STRONG><a name="[46e]"></a>DestroyProperty</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, schema.o(i.DestroyProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DestroyProperty &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyStruct
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyModel
</UL>

<P><STRONG><a name="[471]"></a>DestroyStruct</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, schema.o(i.DestroyStruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DestroyStruct &rArr; DestroyProperty &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyProperty
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schema_Destroy
</UL>

<P><STRONG><a name="[256]"></a>SchemaHandlesMatch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, schema.o(i.SchemaHandlesMatch))
<BR>[Address Reference Count : 1]<UL><LI> schema.o(i.Schema_Destroy)
</UL>
<P><STRONG><a name="[259]"></a>SchemaNamespacesMatch</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, schema.o(i.SchemaNamespacesMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SchemaNamespacesMatch &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> schema.o(i.Schema_GetSchemaByNamespace)
</UL>
<P><STRONG><a name="[252]"></a>desiredPropertyExists</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, schema.o(i.desiredPropertyExists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = desiredPropertyExists &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> schema.o(i.Schema_AddModelDesiredProperty)
</UL>
<P><STRONG><a name="[257]"></a>matchModelMethod</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, schema.o(i.matchModelMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = matchModelMethod &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> schema.o(i.Schema_GetModelMethodByName)
</UL>
<P><STRONG><a name="[258]"></a>matchModelName</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, schema.o(i.matchModelName))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = matchModelName &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> schema.o(i.Schema_GetModelModelByName)
</UL>
<P><STRONG><a name="[255]"></a>methodExists</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, schema.o(i.methodExists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = methodExists &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> schema.o(i.Schema_CreateModelMethod)
</UL>
<P><STRONG><a name="[253]"></a>methodFindArgumentByBame</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, schema.o(i.methodFindArgumentByBame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = methodFindArgumentByBame &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> schema.o(i.Schema_AddModelMethodArgument)
</UL>
<P><STRONG><a name="[254]"></a>reportedPropertyExists</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, schema.o(i.reportedPropertyExists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reportedPropertyExists &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 2]<UL><LI> schema.o(i.Schema_AddModelReportedProperty)
<LI> schema.o(i.Schema_ModelReportedPropertyByPathExists)
</UL>
<P><STRONG><a name="[9a9]"></a>byteutil_readByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mqtt_client.o(i.byteutil_readByte))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[7a0]"></a>byteutil_readUTF</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mqtt_client.o(i.byteutil_readUTF))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = byteutil_readUTF &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_read_uint16
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[7a1]"></a>byteutil_read_uint16</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mqtt_client.o(i.byteutil_read_uint16))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_readUTF
</UL>

<P><STRONG><a name="[7a3]"></a>clear_mqtt_options</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mqtt_client.o(i.clear_mqtt_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = clear_mqtt_options &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_connect
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloneMqttOptions
</UL>

<P><STRONG><a name="[7a4]"></a>cloneMqttOptions</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, mqtt_client.o(i.cloneMqttOptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cloneMqttOptions &rArr; mallocAndStrcpy_s &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mallocAndStrcpy_s
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_mqtt_options
</UL>
<BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_connect
</UL>

<P><STRONG><a name="[7a5]"></a>close_connection</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mqtt_client.o(i.close_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = close_connection &rArr; ThreadAPI_Sleep &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadAPI_Sleep
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_dowork
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_close
</UL>
<BR>[Called By]<UL><LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_error_callback
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendComplete
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
</UL>

<P><STRONG><a name="[7b1]"></a>construct_trace_log_handle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mqtt_client.o(i.construct_trace_log_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = construct_trace_log_handle &rArr; STRING_new &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
</UL>

<P><STRONG><a name="[800]"></a>getLogTime</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mqtt_client.o(i.getLogTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_incoming_trace
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logOutgoingingRawTrace
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logIncomingRawTrace
</UL>

<P><STRONG><a name="[834]"></a>logIncomingRawTrace</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mqtt_client.o(i.logIncomingRawTrace))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = logIncomingRawTrace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLogTime
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[835]"></a>logOutgoingingRawTrace</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, mqtt_client.o(i.logOutgoingingRawTrace))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = logOutgoingingRawTrace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLogTime
</UL>
<BR>[Called By]<UL><LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
</UL>

<P><STRONG><a name="[836]"></a>log_incoming_trace</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, mqtt_client.o(i.log_incoming_trace))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = log_incoming_trace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLogTime
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
</UL>

<P><STRONG><a name="[837]"></a>log_outgoing_trace</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, mqtt_client.o(i.log_outgoing_trace))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = log_outgoing_trace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLogTime
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
</UL>

<P><STRONG><a name="[27a]"></a>onBytesReceived</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mqtt_client.o(i.onBytesReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = onBytesReceived &rArr; mqtt_codec_bytesReceived &rArr; prepareheaderDataInfo &rArr; BUFFER_pre_build &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_bytesReceived
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_error_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_client.o(i.mqtt_client_connect)
</UL>
<P><STRONG><a name="[279]"></a>onIoError</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mqtt_client.o(i.onIoError))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = onIoError &rArr; set_error_callback &rArr; close_connection &rArr; ThreadAPI_Sleep &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_error_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_client.o(i.mqtt_client_connect)
</UL>
<P><STRONG><a name="[27b]"></a>onOpenComplete</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, mqtt_client.o(i.onOpenComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = onOpenComplete &rArr; mqtt_codec_connect &rArr; constructConnPayload &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_outgoing_trace
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_trace_log_handle
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_connection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_client.o(i.mqtt_client_connect)
</UL>
<P><STRONG><a name="[25e]"></a>on_connection_closed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mqtt_client.o(i.on_connection_closed))
<BR>[Address Reference Count : 1]<UL><LI> mqtt_client.o(i.close_connection)
</UL>
<P><STRONG><a name="[27c]"></a>recvCompleteCallback</STRONG> (Thumb, 1076 bytes, Stack size 56 bytes, mqtt_client.o(i.recvCompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = recvCompleteCallback &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_construct_sprintf
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_destroy
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_create
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_setIsRetained
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqttmessage_setIsDuplicateMsg
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publishRelease
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publishReceived
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publishComplete
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publishAck
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QOS_VALUEStrings
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_error_callback
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacketItem
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_incoming_trace
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logIncomingRawTrace
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_read_uint16
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_readUTF
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_readByte
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_client.o(i.mqtt_client_init)
</UL>
<P><STRONG><a name="[27f]"></a>sendComplete</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mqtt_client.o(i.sendComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sendComplete &rArr; set_error_callback &rArr; close_connection &rArr; ThreadAPI_Sleep &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_error_callback
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_connection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_client.o(i.sendPacketItem)
</UL>
<P><STRONG><a name="[975]"></a>sendPacketItem</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, mqtt_client.o(i.sendPacketItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sendPacketItem &rArr; logOutgoingingRawTrace &rArr; getLogTime &rArr; strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickcounter_get_current_ms
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xio_send
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logOutgoingingRawTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_unsubscribe
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_subscribe
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_publish
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_disconnect
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onOpenComplete
</UL>

<P><STRONG><a name="[976]"></a>set_error_callback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mqtt_client.o(i.set_error_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_error_callback &rArr; close_connection &rArr; ThreadAPI_Sleep &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_dowork
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendComplete
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCompleteCallback
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onIoError
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onBytesReceived
</UL>

<P><STRONG><a name="[78b]"></a>addListItemsToSubscribePacket</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, mqtt_codec.o(i.addListItemsToSubscribePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = addListItemsToSubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeUTF
</UL>
<BR>[Called By]<UL><LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
</UL>

<P><STRONG><a name="[78d]"></a>addListItemsToUnsubscribePacket</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, mqtt_codec.o(i.addListItemsToUnsubscribePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = addListItemsToUnsubscribePacket &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeUTF
</UL>
<BR>[Called By]<UL><LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
</UL>

<P><STRONG><a name="[7a8]"></a>completePacketData</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mqtt_codec.o(i.completePacketData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = completePacketData &rArr; BUFFER_delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_bytesReceived
</UL>

<P><STRONG><a name="[7a9]"></a>constructConnPayload</STRONG> (Thumb, 476 bytes, Stack size 64 bytes, mqtt_codec.o(i.constructConnPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = constructConnPayload &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_new
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_delete
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_concat_with_STRING
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeUTF
</UL>
<BR>[Called By]<UL><LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
</UL>

<P><STRONG><a name="[7aa]"></a>constructConnectVariableHeader</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, mqtt_codec.o(i.constructConnectVariableHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = constructConnectVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeUTF
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeInt
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeByte
</UL>
<BR>[Called By]<UL><LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
</UL>

<P><STRONG><a name="[7ac]"></a>constructFixedHeader</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, mqtt_codec.o(i.constructFixedHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = constructFixedHeader &rArr; BUFFER_pre_build &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_pre_build
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_prepend
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_connect
</UL>

<P><STRONG><a name="[7ad]"></a>constructPublishReply</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mqtt_codec.o(i.constructPublishReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = constructPublishReply &rArr; BUFFER_pre_build &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_pre_build
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_delete
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publishRelease
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publishReceived
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publishComplete
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publishAck
</UL>

<P><STRONG><a name="[7ae]"></a>constructPublishVariableHeader</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, mqtt_codec.o(i.constructPublishVariableHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = constructPublishVariableHeader &rArr; STRING_sprintf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_length
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STRING_sprintf
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeUTF
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
</UL>

<P><STRONG><a name="[7af]"></a>constructSubscibeTypeVariableHeader</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mqtt_codec.o(i.constructSubscibeTypeVariableHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = constructSubscibeTypeVariableHeader &rArr; BUFFER_enlarge &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u_char
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_enlarge
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteutil_writeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_unsubscribe
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_subscribe
</UL>

<P><STRONG><a name="[984]"></a>prepareheaderDataInfo</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, mqtt_codec.o(i.prepareheaderDataInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prepareheaderDataInfo &rArr; BUFFER_pre_build &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_pre_build
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_new
</UL>
<BR>[Called By]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_bytesReceived
</UL>

<P><STRONG><a name="[987]"></a>retrieve_qos_value</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mqtt_codec.o(i.retrieve_qos_value))
<BR><BR>[Called By]<UL><LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_codec_publish
</UL>

<P><STRONG><a name="[373]"></a>BG96_power</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, bg96_interface.o(i.BG96_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BG96_power &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_vbat_on
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_vbat_off
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_reset_on
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_reset_off
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_pwr_key_on
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_pwr_key_off
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_power_on
</UL>

<P><STRONG><a name="[372]"></a>BG96_receive</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, bg96_interface.o(i.BG96_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BG96_receive &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_recv
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_init
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_send
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket
</UL>

<P><STRONG><a name="[37e]"></a>BG96_set_READ_aswer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bg96_interface.o(i.BG96_set_READ_aswer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BG96_set_READ_aswer
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_timeout_load
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_recv
</UL>

<P><STRONG><a name="[36c]"></a>BG96_set_aswer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bg96_interface.o(i.BG96_set_aswer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BG96_set_aswer
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_timeout_load
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_init
</UL>

<P><STRONG><a name="[380]"></a>BG96_socket</STRONG> (Thumb, 232 bytes, Stack size 304 bytes, bg96_interface.o(i.BG96_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = BG96_socket &rArr; BG96_receive &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPrintf
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_timeout_load
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_open
</UL>

<P><STRONG><a name="[386]"></a>BG96_socket_alloc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bg96_interface.o(i.BG96_socket_alloc))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_open
</UL>

<P><STRONG><a name="[38c]"></a>BG96_socket_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bg96_interface.o(i.BG96_socket_free))
<BR><BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_recv
</UL>

<P><STRONG><a name="[38d]"></a>BG96_socket_send</STRONG> (Thumb, 248 bytes, Stack size 72 bytes, bg96_interface.o(i.BG96_socket_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BG96_socket_send &rArr; BG96_receive &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPrintf
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_timeout_load
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_write
</UL>

<P><STRONG><a name="[37f]"></a>BG96_timeout_load</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bg96_interface.o(i.BG96_timeout_load))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_send
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_set_aswer
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_set_READ_aswer
</UL>

<P><STRONG><a name="[36b]"></a>vPrintf</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bg96_interface.o(i.vPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPrintf &rArr; BG96_uart_send &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_uart_send
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_recv
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_init
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket_send
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BG96_socket
</UL>

<P><STRONG><a name="[2fb]"></a>_isoweek</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_yeardays
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>

<P><STRONG><a name="[2fc]"></a>_yeardays</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, strftime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>

<P><STRONG><a name="[787]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[77b]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[789]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[788]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[25c]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0vsnprintf)
<LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[25d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[786]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1df]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[323]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[32b]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
